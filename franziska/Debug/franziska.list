
franziska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  080092d0  080092d0  000192d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d24  08009d24  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d2c  08009d2c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d2c  08009d2c  00019d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d30  08009d30  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  200001e8  08009f1c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08009f1c  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3b9  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae8  00000000  00000000  0003b5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00040398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bae  00000000  00000000  000414d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019827  00000000  00000000  00068086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1e07  00000000  00000000  000818ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001636b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00163708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080092b4 	.word	0x080092b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080092b4 	.word	0x080092b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9b9 	b.w	800101c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <sendMessage>:
#include "comm.h"
#include "usart.h"
#include <string.h>
#include <stdlib.h>

void sendMessage(char *messageToSend){
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	char * messageEnding = "\r\n";
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <sendMessage+0x6c>)
 800102a:	617b      	str	r3, [r7, #20]
	int messageLen = strlen(messageToSend) + strlen(messageEnding);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff f8ef 	bl	8000210 <strlen>
 8001032:	4604      	mov	r4, r0
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff f8eb 	bl	8000210 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	4423      	add	r3, r4
 800103e:	613b      	str	r3, [r7, #16]
	char * message = malloc(messageLen);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4618      	mov	r0, r3
 8001044:	f005 fa7e 	bl	8006544 <malloc>
 8001048:	4603      	mov	r3, r0
 800104a:	60fb      	str	r3, [r7, #12]
	strcpy(message, messageToSend);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f005 ffe3 	bl	800701a <strcpy>
	strcat(message, messageEnding);
 8001054:	6979      	ldr	r1, [r7, #20]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f005 ffd0 	bl	8006ffc <strcat>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, messageLen, HAL_MAX_DELAY);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <sendMessage+0x70>)
 8001068:	f003 fa95 	bl	8004596 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLen, HAL_MAX_DELAY);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <sendMessage+0x74>)
 8001078:	f003 fa8d 	bl	8004596 <HAL_UART_Transmit>

	free(message);
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f005 fa69 	bl	8006554 <free>
}
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	bf00      	nop
 800108c:	080092d0 	.word	0x080092d0
 8001090:	20000558 	.word	0x20000558
 8001094:	20000514 	.word	0x20000514

08001098 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <MX_ADC1_Init+0xb4>)
 80010ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010be:	2201      	movs	r2, #1
 80010c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <MX_ADC1_Init+0xb8>)
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f6:	4814      	ldr	r0, [pc, #80]	; (8001148 <MX_ADC1_Init+0xb0>)
 80010f8:	f000 fea6 	bl	8001e48 <HAL_ADC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 faab 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_ADC1_Init+0xb0>)
 8001118:	f000 ffec 	bl	80020f4 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001122:	f000 fa9b 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_ADC1_Init+0xb0>)
 8001130:	f000 ffe0 	bl	80020f4 <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800113a:	f000 fa8f 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000414 	.word	0x20000414
 800114c:	40012000 	.word	0x40012000
 8001150:	0f000001 	.word	0x0f000001

08001154 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_ADC_MspInit+0x7c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d127      	bne.n	80011c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_ADC_MspInit+0x80>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <HAL_ADC_MspInit+0x80>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_ADC_MspInit+0x80>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_ADC_MspInit+0x80>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_ADC_MspInit+0x80>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_ADC_MspInit+0x80>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ae:	2301      	movs	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_ADC_MspInit+0x84>)
 80011c2:	f001 fb69 	bl	8002898 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40012000 	.word	0x40012000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MX_GPIO_Init+0xf0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a34      	ldr	r2, [pc, #208]	; (80012cc <MX_GPIO_Init+0xf0>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <MX_GPIO_Init+0xf0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_GPIO_Init+0xf0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <MX_GPIO_Init+0xf0>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_GPIO_Init+0xf0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001230:	4827      	ldr	r0, [pc, #156]	; (80012d0 <MX_GPIO_Init+0xf4>)
 8001232:	f001 fcdd 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_N_Pin|HX711_CLK_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800123c:	4825      	ldr	r0, [pc, #148]	; (80012d4 <MX_GPIO_Init+0xf8>)
 800123e:	f001 fcd7 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 8001242:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4619      	mov	r1, r3
 800125a:	481d      	ldr	r0, [pc, #116]	; (80012d0 <MX_GPIO_Init+0xf4>)
 800125c:	f001 fb1c 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = joystick_Pin;
 8001260:	2320      	movs	r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001264:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(joystick_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4619      	mov	r1, r3
 8001274:	4817      	ldr	r0, [pc, #92]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001276:	f001 fb0f 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin|HX711_CLK_Pin;
 800127a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800127e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	4810      	ldr	r0, [pc, #64]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001294:	f001 fb00 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_DATA_Pin;
 8001298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX711_DATA_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	4619      	mov	r1, r3
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <MX_GPIO_Init+0xf8>)
 80012ae:	f001 faf3 	bl	8002898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2017      	movs	r0, #23
 80012b8:	f001 fa25 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012bc:	2017      	movs	r0, #23
 80012be:	f001 fa3e 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f000 fd1e 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f900 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f7ff ff7a 	bl	80011dc <MX_GPIO_Init>
  MX_ADC1_Init();
 80012e8:	f7ff fed6 	bl	8001098 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80012ec:	f000 fc3e 	bl	8001b6c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80012f0:	f000 f9ba 	bl	8001668 <MX_SPI1_Init>
  MX_TIM1_Init();
 80012f4:	f000 fb80 	bl	80019f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80012f8:	f000 fc0e 	bl	8001b18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80012fc:	f004 fabb 	bl	8005876 <lcd_init>
  lcd_clear();
 8001300:	f004 fb14 	bl	800592c <lcd_clear>
  initScale();
 8001304:	f005 f80a 	bl	800631c <initScale>
  welcome_display();
 8001308:	f004 fd4e 	bl	8005da8 <welcome_display>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sendMessage("l");
 800130c:	4867      	ldr	r0, [pc, #412]	; (80014ac <main+0x1d4>)
 800130e:	f7ff fe87 	bl	8001020 <sendMessage>
  HAL_Delay(1000);
 8001312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001316:	f000 fd73 	bl	8001e00 <HAL_Delay>
  sendMessage("l");
 800131a:	4864      	ldr	r0, [pc, #400]	; (80014ac <main+0x1d4>)
 800131c:	f7ff fe80 	bl	8001020 <sendMessage>
  while (1)
  {
		status = potiRead(&rawValue);
 8001320:	4863      	ldr	r0, [pc, #396]	; (80014b0 <main+0x1d8>)
 8001322:	f004 fe01 	bl	8005f28 <potiRead>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <main+0x1dc>)
 800132c:	701a      	strb	r2, [r3, #0]

		if(status == HAL_OK){
 800132e:	4b61      	ldr	r3, [pc, #388]	; (80014b4 <main+0x1dc>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 80b7 	bne.w	80014a6 <main+0x1ce>
			if(step == 0)
 8001338:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <main+0x1e0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <main+0x6e>
				menu1_display();
 8001340:	f004 fd4a 	bl	8005dd8 <menu1_display>
 8001344:	e7ec      	b.n	8001320 <main+0x48>
			else if(step == 1)
 8001346:	4b5c      	ldr	r3, [pc, #368]	; (80014b8 <main+0x1e0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <main+0x7c>
				menu2_display();
 800134e:	f004 fd61 	bl	8005e14 <menu2_display>
 8001352:	e7e5      	b.n	8001320 <main+0x48>
			else if (step == 2)
 8001354:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <main+0x1e0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d105      	bne.n	8001368 <main+0x90>
				weight = getWeight();
 800135c:	f004 fffe 	bl	800635c <getWeight>
 8001360:	4603      	mov	r3, r0
 8001362:	4a56      	ldr	r2, [pc, #344]	; (80014bc <main+0x1e4>)
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e7db      	b.n	8001320 <main+0x48>
			else if(step == 3)
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <main+0x1e0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d109      	bne.n	8001384 <main+0xac>
				size = menu3_display(weight);
 8001370:	4b52      	ldr	r3, [pc, #328]	; (80014bc <main+0x1e4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fd6b 	bl	8005e50 <menu3_display>
 800137a:	4603      	mov	r3, r0
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <main+0x1e8>)
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e7cd      	b.n	8001320 <main+0x48>
			else if(step == 4)
 8001384:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <main+0x1e0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d106      	bne.n	800139a <main+0xc2>
				percentage = potiPrint(&rawValue);
 800138c:	4848      	ldr	r0, [pc, #288]	; (80014b0 <main+0x1d8>)
 800138e:	f004 fde5 	bl	8005f5c <potiPrint>
 8001392:	4603      	mov	r3, r0
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <main+0x1ec>)
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e7c2      	b.n	8001320 <main+0x48>
			else if(step == 5){
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <main+0x1e0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10b      	bne.n	80013ba <main+0xe2>
				status = potiDeInit();
 80013a2:	f004 ffb1 	bl	8006308 <potiDeInit>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <main+0x1dc>)
 80013ac:	701a      	strb	r2, [r3, #0]
				menu4_display(percentage);
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <main+0x1ec>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fd7c 	bl	8005eb0 <menu4_display>
 80013b8:	e7b2      	b.n	8001320 <main+0x48>
			}
			else if(step == 6){
 80013ba:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <main+0x1e0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d10f      	bne.n	80013e2 <main+0x10a>
				sendMessage("b"); // move the glass to next position
 80013c2:	4841      	ldr	r0, [pc, #260]	; (80014c8 <main+0x1f0>)
 80013c4:	f7ff fe2c 	bl	8001020 <sendMessage>
				HAL_Delay(2500);
 80013c8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80013cc:	f000 fd18 	bl	8001e00 <HAL_Delay>
				sendMessage("t"); // open valve for syrup
 80013d0:	483e      	ldr	r0, [pc, #248]	; (80014cc <main+0x1f4>)
 80013d2:	f7ff fe25 	bl	8001020 <sendMessage>
				step ++;
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <main+0x1e0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a36      	ldr	r2, [pc, #216]	; (80014b8 <main+0x1e0>)
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e79e      	b.n	8001320 <main+0x48>
			}
			else if(step == 7){
 80013e2:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <main+0x1e0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b07      	cmp	r3, #7
 80013e8:	d12b      	bne.n	8001442 <main+0x16a>
				weight = getWeight2();
 80013ea:	f004 fffb 	bl	80063e4 <getWeight2>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a32      	ldr	r2, [pc, #200]	; (80014bc <main+0x1e4>)
 80013f2:	6013      	str	r3, [r2, #0]
				isFull = checkWeight(size, weight, percentage);
 80013f4:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <main+0x1e8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <main+0x1e4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <main+0x1ec>)
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	f005 f81a 	bl	800643c <checkWeight>
 8001408:	4603      	mov	r3, r0
 800140a:	4a31      	ldr	r2, [pc, #196]	; (80014d0 <main+0x1f8>)
 800140c:	6013      	str	r3, [r2, #0]
				if(isFull){
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <main+0x1f8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d084      	beq.n	8001320 <main+0x48>
					sendMessage("z"); // close valve for syrup
 8001416:	482f      	ldr	r0, [pc, #188]	; (80014d4 <main+0x1fc>)
 8001418:	f7ff fe02 	bl	8001020 <sendMessage>
					HAL_Delay(10);
 800141c:	200a      	movs	r0, #10
 800141e:	f000 fcef 	bl	8001e00 <HAL_Delay>
					sendMessage("b"); // move the glass to next position
 8001422:	4829      	ldr	r0, [pc, #164]	; (80014c8 <main+0x1f0>)
 8001424:	f7ff fdfc 	bl	8001020 <sendMessage>
					HAL_Delay(2500);
 8001428:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800142c:	f000 fce8 	bl	8001e00 <HAL_Delay>
					sendMessage("g"); // open valve for water
 8001430:	4829      	ldr	r0, [pc, #164]	; (80014d8 <main+0x200>)
 8001432:	f7ff fdf5 	bl	8001020 <sendMessage>
					step ++;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <main+0x1e0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <main+0x1e0>)
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e76e      	b.n	8001320 <main+0x48>
				}
			}
			else if(step == 8){
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <main+0x1e0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d125      	bne.n	8001496 <main+0x1be>
				weight = getWeight2();
 800144a:	f004 ffcb 	bl	80063e4 <getWeight2>
 800144e:	4603      	mov	r3, r0
 8001450:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <main+0x1e4>)
 8001452:	6013      	str	r3, [r2, #0]
				isFull = checkWeight2(size, weight, percentage);
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <main+0x1e8>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <main+0x1e4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <main+0x1ec>)
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	f005 f81c 	bl	80064a0 <checkWeight2>
 8001468:	4603      	mov	r3, r0
 800146a:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <main+0x1f8>)
 800146c:	6013      	str	r3, [r2, #0]
				if(isFull){
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <main+0x1f8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f43f af54 	beq.w	8001320 <main+0x48>
					sendMessage("h"); // close valve for water
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <main+0x204>)
 800147a:	f7ff fdd1 	bl	8001020 <sendMessage>
					HAL_Delay(10);
 800147e:	200a      	movs	r0, #10
 8001480:	f000 fcbe 	bl	8001e00 <HAL_Delay>
					sendMessage("m"); // move glass back
 8001484:	4816      	ldr	r0, [pc, #88]	; (80014e0 <main+0x208>)
 8001486:	f7ff fdcb 	bl	8001020 <sendMessage>
					step ++;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <main+0x1e0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <main+0x1e0>)
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e744      	b.n	8001320 <main+0x48>
				}
			}
			else if(step > 8){
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <main+0x1e0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b08      	cmp	r3, #8
 800149c:	f77f af40 	ble.w	8001320 <main+0x48>
				menu5_display();
 80014a0:	f004 fd24 	bl	8005eec <menu5_display>
 80014a4:	e73c      	b.n	8001320 <main+0x48>
			}
		}
		else
			Error_Handler();
 80014a6:	f000 f8d9 	bl	800165c <Error_Handler>
		status = potiRead(&rawValue);
 80014aa:	e739      	b.n	8001320 <main+0x48>
 80014ac:	080092d4 	.word	0x080092d4
 80014b0:	2000045c 	.word	0x2000045c
 80014b4:	20000470 	.word	0x20000470
 80014b8:	20000204 	.word	0x20000204
 80014bc:	2000046c 	.word	0x2000046c
 80014c0:	20000468 	.word	0x20000468
 80014c4:	20000464 	.word	0x20000464
 80014c8:	080092d8 	.word	0x080092d8
 80014cc:	080092dc 	.word	0x080092dc
 80014d0:	20000460 	.word	0x20000460
 80014d4:	080092e0 	.word	0x080092e0
 80014d8:	080092e4 	.word	0x080092e4
 80014dc:	080092e8 	.word	0x080092e8
 80014e0:	080092ec 	.word	0x080092ec

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b094      	sub	sp, #80	; 0x50
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	2234      	movs	r2, #52	; 0x34
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 f836 	bl	8006564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <SystemClock_Config+0xb8>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <SystemClock_Config+0xb8>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <SystemClock_Config+0xb8>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <SystemClock_Config+0xbc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <SystemClock_Config+0xbc>)
 8001532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <SystemClock_Config+0xbc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001544:	2302      	movs	r3, #2
 8001546:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800154c:	2310      	movs	r3, #16
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001550:	2300      	movs	r3, #0
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fdf1 	bl	8003140 <HAL_RCC_OscConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001564:	f000 f87a 	bl	800165c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	230f      	movs	r3, #15
 800156a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fb66 	bl	8002c54 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800158e:	f000 f865 	bl	800165c <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3750      	adds	r7, #80	; 0x50
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == joystick_Pin && button_state == true){ // Check pin
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d10a      	bne.n	80015ca <HAL_GPIO_EXTI_Callback+0x26>
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_EXTI_Callback+0x26>
		HAL_TIM_Base_Start_IT(&htim1);
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <HAL_GPIO_EXTI_Callback+0x38>)
 80015be:	f002 fb3d 	bl	8003c3c <HAL_TIM_Base_Start_IT>
		button_state = false;
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	e001      	b.n	80015ce <HAL_GPIO_EXTI_Callback+0x2a>
	}
	else{
		__NOP();
 80015ca:	bf00      	nop
	}
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	200004cc 	.word	0x200004cc

080015e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	UNUSED(htim);		// Prevent unused argument(s) compilation warning

	if(HAL_GPIO_ReadPin(joystick_GPIO_Port, joystick_Pin) == GPIO_PIN_RESET){
 80015e8:	2120      	movs	r1, #32
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015ec:	f001 fae8 	bl	8002bc0 <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10a      	bne.n	800160c <HAL_TIM_PeriodElapsedCallback+0x2c>
		step ++;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015fe:	6013      	str	r3, [r2, #0]
		button_state = true;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001608:	f002 fb88 	bl	8003d1c <HAL_TIM_Base_Stop_IT>
	}
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40020400 	.word	0x40020400
 8001618:	20000204 	.word	0x20000204
 800161c:	20000000 	.word	0x20000000
 8001620:	200004cc 	.word	0x200004cc

08001624 <_write>:


int _write(int fd, char* ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY)== HAL_OK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	b29a      	uxth	r2, r3
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <_write+0x34>)
 800163c:	f002 ffab 	bl	8004596 <HAL_UART_Transmit>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <_write+0x26>
		return len;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	e001      	b.n	800164e <_write+0x2a>
	else
		return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000558 	.word	0x20000558

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>
	...

08001668 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_SPI1_Init+0x68>)
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <MX_SPI1_Init+0x6c>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_SPI1_Init+0x68>)
 8001674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_SPI1_Init+0x68>)
 800167c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001680:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_SPI1_Init+0x68>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_SPI1_Init+0x68>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_SPI1_Init+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_SPI1_Init+0x68>)
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SPI1_Init+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_SPI1_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SPI1_Init+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_SPI1_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SPI1_Init+0x68>)
 80016b6:	220a      	movs	r2, #10
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_SPI1_Init+0x68>)
 80016bc:	f001 ffde 	bl	800367c <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80016c6:	f7ff ffc9 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000474 	.word	0x20000474
 80016d4:	40013000 	.word	0x40013000

080016d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_SPI_MspInit+0x84>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12b      	bne.n	8001752 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_SPI_MspInit+0x88>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_SPI_MspInit+0x88>)
 8001704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_SPI_MspInit+0x88>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_SPI_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <HAL_SPI_MspInit+0x88>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_SPI_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001732:	23a0      	movs	r3, #160	; 0xa0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001742:	2305      	movs	r3, #5
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_SPI_MspInit+0x8c>)
 800174e:	f001 f8a3 	bl	8002898 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40013000 	.word	0x40013000
 8001760:	40023800 	.word	0x40023800
 8001764:	40020000 	.word	0x40020000

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_MspInit+0x4c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x4c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 fadc 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001810:	2020      	movs	r0, #32
 8001812:	f001 fa07 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001822:	f002 faaa 	bl	8003d7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200004cc 	.word	0x200004cc

08001830 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001836:	f002 faa0 	bl	8003d7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200004cc 	.word	0x200004cc

08001844 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800184a:	f002 fa96 	bl	8003d7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200004cc 	.word	0x200004cc

08001858 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <TIM1_CC_IRQHandler+0x10>)
 800185e:	f002 fa8c 	bl	8003d7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200004cc 	.word	0x200004cc

0800186c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <USART2_IRQHandler+0x10>)
 8001872:	f002 ff23 	bl	80046bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000558 	.word	0x20000558

08001880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_kill>:

int _kill(int pid, int sig)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800189a:	f004 fe29 	bl	80064f0 <__errno>
 800189e:	4603      	mov	r3, r0
 80018a0:	2216      	movs	r2, #22
 80018a2:	601a      	str	r2, [r3, #0]
	return -1;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_exit>:

void _exit (int status)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ffe7 	bl	8001890 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018c2:	e7fe      	b.n	80018c2 <_exit+0x12>

080018c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e00a      	b.n	80018ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d6:	f3af 8000 	nop.w
 80018da:	4601      	mov	r1, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbf0      	blt.n	80018d6 <_read+0x12>
	}

return len;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
	return -1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001926:	605a      	str	r2, [r3, #4]
	return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_isatty>:

int _isatty(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	return 1;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <_sbrk+0x5c>)
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <_sbrk+0x60>)
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <_sbrk+0x64>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <_sbrk+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d207      	bcs.n	80019a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001998:	f004 fdaa 	bl	80064f0 <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	220c      	movs	r2, #12
 80019a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	e009      	b.n	80019bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <_sbrk+0x64>)
 80019b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20020000 	.word	0x20020000
 80019c8:	00000400 	.word	0x00000400
 80019cc:	20000208 	.word	0x20000208
 80019d0:	20000630 	.word	0x20000630

080019d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <MX_TIM1_Init+0x9c>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a1c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001a20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a2a:	2231      	movs	r2, #49	; 0x31
 8001a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a42:	f002 f8ab 	bl	8003b9c <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a4c:	f7ff fe06 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a5e:	f002 fa94 	bl	8003f8a <HAL_TIM_ConfigClockSource>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a68:	f7ff fdf8 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_TIM1_Init+0x98>)
 8001a7a:	f002 fcaf 	bl	80043dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a84:	f7ff fdea 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200004cc 	.word	0x200004cc
 8001a94:	40010000 	.word	0x40010000

08001a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <HAL_TIM_Base_MspInit+0x78>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12d      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2018      	movs	r0, #24
 8001acc:	f000 fe1b 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ad0:	2018      	movs	r0, #24
 8001ad2:	f000 fe34 	bl	800273e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2019      	movs	r0, #25
 8001adc:	f000 fe13 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae0:	2019      	movs	r0, #25
 8001ae2:	f000 fe2c 	bl	800273e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	201a      	movs	r0, #26
 8001aec:	f000 fe0b 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001af0:	201a      	movs	r0, #26
 8001af2:	f000 fe24 	bl	800273e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	201b      	movs	r0, #27
 8001afc:	f000 fe03 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b00:	201b      	movs	r0, #27
 8001b02:	f000 fe1c 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40023800 	.word	0x40023800

08001b18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_USART1_UART_Init+0x50>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b50:	f002 fcd4 	bl	80044fc <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b5a:	f7ff fd7f 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000514 	.word	0x20000514
 8001b68:	40011000 	.word	0x40011000

08001b6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART2_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f002 fcaa 	bl	80044fc <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f7ff fd55 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000558 	.word	0x20000558
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a36      	ldr	r2, [pc, #216]	; (8001cb8 <HAL_UART_MspInit+0xf8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12d      	bne.n	8001c3e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a34      	ldr	r2, [pc, #208]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4822      	ldr	r0, [pc, #136]	; (8001cc0 <HAL_UART_MspInit+0x100>)
 8001c38:	f000 fe2e 	bl	8002898 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c3c:	e038      	b.n	8001cb0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <HAL_UART_MspInit+0x104>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d133      	bne.n	8001cb0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_UART_MspInit+0xfc>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c80:	230c      	movs	r3, #12
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c90:	2307      	movs	r3, #7
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <HAL_UART_MspInit+0x100>)
 8001c9c:	f000 fdfc 	bl	8002898 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2026      	movs	r0, #38	; 0x26
 8001ca6:	f000 fd2e 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001caa:	2026      	movs	r0, #38	; 0x26
 8001cac:	f000 fd47 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001cb0:	bf00      	nop
 8001cb2:	3730      	adds	r7, #48	; 0x30
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40011000 	.word	0x40011000
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40004400 	.word	0x40004400

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cce:	490e      	ldr	r1, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce4:	4c0b      	ldr	r4, [pc, #44]	; (8001d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cf2:	f7ff fe6f 	bl	80019d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f004 fc01 	bl	80064fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff faed 	bl	80012d8 <main>
  bx  lr    
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d0c:	08009d34 	.word	0x08009d34
  ldr r2, =_sbss
 8001d10:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d14:	20000630 	.word	0x20000630

08001d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_Init+0x40>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_Init+0x40>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_Init+0x40>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 fcd3 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	200f      	movs	r0, #15
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff fd0a 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fceb 	bl	800275a <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 fcb3 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000004 	.word	0x20000004
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	2000000c 	.word	0x2000000c
 8001de4:	2000059c 	.word	0x2000059c

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000059c 	.word	0x2000059c

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c

08001e48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e033      	b.n	8001ec6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff f974 	bl	8001154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e8e:	f023 0302 	bic.w	r3, r3, #2
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fa5c 	bl	8002358 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb6:	e001      	b.n	8001ebc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_Start+0x1a>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e0b2      	b.n	8002050 <HAL_ADC_Start+0x180>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d018      	beq.n	8001f32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f10:	4b52      	ldr	r3, [pc, #328]	; (800205c <HAL_ADC_Start+0x18c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_ADC_Start+0x190>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0c9a      	lsrs	r2, r3, #18
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f24:	e002      	b.n	8001f2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f9      	bne.n	8001f26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d17a      	bne.n	8002036 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7e:	d106      	bne.n	8001f8e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f023 0206 	bic.w	r2, r3, #6
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <HAL_ADC_Start+0x194>)
 8001f9e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fa8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d12a      	bne.n	800200c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <HAL_ADC_Start+0x198>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d015      	beq.n	8001fec <HAL_ADC_Start+0x11c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_ADC_Start+0x19c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_Start+0x106>
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_ADC_Start+0x194>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_ADC_Start+0x1a0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d136      	bne.n	800204e <HAL_ADC_Start+0x17e>
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_ADC_Start+0x194>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d130      	bne.n	800204e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d129      	bne.n	800204e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	e020      	b.n	800204e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a15      	ldr	r2, [pc, #84]	; (8002068 <HAL_ADC_Start+0x198>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d11b      	bne.n	800204e <HAL_ADC_Start+0x17e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d114      	bne.n	800204e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	e00b      	b.n	800204e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f043 0210 	orr.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	20000004 	.word	0x20000004
 8002060:	431bde83 	.word	0x431bde83
 8002064:	40012300 	.word	0x40012300
 8002068:	40012000 	.word	0x40012000
 800206c:	40012100 	.word	0x40012100
 8002070:	40012200 	.word	0x40012200

08002074 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_Stop+0x16>
 8002086:	2302      	movs	r3, #2
 8002088:	e021      	b.n	80020ce <HAL_ADC_Stop+0x5a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1c>
 800210c:	2302      	movs	r3, #2
 800210e:	e113      	b.n	8002338 <HAL_ADC_ConfigChannel+0x244>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b09      	cmp	r3, #9
 800211e:	d925      	bls.n	800216c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	3b1e      	subs	r3, #30
 8002136:	2207      	movs	r2, #7
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43da      	mvns	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	400a      	ands	r2, r1
 8002144:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	4618      	mov	r0, r3
 8002158:	4603      	mov	r3, r0
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4403      	add	r3, r0
 800215e:	3b1e      	subs	r3, #30
 8002160:	409a      	lsls	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	e022      	b.n	80021b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6919      	ldr	r1, [r3, #16]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	2207      	movs	r2, #7
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	400a      	ands	r2, r1
 800218e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4403      	add	r3, r0
 80021a8:	409a      	lsls	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d824      	bhi.n	8002204 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3b05      	subs	r3, #5
 80021cc:	221f      	movs	r2, #31
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	400a      	ands	r2, r1
 80021da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4618      	mov	r0, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3b05      	subs	r3, #5
 80021f6:	fa00 f203 	lsl.w	r2, r0, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	635a      	str	r2, [r3, #52]	; 0x34
 8002202:	e04c      	b.n	800229e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d824      	bhi.n	8002256 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b23      	subs	r3, #35	; 0x23
 800221e:	221f      	movs	r2, #31
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43da      	mvns	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	400a      	ands	r2, r1
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b23      	subs	r3, #35	; 0x23
 8002248:	fa00 f203 	lsl.w	r2, r0, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
 8002254:	e023      	b.n	800229e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b41      	subs	r3, #65	; 0x41
 8002268:	221f      	movs	r2, #31
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	400a      	ands	r2, r1
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	3b41      	subs	r3, #65	; 0x41
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_ADC_ConfigChannel+0x250>)
 80022a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a28      	ldr	r2, [pc, #160]	; (8002348 <HAL_ADC_ConfigChannel+0x254>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10f      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x1d8>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b12      	cmp	r3, #18
 80022b2:	d10b      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_ADC_ConfigChannel+0x254>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12b      	bne.n	800232e <HAL_ADC_ConfigChannel+0x23a>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_ADC_ConfigChannel+0x258>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x1f4>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b11      	cmp	r3, #17
 80022e6:	d122      	bne.n	800232e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_ADC_ConfigChannel+0x258>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d111      	bne.n	800232e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_ADC_ConfigChannel+0x25c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_ADC_ConfigChannel+0x260>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	0c9a      	lsrs	r2, r3, #18
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002320:	e002      	b.n	8002328 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3b01      	subs	r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f9      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40012300 	.word	0x40012300
 8002348:	40012000 	.word	0x40012000
 800234c:	10000012 	.word	0x10000012
 8002350:	20000004 	.word	0x20000004
 8002354:	431bde83 	.word	0x431bde83

08002358 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002360:	4b79      	ldr	r3, [pc, #484]	; (8002548 <ADC_Init+0x1f0>)
 8002362:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	431a      	orrs	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800238c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	021a      	lsls	r2, r3, #8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	4a58      	ldr	r2, [pc, #352]	; (800254c <ADC_Init+0x1f4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d022      	beq.n	8002436 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	e00f      	b.n	8002456 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002454:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0202 	bic.w	r2, r2, #2
 8002464:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e1b      	ldrb	r3, [r3, #24]
 8002470:	005a      	lsls	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002492:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	3b01      	subs	r3, #1
 80024b0:	035a      	lsls	r2, r3, #13
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	e007      	b.n	80024cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	051a      	lsls	r2, r3, #20
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800250e:	025a      	lsls	r2, r3, #9
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	029a      	lsls	r2, r3, #10
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40012300 	.word	0x40012300
 800254c:	0f000001 	.word	0x0f000001

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff fb32 	bl	8001de8 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d008      	beq.n	80027a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e052      	b.n	800284a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0216 	bic.w	r2, r2, #22
 80027b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <HAL_DMA_Abort+0x62>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0208 	bic.w	r2, r2, #8
 80027e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f4:	e013      	b.n	800281e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f6:	f7ff faf7 	bl	8001de8 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b05      	cmp	r3, #5
 8002802:	d90c      	bls.n	800281e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2203      	movs	r2, #3
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e015      	b.n	800284a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e4      	bne.n	80027f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	223f      	movs	r2, #63	; 0x3f
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d004      	beq.n	8002870 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e00c      	b.n	800288a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2205      	movs	r2, #5
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e165      	b.n	8002b80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f040 8154 	bne.w	8002b7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d005      	beq.n	80028ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d130      	bne.n	800294c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 0201 	and.w	r2, r3, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d017      	beq.n	8002988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d123      	bne.n	80029dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80ae 	beq.w	8002b7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a5c      	ldr	r2, [pc, #368]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b5a      	ldr	r3, [pc, #360]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3a:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4f      	ldr	r2, [pc, #316]	; (8002ba0 <HAL_GPIO_Init+0x308>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d025      	beq.n	8002ab2 <HAL_GPIO_Init+0x21a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4e      	ldr	r2, [pc, #312]	; (8002ba4 <HAL_GPIO_Init+0x30c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01f      	beq.n	8002aae <HAL_GPIO_Init+0x216>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4d      	ldr	r2, [pc, #308]	; (8002ba8 <HAL_GPIO_Init+0x310>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x212>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4c      	ldr	r2, [pc, #304]	; (8002bac <HAL_GPIO_Init+0x314>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x20e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_GPIO_Init+0x318>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x20a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <HAL_GPIO_Init+0x31c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x206>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a49      	ldr	r2, [pc, #292]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x202>
 8002a96:	2306      	movs	r3, #6
 8002a98:	e00c      	b.n	8002ab4 <HAL_GPIO_Init+0x21c>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e00a      	b.n	8002ab4 <HAL_GPIO_Init+0x21c>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e008      	b.n	8002ab4 <HAL_GPIO_Init+0x21c>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x21c>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x21c>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x21c>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x21c>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f002 0203 	and.w	r2, r2, #3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4093      	lsls	r3, r2
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac4:	4935      	ldr	r1, [pc, #212]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af6:	4a31      	ldr	r2, [pc, #196]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b50:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b74:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	f67f ae96 	bls.w	80028b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40021400 	.word	0x40021400
 8002bb8:	40021800 	.word	0x40021800
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	887b      	ldrh	r3, [r7, #2]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	e001      	b.n	8002be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c00:	787b      	ldrb	r3, [r7, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c0c:	e003      	b.n	8002c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	041a      	lsls	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	619a      	str	r2, [r3, #24]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fcae 	bl	80015a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40013c00 	.word	0x40013c00

08002c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0cc      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d90c      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d044      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d119      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d12:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e06f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e067      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4934      	ldr	r1, [pc, #208]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d44:	f7ff f850 	bl	8001de8 <HAL_GetTick>
 8002d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4c:	f7ff f84c 	bl	8001de8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e04f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d1eb      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d20c      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f855 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe ffb0 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00
 8002e10:	40023800 	.word	0x40023800
 8002e14:	080095a4 	.word	0x080095a4
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	20000008 	.word	0x20000008

08002e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0a9b      	lsrs	r3, r3, #10
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	080095b4 	.word	0x080095b4

08002e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e64:	f7ff ffdc 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0b5b      	lsrs	r3, r3, #13
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	080095b4 	.word	0x080095b4

08002e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e8c:	b087      	sub	sp, #28
 8002e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e90:	2600      	movs	r6, #0
 8002e92:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002e94:	2600      	movs	r6, #0
 8002e96:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002e98:	2600      	movs	r6, #0
 8002e9a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002e9c:	2600      	movs	r6, #0
 8002e9e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea4:	4ea3      	ldr	r6, [pc, #652]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ea6:	68b6      	ldr	r6, [r6, #8]
 8002ea8:	f006 060c 	and.w	r6, r6, #12
 8002eac:	2e0c      	cmp	r6, #12
 8002eae:	f200 8137 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x298>
 8002eb2:	f20f 0c08 	addw	ip, pc, #8
 8002eb6:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ef1 	.word	0x08002ef1
 8002ec0:	08003121 	.word	0x08003121
 8002ec4:	08003121 	.word	0x08003121
 8002ec8:	08003121 	.word	0x08003121
 8002ecc:	08002ef7 	.word	0x08002ef7
 8002ed0:	08003121 	.word	0x08003121
 8002ed4:	08003121 	.word	0x08003121
 8002ed8:	08003121 	.word	0x08003121
 8002edc:	08002efd 	.word	0x08002efd
 8002ee0:	08003121 	.word	0x08003121
 8002ee4:	08003121 	.word	0x08003121
 8002ee8:	08003121 	.word	0x08003121
 8002eec:	08003013 	.word	0x08003013
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b91      	ldr	r3, [pc, #580]	; (8003138 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002ef2:	613b      	str	r3, [r7, #16]
       break;
 8002ef4:	e117      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef6:	4b91      	ldr	r3, [pc, #580]	; (800313c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002ef8:	613b      	str	r3, [r7, #16]
      break;
 8002efa:	e114      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002efc:	4b8d      	ldr	r3, [pc, #564]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f04:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	4b8b      	ldr	r3, [pc, #556]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d024      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b88      	ldr	r3, [pc, #544]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f22:	f04f 0500 	mov.w	r5, #0
 8002f26:	ea02 0004 	and.w	r0, r2, r4
 8002f2a:	ea03 0105 	and.w	r1, r3, r5
 8002f2e:	4b83      	ldr	r3, [pc, #524]	; (800313c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002f30:	fb03 f201 	mul.w	r2, r3, r1
 8002f34:	2300      	movs	r3, #0
 8002f36:	fb03 f300 	mul.w	r3, r3, r0
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a7f      	ldr	r2, [pc, #508]	; (800313c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002f3e:	fba0 0102 	umull	r0, r1, r0, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	4619      	mov	r1, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	f7fd feeb 	bl	8000d28 <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4613      	mov	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e04c      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4b75      	ldr	r3, [pc, #468]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	461a      	mov	r2, r3
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	ea02 0800 	and.w	r8, r2, r0
 8002f74:	ea03 0901 	and.w	r9, r3, r1
 8002f78:	4640      	mov	r0, r8
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	014b      	lsls	r3, r1, #5
 8002f86:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f8a:	0142      	lsls	r2, r0, #5
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	ebb0 0008 	subs.w	r0, r0, r8
 8002f94:	eb61 0109 	sbc.w	r1, r1, r9
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	018b      	lsls	r3, r1, #6
 8002fa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fa6:	0182      	lsls	r2, r0, #6
 8002fa8:	1a12      	subs	r2, r2, r0
 8002faa:	eb63 0301 	sbc.w	r3, r3, r1
 8002fae:	f04f 0000 	mov.w	r0, #0
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	00d9      	lsls	r1, r3, #3
 8002fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fbc:	00d0      	lsls	r0, r2, #3
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	eb12 0208 	adds.w	r2, r2, r8
 8002fc6:	eb43 0309 	adc.w	r3, r3, r9
 8002fca:	f04f 0000 	mov.w	r0, #0
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	0299      	lsls	r1, r3, #10
 8002fd4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fd8:	0290      	lsls	r0, r2, #10
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	f7fd fe9d 	bl	8000d28 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	3301      	adds	r3, #1
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	613b      	str	r3, [r7, #16]
      break;
 8003010:	e089      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003012:	4948      	ldr	r1, [pc, #288]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003014:	6849      	ldr	r1, [r1, #4]
 8003016:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800301a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800301c:	4945      	ldr	r1, [pc, #276]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800301e:	6849      	ldr	r1, [r1, #4]
 8003020:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003024:	2900      	cmp	r1, #0
 8003026:	d024      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003028:	4942      	ldr	r1, [pc, #264]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800302a:	6849      	ldr	r1, [r1, #4]
 800302c:	0989      	lsrs	r1, r1, #6
 800302e:	4608      	mov	r0, r1
 8003030:	f04f 0100 	mov.w	r1, #0
 8003034:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003038:	f04f 0500 	mov.w	r5, #0
 800303c:	ea00 0204 	and.w	r2, r0, r4
 8003040:	ea01 0305 	and.w	r3, r1, r5
 8003044:	493d      	ldr	r1, [pc, #244]	; (800313c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003046:	fb01 f003 	mul.w	r0, r1, r3
 800304a:	2100      	movs	r1, #0
 800304c:	fb01 f102 	mul.w	r1, r1, r2
 8003050:	1844      	adds	r4, r0, r1
 8003052:	493a      	ldr	r1, [pc, #232]	; (800313c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003054:	fba2 0101 	umull	r0, r1, r2, r1
 8003058:	1863      	adds	r3, r4, r1
 800305a:	4619      	mov	r1, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	461a      	mov	r2, r3
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	f7fd fe60 	bl	8000d28 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e04a      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	461a      	mov	r2, r3
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	ea02 0400 	and.w	r4, r2, r0
 800308a:	ea03 0501 	and.w	r5, r3, r1
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	014b      	lsls	r3, r1, #5
 800309c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030a0:	0142      	lsls	r2, r0, #5
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	1b00      	subs	r0, r0, r4
 80030a8:	eb61 0105 	sbc.w	r1, r1, r5
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	018b      	lsls	r3, r1, #6
 80030b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030ba:	0182      	lsls	r2, r0, #6
 80030bc:	1a12      	subs	r2, r2, r0
 80030be:	eb63 0301 	sbc.w	r3, r3, r1
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	00d9      	lsls	r1, r3, #3
 80030cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030d0:	00d0      	lsls	r0, r2, #3
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	1912      	adds	r2, r2, r4
 80030d8:	eb45 0303 	adc.w	r3, r5, r3
 80030dc:	f04f 0000 	mov.w	r0, #0
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	0299      	lsls	r1, r3, #10
 80030e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030ea:	0290      	lsls	r0, r2, #10
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	f7fd fe14 	bl	8000d28 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0f1b      	lsrs	r3, r3, #28
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	613b      	str	r3, [r7, #16]
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003122:	613b      	str	r3, [r7, #16]
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	693b      	ldr	r3, [r7, #16]
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	017d7840 	.word	0x017d7840

08003140 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e28d      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8083 	beq.w	8003266 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003160:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b04      	cmp	r3, #4
 800316a:	d019      	beq.n	80031a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800316c:	4b91      	ldr	r3, [pc, #580]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003174:	2b08      	cmp	r3, #8
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003178:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003184:	d00c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b8b      	ldr	r3, [pc, #556]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d112      	bne.n	80031b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b84      	ldr	r3, [pc, #528]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x124>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e25a      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x90>
 80031c2:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7b      	ldr	r2, [pc, #492]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xcc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0xb4>
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a75      	ldr	r2, [pc, #468]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a72      	ldr	r2, [pc, #456]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xcc>
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a6e      	ldr	r2, [pc, #440]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6b      	ldr	r2, [pc, #428]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fde8 	bl	8001de8 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe fde4 	bl	8001de8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e21f      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xdc>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fdd4 	bl	8001de8 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe fdd0 	bl	8001de8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e20b      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x104>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06f      	beq.n	8003352 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003272:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b00      	cmp	r3, #0
 800327c:	d017      	beq.n	80032ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800327e:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003286:	2b08      	cmp	r3, #8
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328a:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d11c      	bne.n	80032dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b44      	ldr	r3, [pc, #272]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCC_OscConfig+0x186>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1d3      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	e03a      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e4:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_RCC_OscConfig+0x278>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe fd7d 	bl	8001de8 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fe fd79 	bl	8001de8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1b4      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4925      	ldr	r1, [pc, #148]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
 8003324:	e015      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_OscConfig+0x278>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fd5c 	bl	8001de8 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe fd58 	bl	8001de8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e193      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d036      	beq.n	80033cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe fd3c 	bl	8001de8 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe fd38 	bl	8001de8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e173      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x234>
 8003392:	e01b      	b.n	80033cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe fd25 	bl	8001de8 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	e00e      	b.n	80033c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a2:	f7fe fd21 	bl	8001de8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d907      	bls.n	80033c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e15c      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	42470000 	.word	0x42470000
 80033bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b8a      	ldr	r3, [pc, #552]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ea      	bne.n	80033a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8097 	beq.w	8003508 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b83      	ldr	r3, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b7f      	ldr	r3, [pc, #508]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a7e      	ldr	r2, [pc, #504]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b7c      	ldr	r3, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a75      	ldr	r2, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe fce1 	bl	8001de8 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe fcdd 	bl	8001de8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e118      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d106      	bne.n	800345e <HAL_RCC_OscConfig+0x31e>
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
 800345c:	e01c      	b.n	8003498 <HAL_RCC_OscConfig+0x358>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b05      	cmp	r3, #5
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x340>
 8003466:	4b61      	ldr	r3, [pc, #388]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	4a60      	ldr	r2, [pc, #384]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6713      	str	r3, [r2, #112]	; 0x70
 8003472:	4b5e      	ldr	r3, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a5d      	ldr	r2, [pc, #372]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0x358>
 8003480:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a59      	ldr	r2, [pc, #356]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	4b57      	ldr	r3, [pc, #348]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a56      	ldr	r2, [pc, #344]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe fca2 	bl	8001de8 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe fc9e 	bl	8001de8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0d7      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ee      	beq.n	80034a8 <HAL_RCC_OscConfig+0x368>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe fc8c 	bl	8001de8 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe fc88 	bl	8001de8 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0c1      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	4b40      	ldr	r3, [pc, #256]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ee      	bne.n	80034d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	4a3a      	ldr	r2, [pc, #232]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80ad 	beq.w	800366c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b08      	cmp	r3, #8
 800351c:	d060      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d145      	bne.n	80035b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fc5c 	bl	8001de8 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fc58 	bl	8001de8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e093      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	491b      	ldr	r1, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe fc2d 	bl	8001de8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fe fc29 	bl	8001de8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e064      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x452>
 80035b0:	e05c      	b.n	800366c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe fc16 	bl	8001de8 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe fc12 	bl	8001de8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04d      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x480>
 80035de:	e045      	b.n	800366c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e040      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_RCC_OscConfig+0x538>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d030      	beq.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d129      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d122      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003630:	4293      	cmp	r3, r2
 8003632:	d119      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	3b01      	subs	r3, #1
 8003642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d10f      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07b      	b.n	8003786 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800369e:	d009      	beq.n	80036b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]
 80036a6:	e005      	b.n	80036b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe f802 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	ea42 0103 	orr.w	r1, r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	f003 0104 	and.w	r1, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0210 	and.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003774:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b088      	sub	sp, #32
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_SPI_Transmit+0x22>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e126      	b.n	80039fe <HAL_SPI_Transmit+0x270>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037b8:	f7fe fb16 	bl	8001de8 <HAL_GetTick>
 80037bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d002      	beq.n	80037d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037d2:	e10b      	b.n	80039ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_SPI_Transmit+0x52>
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037e4:	e102      	b.n	80039ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	88fa      	ldrh	r2, [r7, #6]
 80037fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382c:	d10f      	bne.n	800384e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d007      	beq.n	800386c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003874:	d14b      	bne.n	800390e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_SPI_Transmit+0xf6>
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d13e      	bne.n	8003902 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	881a      	ldrh	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	1c9a      	adds	r2, r3, #2
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038a8:	e02b      	b.n	8003902 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d112      	bne.n	80038de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	86da      	strh	r2, [r3, #54]	; 0x36
 80038dc:	e011      	b.n	8003902 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038de:	f7fe fa83 	bl	8001de8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d803      	bhi.n	80038f6 <HAL_SPI_Transmit+0x168>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d102      	bne.n	80038fc <HAL_SPI_Transmit+0x16e>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003900:	e074      	b.n	80039ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ce      	bne.n	80038aa <HAL_SPI_Transmit+0x11c>
 800390c:	e04c      	b.n	80039a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_SPI_Transmit+0x18e>
 8003916:	8afb      	ldrh	r3, [r7, #22]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d140      	bne.n	800399e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	7812      	ldrb	r2, [r2, #0]
 8003928:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003942:	e02c      	b.n	800399e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b02      	cmp	r3, #2
 8003950:	d113      	bne.n	800397a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	86da      	strh	r2, [r3, #54]	; 0x36
 8003978:	e011      	b.n	800399e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800397a:	f7fe fa35 	bl	8001de8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d803      	bhi.n	8003992 <HAL_SPI_Transmit+0x204>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d102      	bne.n	8003998 <HAL_SPI_Transmit+0x20a>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800399c:	e026      	b.n	80039ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1cd      	bne.n	8003944 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f8b3 	bl	8003b18 <SPI_EndRxTxTransaction>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e000      	b.n	80039ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80039ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a18:	f7fe f9e6 	bl	8001de8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a28:	f7fe f9de 	bl	8001de8 <HAL_GetTick>
 8003a2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	0d1b      	lsrs	r3, r3, #20
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a3e:	e054      	b.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d050      	beq.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a48:	f7fe f9ce 	bl	8001de8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d902      	bls.n	8003a5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d13d      	bne.n	8003ada <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a76:	d111      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a80:	d004      	beq.n	8003a8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d107      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa4:	d10f      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e017      	b.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d19b      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000004 	.word	0x20000004

08003b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <SPI_EndRxTxTransaction+0x7c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <SPI_EndRxTxTransaction+0x80>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0d5b      	lsrs	r3, r3, #21
 8003b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b34:	fb02 f303 	mul.w	r3, r2, r3
 8003b38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b42:	d112      	bne.n	8003b6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7ff ff5a 	bl	8003a08 <SPI_WaitFlagStateUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e00f      	b.n	8003b8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b80      	cmp	r3, #128	; 0x80
 8003b82:	d0f2      	beq.n	8003b6a <SPI_EndRxTxTransaction+0x52>
 8003b84:	e000      	b.n	8003b88 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b86:	bf00      	nop
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000004 	.word	0x20000004
 8003b98:	165e9f81 	.word	0x165e9f81

08003b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd ff68 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 fac4 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e04e      	b.n	8003cf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a23      	ldr	r2, [pc, #140]	; (8003d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d01d      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d111      	bne.n	8003ce0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d010      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cde:	e007      	b.n	8003cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40000c00 	.word	0x40000c00
 8003d10:	40010400 	.word	0x40010400
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40001800 	.word	0x40001800

08003d1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10f      	bne.n	8003d64 <HAL_TIM_Base_Stop_IT+0x48>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a1a      	ldr	r2, [r3, #32]
 8003d4a:	f240 4344 	movw	r3, #1092	; 0x444
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_Base_Stop_IT+0x48>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d122      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d11b      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f06f 0202 	mvn.w	r2, #2
 8003da6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f9b5 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003dc2:	e005      	b.n	8003dd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f9a7 	bl	8004118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9b8 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d122      	bne.n	8003e2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d11b      	bne.n	8003e2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f06f 0204 	mvn.w	r2, #4
 8003dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f98b 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003e16:	e005      	b.n	8003e24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f97d 	bl	8004118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f98e 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d122      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11b      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f06f 0208 	mvn.w	r2, #8
 8003e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2204      	movs	r2, #4
 8003e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f961 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003e6a:	e005      	b.n	8003e78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f953 	bl	8004118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f964 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d122      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d11b      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0210 	mvn.w	r2, #16
 8003ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f937 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003ebe:	e005      	b.n	8003ecc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f929 	bl	8004118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f93a 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10e      	bne.n	8003efe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f06f 0201 	mvn.w	r2, #1
 8003ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fd fb71 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	2b80      	cmp	r3, #128	; 0x80
 8003f0a:	d10e      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b80      	cmp	r3, #128	; 0x80
 8003f18:	d107      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fadf 	bl	80044e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d10e      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d107      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8ff 	bl	8004154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d10e      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d107      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f06f 0220 	mvn.w	r2, #32
 8003f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 faa9 	bl	80044d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_ConfigClockSource+0x1c>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e0b4      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x186>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fcc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fde:	d03e      	beq.n	800405e <HAL_TIM_ConfigClockSource+0xd4>
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	f200 8087 	bhi.w	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	f000 8086 	beq.w	80040fc <HAL_TIM_ConfigClockSource+0x172>
 8003ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff4:	d87f      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff6:	2b70      	cmp	r3, #112	; 0x70
 8003ff8:	d01a      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0xa6>
 8003ffa:	2b70      	cmp	r3, #112	; 0x70
 8003ffc:	d87b      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffe:	2b60      	cmp	r3, #96	; 0x60
 8004000:	d050      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x11a>
 8004002:	2b60      	cmp	r3, #96	; 0x60
 8004004:	d877      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004006:	2b50      	cmp	r3, #80	; 0x50
 8004008:	d03c      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0xfa>
 800400a:	2b50      	cmp	r3, #80	; 0x50
 800400c:	d873      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d058      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0x13a>
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d86f      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004016:	2b30      	cmp	r3, #48	; 0x30
 8004018:	d064      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0x15a>
 800401a:	2b30      	cmp	r3, #48	; 0x30
 800401c:	d86b      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
 800401e:	2b20      	cmp	r3, #32
 8004020:	d060      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0x15a>
 8004022:	2b20      	cmp	r3, #32
 8004024:	d867      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d05c      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0x15a>
 800402a:	2b10      	cmp	r3, #16
 800402c:	d05a      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0x15a>
 800402e:	e062      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6899      	ldr	r1, [r3, #8]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f000 f9ac 	bl	800439c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004052:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
      break;
 800405c:	e04f      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f000 f995 	bl	800439c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004080:	609a      	str	r2, [r3, #8]
      break;
 8004082:	e03c      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	461a      	mov	r2, r3
 8004092:	f000 f909 	bl	80042a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2150      	movs	r1, #80	; 0x50
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f962 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 80040a2:	e02c      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	461a      	mov	r2, r3
 80040b2:	f000 f928 	bl	8004306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2160      	movs	r1, #96	; 0x60
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f952 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 80040c2:	e01c      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f000 f8e9 	bl	80042a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2140      	movs	r1, #64	; 0x40
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f942 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 80040e2:	e00c      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f000 f939 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 80040f4:	e003      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      break;
 80040fa:	e000      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a40      	ldr	r2, [pc, #256]	; (800427c <TIM_Base_SetConfig+0x114>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004186:	d00f      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <TIM_Base_SetConfig+0x118>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <TIM_Base_SetConfig+0x11c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3b      	ldr	r2, [pc, #236]	; (8004288 <TIM_Base_SetConfig+0x120>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a3a      	ldr	r2, [pc, #232]	; (800428c <TIM_Base_SetConfig+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2f      	ldr	r2, [pc, #188]	; (800427c <TIM_Base_SetConfig+0x114>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d027      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <TIM_Base_SetConfig+0x118>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d023      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <TIM_Base_SetConfig+0x11c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <TIM_Base_SetConfig+0x120>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a29      	ldr	r2, [pc, #164]	; (800428c <TIM_Base_SetConfig+0x124>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d017      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a28      	ldr	r2, [pc, #160]	; (8004290 <TIM_Base_SetConfig+0x128>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <TIM_Base_SetConfig+0x12c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a26      	ldr	r2, [pc, #152]	; (8004298 <TIM_Base_SetConfig+0x130>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <TIM_Base_SetConfig+0x134>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <TIM_Base_SetConfig+0x138>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <TIM_Base_SetConfig+0x13c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <TIM_Base_SetConfig+0x114>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0xf8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0c      	ldr	r2, [pc, #48]	; (800428c <TIM_Base_SetConfig+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	615a      	str	r2, [r3, #20]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40010400 	.word	0x40010400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800
 800429c:	40001800 	.word	0x40001800
 80042a0:	40001c00 	.word	0x40001c00
 80042a4:	40002000 	.word	0x40002000

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004306:	b480      	push	{r7}
 8004308:	b087      	sub	sp, #28
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	f043 0307 	orr.w	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	431a      	orrs	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e05a      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a21      	ldr	r2, [pc, #132]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d01d      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a17      	ldr	r2, [pc, #92]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40001800 	.word	0x40001800

080044d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e03f      	b.n	800458e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd fb4c 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2224      	movs	r2, #36	; 0x24
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fd7b 	bl	800503c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b08a      	sub	sp, #40	; 0x28
 800459a:	af02      	add	r7, sp, #8
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d17c      	bne.n	80046b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_UART_Transmit+0x2c>
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e075      	b.n	80046b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_UART_Transmit+0x3e>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e06e      	b.n	80046b2 <HAL_UART_Transmit+0x11c>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2221      	movs	r2, #33	; 0x21
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ea:	f7fd fbfd 	bl	8001de8 <HAL_GetTick>
 80045ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d108      	bne.n	8004618 <HAL_UART_Transmit+0x82>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e003      	b.n	8004620 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004628:	e02a      	b.n	8004680 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2200      	movs	r2, #0
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 faf9 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e036      	b.n	80046b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3302      	adds	r3, #2
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e007      	b.n	8004672 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	3301      	adds	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1cf      	bne.n	800462a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2200      	movs	r2, #0
 8004692:	2140      	movs	r1, #64	; 0x40
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fac9 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e006      	b.n	80046b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e000      	b.n	80046b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b0ba      	sub	sp, #232	; 0xe8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <HAL_UART_IRQHandler+0x66>
 800470e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fbd3 	bl	8004ec6 <UART_Receive_IT>
      return;
 8004720:	e256      	b.n	8004bd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80de 	beq.w	80048e8 <HAL_UART_IRQHandler+0x22c>
 800472c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80d1 	beq.w	80048e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00b      	beq.n	800476a <HAL_UART_IRQHandler+0xae>
 8004752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f043 0201 	orr.w	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <HAL_UART_IRQHandler+0xd2>
 8004776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0202 	orr.w	r2, r3, #2
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_UART_IRQHandler+0xf6>
 800479a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f043 0204 	orr.w	r2, r3, #4
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d011      	beq.n	80047e2 <HAL_UART_IRQHandler+0x126>
 80047be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f043 0208 	orr.w	r2, r3, #8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 81ed 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_UART_IRQHandler+0x14e>
 80047f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fb5e 	bl	8004ec6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <HAL_UART_IRQHandler+0x17a>
 800482e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04f      	beq.n	80048d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa66 	bl	8004d08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d141      	bne.n	80048ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3314      	adds	r3, #20
 8004872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800487a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800488e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1d9      	bne.n	800484a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	2b00      	cmp	r3, #0
 800489c:	d013      	beq.n	80048c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	4a7d      	ldr	r2, [pc, #500]	; (8004a98 <HAL_UART_IRQHandler+0x3dc>)
 80048a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd ffd1 	bl	8002852 <HAL_DMA_Abort_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	e00e      	b.n	80048e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f99a 	bl	8004c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	e00a      	b.n	80048e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f996 	bl	8004c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d4:	e006      	b.n	80048e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f992 	bl	8004c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048e2:	e170      	b.n	8004bc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	bf00      	nop
    return;
 80048e6:	e16e      	b.n	8004bc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	f040 814a 	bne.w	8004b86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8143 	beq.w	8004b86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 813c 	beq.w	8004b86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	f040 80b4 	bne.w	8004a9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8140 	beq.w	8004bca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800494e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004952:	429a      	cmp	r2, r3
 8004954:	f080 8139 	bcs.w	8004bca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800495e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496a:	f000 8088 	beq.w	8004a7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800499a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800499e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1d9      	bne.n	800496e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e1      	bne.n	80049ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3314      	adds	r3, #20
 80049fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3314      	adds	r3, #20
 8004a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e3      	bne.n	80049f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4e:	f023 0310 	bic.w	r3, r3, #16
 8004a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a60:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e3      	bne.n	8004a3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fd fe7a 	bl	8002772 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8c0 	bl	8004c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a94:	e099      	b.n	8004bca <HAL_UART_IRQHandler+0x50e>
 8004a96:	bf00      	nop
 8004a98:	08004dcf 	.word	0x08004dcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 808b 	beq.w	8004bce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8086 	beq.w	8004bce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ae6:	647a      	str	r2, [r7, #68]	; 0x44
 8004ae8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e3      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3314      	adds	r3, #20
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	623b      	str	r3, [r7, #32]
   return(result);
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b1e:	633a      	str	r2, [r7, #48]	; 0x30
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e3      	bne.n	8004afa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0310 	bic.w	r3, r3, #16
 8004b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b64:	61fa      	str	r2, [r7, #28]
 8004b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	69b9      	ldr	r1, [r7, #24]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	617b      	str	r3, [r7, #20]
   return(result);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e3      	bne.n	8004b40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f848 	bl	8004c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b84:	e023      	b.n	8004bce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x4ea>
 8004b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f929 	bl	8004df6 <UART_Transmit_IT>
    return;
 8004ba4:	e014      	b.n	8004bd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00e      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x514>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d008      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f969 	bl	8004e96 <UART_EndTransmit_IT>
    return;
 8004bc4:	e004      	b.n	8004bd0 <HAL_UART_IRQHandler+0x514>
    return;
 8004bc6:	bf00      	nop
 8004bc8:	e002      	b.n	8004bd0 <HAL_UART_IRQHandler+0x514>
      return;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <HAL_UART_IRQHandler+0x514>
      return;
 8004bce:	bf00      	nop
  }
}
 8004bd0:	37e8      	adds	r7, #232	; 0xe8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop

08004bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b090      	sub	sp, #64	; 0x40
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3c:	e050      	b.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d04c      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4c:	f7fd f8cc 	bl	8001de8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d241      	bcs.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	330c      	adds	r3, #12
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c7c:	637a      	str	r2, [r7, #52]	; 0x34
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e5      	bne.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3314      	adds	r3, #20
 8004cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb0:	623a      	str	r2, [r7, #32]
 8004cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	69f9      	ldr	r1, [r7, #28]
 8004cb6:	6a3a      	ldr	r2, [r7, #32]
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e5      	bne.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e00f      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d09f      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3740      	adds	r7, #64	; 0x40
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b095      	sub	sp, #84	; 0x54
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d30:	643a      	str	r2, [r7, #64]	; 0x40
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d119      	bne.n	8004db4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f023 0310 	bic.w	r3, r3, #16
 8004d96:	647b      	str	r3, [r7, #68]	; 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004da0:	61ba      	str	r2, [r7, #24]
 8004da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6979      	ldr	r1, [r7, #20]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	613b      	str	r3, [r7, #16]
   return(result);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dc2:	bf00      	nop
 8004dc4:	3754      	adds	r7, #84	; 0x54
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff ff09 	bl	8004c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b085      	sub	sp, #20
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b21      	cmp	r3, #33	; 0x21
 8004e08:	d13e      	bne.n	8004e88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e12:	d114      	bne.n	8004e3e <UART_Transmit_IT+0x48>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d110      	bne.n	8004e3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	1c9a      	adds	r2, r3, #2
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	621a      	str	r2, [r3, #32]
 8004e3c:	e008      	b.n	8004e50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	1c59      	adds	r1, r3, #1
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6211      	str	r1, [r2, #32]
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10f      	bne.n	8004e84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff fe8e 	bl	8004bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b08c      	sub	sp, #48	; 0x30
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b22      	cmp	r3, #34	; 0x22
 8004ed8:	f040 80ab 	bne.w	8005032 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d117      	bne.n	8004f16 <UART_Receive_IT+0x50>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d113      	bne.n	8004f16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	1c9a      	adds	r2, r3, #2
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
 8004f14:	e026      	b.n	8004f64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f28:	d007      	beq.n	8004f3a <UART_Receive_IT+0x74>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <UART_Receive_IT+0x82>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e008      	b.n	8004f5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4619      	mov	r1, r3
 8004f72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d15a      	bne.n	800502e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0220 	bic.w	r2, r2, #32
 8004f86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d135      	bne.n	8005024 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f023 0310 	bic.w	r3, r3, #16
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fde:	623a      	str	r2, [r7, #32]
 8004fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	69f9      	ldr	r1, [r7, #28]
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e5      	bne.n	8004fbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d10a      	bne.n	8005016 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fdf9 	bl	8004c14 <HAL_UARTEx_RxEventCallback>
 8005022:	e002      	b.n	800502a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fde1 	bl	8004bec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e002      	b.n	8005034 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3730      	adds	r7, #48	; 0x30
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	b09f      	sub	sp, #124	; 0x7c
 8005042:	af00      	add	r7, sp, #0
 8005044:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	68d9      	ldr	r1, [r3, #12]
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	ea40 0301 	orr.w	r3, r0, r1
 800505c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	431a      	orrs	r2, r3
 8005068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	431a      	orrs	r2, r3
 800506e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	4313      	orrs	r3, r2
 8005074:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005080:	f021 010c 	bic.w	r1, r1, #12
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800508a:	430b      	orrs	r3, r1
 800508c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800508e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	6999      	ldr	r1, [r3, #24]
 800509c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	ea40 0301 	orr.w	r3, r0, r1
 80050a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4bc5      	ldr	r3, [pc, #788]	; (80053c0 <UART_SetConfig+0x384>)
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d004      	beq.n	80050ba <UART_SetConfig+0x7e>
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4bc3      	ldr	r3, [pc, #780]	; (80053c4 <UART_SetConfig+0x388>)
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d103      	bne.n	80050c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ba:	f7fd fed1 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 80050be:	6778      	str	r0, [r7, #116]	; 0x74
 80050c0:	e002      	b.n	80050c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050c2:	f7fd feb9 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 80050c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d0:	f040 80b6 	bne.w	8005240 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d6:	461c      	mov	r4, r3
 80050d8:	f04f 0500 	mov.w	r5, #0
 80050dc:	4622      	mov	r2, r4
 80050de:	462b      	mov	r3, r5
 80050e0:	1891      	adds	r1, r2, r2
 80050e2:	6439      	str	r1, [r7, #64]	; 0x40
 80050e4:	415b      	adcs	r3, r3
 80050e6:	647b      	str	r3, [r7, #68]	; 0x44
 80050e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050ec:	1912      	adds	r2, r2, r4
 80050ee:	eb45 0303 	adc.w	r3, r5, r3
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f04f 0100 	mov.w	r1, #0
 80050fa:	00d9      	lsls	r1, r3, #3
 80050fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005100:	00d0      	lsls	r0, r2, #3
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	1911      	adds	r1, r2, r4
 8005108:	6639      	str	r1, [r7, #96]	; 0x60
 800510a:	416b      	adcs	r3, r5
 800510c:	667b      	str	r3, [r7, #100]	; 0x64
 800510e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	461a      	mov	r2, r3
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	1891      	adds	r1, r2, r2
 800511a:	63b9      	str	r1, [r7, #56]	; 0x38
 800511c:	415b      	adcs	r3, r3
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005124:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005128:	f7fb fdfe 	bl	8000d28 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4ba5      	ldr	r3, [pc, #660]	; (80053c8 <UART_SetConfig+0x38c>)
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	011e      	lsls	r6, r3, #4
 800513a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513c:	461c      	mov	r4, r3
 800513e:	f04f 0500 	mov.w	r5, #0
 8005142:	4622      	mov	r2, r4
 8005144:	462b      	mov	r3, r5
 8005146:	1891      	adds	r1, r2, r2
 8005148:	6339      	str	r1, [r7, #48]	; 0x30
 800514a:	415b      	adcs	r3, r3
 800514c:	637b      	str	r3, [r7, #52]	; 0x34
 800514e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005152:	1912      	adds	r2, r2, r4
 8005154:	eb45 0303 	adc.w	r3, r5, r3
 8005158:	f04f 0000 	mov.w	r0, #0
 800515c:	f04f 0100 	mov.w	r1, #0
 8005160:	00d9      	lsls	r1, r3, #3
 8005162:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005166:	00d0      	lsls	r0, r2, #3
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	1911      	adds	r1, r2, r4
 800516e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005170:	416b      	adcs	r3, r5
 8005172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	461a      	mov	r2, r3
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	1891      	adds	r1, r2, r2
 8005180:	62b9      	str	r1, [r7, #40]	; 0x28
 8005182:	415b      	adcs	r3, r3
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800518a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800518e:	f7fb fdcb 	bl	8000d28 <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4b8c      	ldr	r3, [pc, #560]	; (80053c8 <UART_SetConfig+0x38c>)
 8005198:	fba3 1302 	umull	r1, r3, r3, r2
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	2164      	movs	r1, #100	; 0x64
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	3332      	adds	r3, #50	; 0x32
 80051aa:	4a87      	ldr	r2, [pc, #540]	; (80053c8 <UART_SetConfig+0x38c>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051b8:	441e      	add	r6, r3
 80051ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051bc:	4618      	mov	r0, r3
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	1894      	adds	r4, r2, r2
 80051c8:	623c      	str	r4, [r7, #32]
 80051ca:	415b      	adcs	r3, r3
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051d2:	1812      	adds	r2, r2, r0
 80051d4:	eb41 0303 	adc.w	r3, r1, r3
 80051d8:	f04f 0400 	mov.w	r4, #0
 80051dc:	f04f 0500 	mov.w	r5, #0
 80051e0:	00dd      	lsls	r5, r3, #3
 80051e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051e6:	00d4      	lsls	r4, r2, #3
 80051e8:	4622      	mov	r2, r4
 80051ea:	462b      	mov	r3, r5
 80051ec:	1814      	adds	r4, r2, r0
 80051ee:	653c      	str	r4, [r7, #80]	; 0x50
 80051f0:	414b      	adcs	r3, r1
 80051f2:	657b      	str	r3, [r7, #84]	; 0x54
 80051f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	1891      	adds	r1, r2, r2
 8005200:	61b9      	str	r1, [r7, #24]
 8005202:	415b      	adcs	r3, r3
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800520a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800520e:	f7fb fd8b 	bl	8000d28 <__aeabi_uldivmod>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4b6c      	ldr	r3, [pc, #432]	; (80053c8 <UART_SetConfig+0x38c>)
 8005218:	fba3 1302 	umull	r1, r3, r3, r2
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	2164      	movs	r1, #100	; 0x64
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	3332      	adds	r3, #50	; 0x32
 800522a:	4a67      	ldr	r2, [pc, #412]	; (80053c8 <UART_SetConfig+0x38c>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	f003 0207 	and.w	r2, r3, #7
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4432      	add	r2, r6
 800523c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800523e:	e0b9      	b.n	80053b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005242:	461c      	mov	r4, r3
 8005244:	f04f 0500 	mov.w	r5, #0
 8005248:	4622      	mov	r2, r4
 800524a:	462b      	mov	r3, r5
 800524c:	1891      	adds	r1, r2, r2
 800524e:	6139      	str	r1, [r7, #16]
 8005250:	415b      	adcs	r3, r3
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005258:	1912      	adds	r2, r2, r4
 800525a:	eb45 0303 	adc.w	r3, r5, r3
 800525e:	f04f 0000 	mov.w	r0, #0
 8005262:	f04f 0100 	mov.w	r1, #0
 8005266:	00d9      	lsls	r1, r3, #3
 8005268:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800526c:	00d0      	lsls	r0, r2, #3
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	eb12 0804 	adds.w	r8, r2, r4
 8005276:	eb43 0905 	adc.w	r9, r3, r5
 800527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4618      	mov	r0, r3
 8005280:	f04f 0100 	mov.w	r1, #0
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	008b      	lsls	r3, r1, #2
 800528e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005292:	0082      	lsls	r2, r0, #2
 8005294:	4640      	mov	r0, r8
 8005296:	4649      	mov	r1, r9
 8005298:	f7fb fd46 	bl	8000d28 <__aeabi_uldivmod>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <UART_SetConfig+0x38c>)
 80052a2:	fba3 2302 	umull	r2, r3, r3, r2
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	011e      	lsls	r6, r3, #4
 80052aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ac:	4618      	mov	r0, r3
 80052ae:	f04f 0100 	mov.w	r1, #0
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	1894      	adds	r4, r2, r2
 80052b8:	60bc      	str	r4, [r7, #8]
 80052ba:	415b      	adcs	r3, r3
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c2:	1812      	adds	r2, r2, r0
 80052c4:	eb41 0303 	adc.w	r3, r1, r3
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	f04f 0500 	mov.w	r5, #0
 80052d0:	00dd      	lsls	r5, r3, #3
 80052d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052d6:	00d4      	lsls	r4, r2, #3
 80052d8:	4622      	mov	r2, r4
 80052da:	462b      	mov	r3, r5
 80052dc:	1814      	adds	r4, r2, r0
 80052de:	64bc      	str	r4, [r7, #72]	; 0x48
 80052e0:	414b      	adcs	r3, r1
 80052e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	008b      	lsls	r3, r1, #2
 80052f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052fc:	0082      	lsls	r2, r0, #2
 80052fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005302:	f7fb fd11 	bl	8000d28 <__aeabi_uldivmod>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4b2f      	ldr	r3, [pc, #188]	; (80053c8 <UART_SetConfig+0x38c>)
 800530c:	fba3 1302 	umull	r1, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	2164      	movs	r1, #100	; 0x64
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	3332      	adds	r3, #50	; 0x32
 800531e:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <UART_SetConfig+0x38c>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800532a:	441e      	add	r6, r3
 800532c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800532e:	4618      	mov	r0, r3
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	1894      	adds	r4, r2, r2
 800533a:	603c      	str	r4, [r7, #0]
 800533c:	415b      	adcs	r3, r3
 800533e:	607b      	str	r3, [r7, #4]
 8005340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005344:	1812      	adds	r2, r2, r0
 8005346:	eb41 0303 	adc.w	r3, r1, r3
 800534a:	f04f 0400 	mov.w	r4, #0
 800534e:	f04f 0500 	mov.w	r5, #0
 8005352:	00dd      	lsls	r5, r3, #3
 8005354:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005358:	00d4      	lsls	r4, r2, #3
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	eb12 0a00 	adds.w	sl, r2, r0
 8005362:	eb43 0b01 	adc.w	fp, r3, r1
 8005366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4618      	mov	r0, r3
 800536c:	f04f 0100 	mov.w	r1, #0
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	008b      	lsls	r3, r1, #2
 800537a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800537e:	0082      	lsls	r2, r0, #2
 8005380:	4650      	mov	r0, sl
 8005382:	4659      	mov	r1, fp
 8005384:	f7fb fcd0 	bl	8000d28 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <UART_SetConfig+0x38c>)
 800538e:	fba3 1302 	umull	r1, r3, r3, r2
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2164      	movs	r1, #100	; 0x64
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	3332      	adds	r3, #50	; 0x32
 80053a0:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <UART_SetConfig+0x38c>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	f003 020f 	and.w	r2, r3, #15
 80053ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4432      	add	r2, r6
 80053b2:	609a      	str	r2, [r3, #8]
}
 80053b4:	bf00      	nop
 80053b6:	377c      	adds	r7, #124	; 0x7c
 80053b8:	46bd      	mov	sp, r7
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	40011000 	.word	0x40011000
 80053c4:	40011400 	.word	0x40011400
 80053c8:	51eb851f 	.word	0x51eb851f

080053cc <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 80053d2:	2304      	movs	r3, #4
 80053d4:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 80053d6:	e006      	b.n	80053e6 <hx711_delay_us+0x1a>
  {
    delay--;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	607b      	str	r3, [r7, #4]
    __NOP(); __NOP(); __NOP(); __NOP();
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
  while (delay > 0)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f5      	bne.n	80053d8 <hx711_delay_us+0xc>
  }
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8005402:	e002      	b.n	800540a <hx711_lock+0x10>
    hx711_delay(1);
 8005404:	2001      	movs	r0, #1
 8005406:	f7fc fcfb 	bl	8001e00 <HAL_Delay>
  while (hx711->lock)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	7d1b      	ldrb	r3, [r3, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f8      	bne.n	8005404 <hx711_lock+0xa>
  hx711->lock = 1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	751a      	strb	r2, [r3, #20]
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	751a      	strb	r2, [r3, #20]
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b08a      	sub	sp, #40	; 0x28
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff ffd5 	bl	80053fa <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	88fa      	ldrh	r2, [r7, #6]
 800545a:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005466:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8005468:	f107 0314 	add.w	r3, r7, #20
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	609a      	str	r2, [r3, #8]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8005478:	2301      	movs	r3, #1
 800547a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8005480:	2302      	movs	r3, #2
 8005482:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4619      	mov	r1, r3
 800548e:	68b8      	ldr	r0, [r7, #8]
 8005490:	f7fd fa02 	bl	8002898 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8005494:	2300      	movs	r3, #0
 8005496:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8005498:	2301      	movs	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800549c:	2302      	movs	r3, #2
 800549e:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 80054a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80054a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 80054a4:	f107 0314 	add.w	r3, r7, #20
 80054a8:	4619      	mov	r1, r3
 80054aa:	6838      	ldr	r0, [r7, #0]
 80054ac:	f7fd f9f4 	bl	8002898 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	891b      	ldrh	r3, [r3, #8]
 80054b8:	2201      	movs	r2, #1
 80054ba:	4619      	mov	r1, r3
 80054bc:	f7fd fb98 	bl	8002bf0 <HAL_GPIO_WritePin>
  hx711_delay(10);
 80054c0:	200a      	movs	r0, #10
 80054c2:	f7fc fc9d 	bl	8001e00 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	891b      	ldrh	r3, [r3, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	4619      	mov	r1, r3
 80054d2:	f7fd fb8d 	bl	8002bf0 <HAL_GPIO_WritePin>
  hx711_delay(10);
 80054d6:	200a      	movs	r0, #10
 80054d8:	f7fc fc92 	bl	8001e00 <HAL_Delay>
  hx711_value(hx711);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f80a 	bl	80054f6 <hx711_value>
  hx711_value(hx711);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f807 	bl	80054f6 <hx711_value>
  hx711_unlock(hx711);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff ff99 	bl	8005420 <hx711_unlock>
}
 80054ee:	bf00      	nop
 80054f0:	3728      	adds	r7, #40	; 0x28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8005502:	f7fc fc71 	bl	8001de8 <HAL_GetTick>
 8005506:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8005508:	e00b      	b.n	8005522 <hx711_value+0x2c>
  {
    hx711_delay(1);
 800550a:	2001      	movs	r0, #1
 800550c:	f7fc fc78 	bl	8001e00 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8005510:	f7fc fc6a 	bl	8001de8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b96      	cmp	r3, #150	; 0x96
 800551c:	d901      	bls.n	8005522 <hx711_value+0x2c>
      return 0;
 800551e:	2300      	movs	r3, #0
 8005520:	e055      	b.n	80055ce <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	895b      	ldrh	r3, [r3, #10]
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f7fd fb47 	bl	8002bc0 <HAL_GPIO_ReadPin>
 8005532:	4603      	mov	r3, r0
 8005534:	2b01      	cmp	r3, #1
 8005536:	d0e8      	beq.n	800550a <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	74fb      	strb	r3, [r7, #19]
 800553c:	e02a      	b.n	8005594 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	891b      	ldrh	r3, [r3, #8]
 8005546:	2201      	movs	r2, #1
 8005548:	4619      	mov	r1, r3
 800554a:	f7fd fb51 	bl	8002bf0 <HAL_GPIO_WritePin>
    hx711_delay_us();
 800554e:	f7ff ff3d 	bl	80053cc <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	891b      	ldrh	r3, [r3, #8]
 800555a:	2200      	movs	r2, #0
 800555c:	4619      	mov	r1, r3
 800555e:	f7fd fb47 	bl	8002bf0 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8005562:	f7ff ff33 	bl	80053cc <hx711_delay_us>
    data = data << 1;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	895b      	ldrh	r3, [r3, #10]
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7fd fb22 	bl	8002bc0 <HAL_GPIO_ReadPin>
 800557c:	4603      	mov	r3, r0
 800557e:	2b01      	cmp	r3, #1
 8005580:	d102      	bne.n	8005588 <hx711_value+0x92>
      data ++;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	3301      	adds	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8005588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	3301      	adds	r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	74fb      	strb	r3, [r7, #19]
 8005594:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005598:	2b17      	cmp	r3, #23
 800559a:	ddd0      	ble.n	800553e <hx711_value+0x48>
  }
  data = data ^ 0x800000;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80055a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	891b      	ldrh	r3, [r3, #8]
 80055ac:	2201      	movs	r2, #1
 80055ae:	4619      	mov	r1, r3
 80055b0:	f7fd fb1e 	bl	8002bf0 <HAL_GPIO_WritePin>
  hx711_delay_us();
 80055b4:	f7ff ff0a 	bl	80053cc <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	891b      	ldrh	r3, [r3, #8]
 80055c0:	2200      	movs	r2, #0
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7fd fb14 	bl	8002bf0 <HAL_GPIO_WritePin>
  hx711_delay_us();
 80055c8:	f7ff ff00 	bl	80053cc <hx711_delay_us>
  return data;
 80055cc:	697b      	ldr	r3, [r7, #20]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 80055d6:	b5b0      	push	{r4, r5, r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff ff09 	bl	80053fa <hx711_lock>
  int64_t  ave = 0;
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	81fb      	strh	r3, [r7, #14]
 80055f8:	e013      	b.n	8005622 <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ff7b 	bl	80054f6 <hx711_value>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800560c:	1884      	adds	r4, r0, r2
 800560e:	eb41 0503 	adc.w	r5, r1, r3
 8005612:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 8005616:	2005      	movs	r0, #5
 8005618:	f7fc fbf2 	bl	8001e00 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 800561c:	89fb      	ldrh	r3, [r7, #14]
 800561e:	3301      	adds	r3, #1
 8005620:	81fb      	strh	r3, [r7, #14]
 8005622:	89fa      	ldrh	r2, [r7, #14]
 8005624:	887b      	ldrh	r3, [r7, #2]
 8005626:	429a      	cmp	r2, r3
 8005628:	d3e7      	bcc.n	80055fa <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005634:	f7fb fb28 	bl	8000c88 <__aeabi_ldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff feed 	bl	8005420 <hx711_unlock>
}
 8005646:	bf00      	nop
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005650 <hx711_weight>:
  hx711_unlock(hx711);
}
//#############################################################################################

float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8005650:	b5b0      	push	{r4, r5, r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fecc 	bl	80053fa <hx711_lock>
  int64_t  ave = 0;
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 800566e:	2300      	movs	r3, #0
 8005670:	82fb      	strh	r3, [r7, #22]
 8005672:	e013      	b.n	800569c <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ff3e 	bl	80054f6 <hx711_value>
 800567a:	4603      	mov	r3, r0
 800567c:	461a      	mov	r2, r3
 800567e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005682:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005686:	1884      	adds	r4, r0, r2
 8005688:	eb41 0503 	adc.w	r5, r1, r3
 800568c:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 8005690:	2005      	movs	r0, #5
 8005692:	f7fc fbb5 	bl	8001e00 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8005696:	8afb      	ldrh	r3, [r7, #22]
 8005698:	3301      	adds	r3, #1
 800569a:	82fb      	strh	r3, [r7, #22]
 800569c:	8afa      	ldrh	r2, [r7, #22]
 800569e:	887b      	ldrh	r3, [r7, #2]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d3e7      	bcc.n	8005674 <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 80056a4:	887a      	ldrh	r2, [r7, #2]
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80056ae:	f7fb faeb 	bl	8000c88 <__aeabi_ldivmod>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4613      	mov	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	ed93 7a04 	vldr	s14, [r3, #16]
 80056d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d4:	edc7 7a03 	vstr	s15, [r7, #12]
  answer = (answer - 2333.4)*(-1);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7fa ff55 	bl	8000588 <__aeabi_f2d>
 80056de:	a316      	add	r3, pc, #88	; (adr r3, 8005738 <hx711_weight+0xe8>)
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f7fa fdf0 	bl	80002c8 <__aeabi_dsub>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	f7fb fa7a 	bl	8000be8 <__aeabi_d2f>
 80056f4:	4603      	mov	r3, r0
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef1 7a67 	vneg.f32	s15, s15
 80056fe:	edc7 7a03 	vstr	s15, [r7, #12]
  answer = answer/3.29;
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7fa ff40 	bl	8000588 <__aeabi_f2d>
 8005708:	a30d      	add	r3, pc, #52	; (adr r3, 8005740 <hx711_weight+0xf0>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fb f8bd 	bl	800088c <__aeabi_ddiv>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	f7fb fa65 	bl	8000be8 <__aeabi_d2f>
 800571e:	4603      	mov	r3, r0
 8005720:	60fb      	str	r3, [r7, #12]
  hx711_unlock(hx711);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fe7c 	bl	8005420 <hx711_unlock>
  return answer;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	ee07 3a90 	vmov	s15, r3
}
 800572e:	eeb0 0a67 	vmov.f32	s0, s15
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bdb0      	pop	{r4, r5, r7, pc}
 8005738:	cccccccd 	.word	0xcccccccd
 800573c:	40a23acc 	.word	0x40a23acc
 8005740:	851eb852 	.word	0x851eb852
 8005744:	400a51eb 	.word	0x400a51eb

08005748 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	611a      	str	r2, [r3, #16]
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	f083 0301 	eor.w	r3, r3, #1
 8005778:	b2db      	uxtb	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	2140      	movs	r1, #64	; 0x40
 800577e:	4803      	ldr	r0, [pc, #12]	; (800578c <chipSelect+0x24>)
 8005780:	f7fd fa36 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40020400 	.word	0x40020400

08005790 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	461a      	mov	r2, r3
 800579e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057a2:	4803      	ldr	r0, [pc, #12]	; (80057b0 <registerSelect+0x20>)
 80057a4:	f7fd fa24 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40020000 	.word	0x40020000

080057b4 <displayReset>:

static void displayReset(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7ff ffd5 	bl	8005768 <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80057be:	2200      	movs	r2, #0
 80057c0:	2140      	movs	r1, #64	; 0x40
 80057c2:	4808      	ldr	r0, [pc, #32]	; (80057e4 <displayReset+0x30>)
 80057c4:	f7fd fa14 	bl	8002bf0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fc fb19 	bl	8001e00 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80057ce:	2201      	movs	r2, #1
 80057d0:	2140      	movs	r1, #64	; 0x40
 80057d2:	4804      	ldr	r0, [pc, #16]	; (80057e4 <displayReset+0x30>)
 80057d4:	f7fd fa0c 	bl	8002bf0 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 80057d8:	2001      	movs	r0, #1
 80057da:	f7ff ffc5 	bl	8005768 <chipSelect>
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40020000 	.word	0x40020000

080057e8 <sendInstruction>:

static void sendInstruction(instruction command)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 80057f2:	2000      	movs	r0, #0
 80057f4:	f7ff ffcc 	bl	8005790 <registerSelect>
    chipSelect(true);
 80057f8:	2001      	movs	r0, #1
 80057fa:	f7ff ffb5 	bl	8005768 <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 80057fe:	1df9      	adds	r1, r7, #7
 8005800:	2301      	movs	r3, #1
 8005802:	2201      	movs	r2, #1
 8005804:	4804      	ldr	r0, [pc, #16]	; (8005818 <sendInstruction+0x30>)
 8005806:	f7fd ffc2 	bl	800378e <HAL_SPI_Transmit>
    chipSelect(false);
 800580a:	2000      	movs	r0, #0
 800580c:	f7ff ffac 	bl	8005768 <chipSelect>
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000474 	.word	0x20000474

0800581c <sendData>:


/*static*/ void sendData(uint8_t data)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 8005826:	2001      	movs	r0, #1
 8005828:	f7ff ffb2 	bl	8005790 <registerSelect>
    chipSelect(true);
 800582c:	2001      	movs	r0, #1
 800582e:	f7ff ff9b 	bl	8005768 <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8005832:	1df9      	adds	r1, r7, #7
 8005834:	2301      	movs	r3, #1
 8005836:	2201      	movs	r2, #1
 8005838:	4804      	ldr	r0, [pc, #16]	; (800584c <sendData+0x30>)
 800583a:	f7fd ffa8 	bl	800378e <HAL_SPI_Transmit>
    chipSelect(false);
 800583e:	2000      	movs	r0, #0
 8005840:	f7ff ff92 	bl	8005768 <chipSelect>
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000474 	.word	0x20000474

08005850 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	2b3f      	cmp	r3, #63	; 0x3f
 800585e:	d806      	bhi.n	800586e <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8005860:	2081      	movs	r0, #129	; 0x81
 8005862:	f7ff ffc1 	bl	80057e8 <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff ffbd 	bl	80057e8 <sendInstruction>
    }
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <lcd_init>:

void lcd_init(void)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	af00      	add	r7, sp, #0
    lcd_clear();
 800587a:	f000 f857 	bl	800592c <lcd_clear>
    displayReset();
 800587e:	f7ff ff99 	bl	80057b4 <displayReset>

    sendInstruction(ADC_NORMAL);
 8005882:	20a0      	movs	r0, #160	; 0xa0
 8005884:	f7ff ffb0 	bl	80057e8 <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8005888:	20ae      	movs	r0, #174	; 0xae
 800588a:	f7ff ffad 	bl	80057e8 <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 800588e:	20c8      	movs	r0, #200	; 0xc8
 8005890:	f7ff ffaa 	bl	80057e8 <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8005894:	20a2      	movs	r0, #162	; 0xa2
 8005896:	f7ff ffa7 	bl	80057e8 <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 800589a:	202f      	movs	r0, #47	; 0x2f
 800589c:	f7ff ffa4 	bl	80057e8 <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 80058a0:	2021      	movs	r0, #33	; 0x21
 80058a2:	f7ff ffa1 	bl	80057e8 <sendInstruction>
    lcd_setContrast(40);
 80058a6:	2028      	movs	r0, #40	; 0x28
 80058a8:	f7ff ffd2 	bl	8005850 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 80058ac:	20af      	movs	r0, #175	; 0xaf
 80058ae:	f7ff ff9b 	bl	80057e8 <sendInstruction>
}
 80058b2:	bf00      	nop
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
 80058c2:	460b      	mov	r3, r1
 80058c4:	71bb      	strb	r3, [r7, #6]
 80058c6:	4613      	mov	r3, r2
 80058c8:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	db23      	blt.n	800591a <lcd_setPixel+0x62>
 80058d2:	79bb      	ldrb	r3, [r7, #6]
 80058d4:	2b1f      	cmp	r3, #31
 80058d6:	d820      	bhi.n	800591a <lcd_setPixel+0x62>
        if (pixelIsSet)
 80058d8:	797b      	ldrb	r3, [r7, #5]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00e      	beq.n	80058fc <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	4a11      	ldr	r2, [pc, #68]	; (8005928 <lcd_setPixel+0x70>)
 80058e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058e6:	79bb      	ldrb	r3, [r7, #6]
 80058e8:	2101      	movs	r1, #1
 80058ea:	fa01 f303 	lsl.w	r3, r1, r3
 80058ee:	4619      	mov	r1, r3
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	490c      	ldr	r1, [pc, #48]	; (8005928 <lcd_setPixel+0x70>)
 80058f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 80058fa:	e00e      	b.n	800591a <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <lcd_setPixel+0x70>)
 8005900:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005904:	79bb      	ldrb	r3, [r7, #6]
 8005906:	2101      	movs	r1, #1
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	43db      	mvns	r3, r3
 800590e:	4619      	mov	r1, r3
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	400a      	ands	r2, r1
 8005914:	4904      	ldr	r1, [pc, #16]	; (8005928 <lcd_setPixel+0x70>)
 8005916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	2000020c 	.word	0x2000020c

0800592c <lcd_clear>:

void lcd_clear(void)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8005932:	2300      	movs	r3, #0
 8005934:	71fb      	strb	r3, [r7, #7]
 8005936:	e007      	b.n	8005948 <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <lcd_clear+0x34>)
 800593c:	2100      	movs	r1, #0
 800593e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	3301      	adds	r3, #1
 8005946:	71fb      	strb	r3, [r7, #7]
 8005948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594c:	2b00      	cmp	r3, #0
 800594e:	daf3      	bge.n	8005938 <lcd_clear+0xc>
    }
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	2000020c 	.word	0x2000020c

08005964 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	4611      	mov	r1, r2
 8005970:	461a      	mov	r2, r3
 8005972:	4623      	mov	r3, r4
 8005974:	71fb      	strb	r3, [r7, #7]
 8005976:	4603      	mov	r3, r0
 8005978:	71bb      	strb	r3, [r7, #6]
 800597a:	460b      	mov	r3, r1
 800597c:	717b      	strb	r3, [r7, #5]
 800597e:	4613      	mov	r3, r2
 8005980:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8005982:	797b      	ldrb	r3, [r7, #5]
 8005984:	3b20      	subs	r3, #32
 8005986:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]
 800598c:	e049      	b.n	8005a22 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 800598e:	2300      	movs	r3, #0
 8005990:	73bb      	strb	r3, [r7, #14]
 8005992:	e03b      	b.n	8005a0c <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8005994:	797b      	ldrb	r3, [r7, #5]
 8005996:	793a      	ldrb	r2, [r7, #4]
 8005998:	4928      	ldr	r1, [pc, #160]	; (8005a3c <lcd_setChar+0xd8>)
 800599a:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 800599e:	fb02 f203 	mul.w	r2, r2, r3
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	4413      	add	r3, r2
 80059a6:	4a26      	ldr	r2, [pc, #152]	; (8005a40 <lcd_setChar+0xdc>)
 80059a8:	5cd3      	ldrb	r3, [r2, r3]
 80059aa:	461a      	mov	r2, r3
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	fa42 f303 	asr.w	r3, r2, r3
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d018      	beq.n	80059ec <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 80059ba:	79fa      	ldrb	r2, [r7, #7]
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	4413      	add	r3, r2
 80059c0:	b2d8      	uxtb	r0, r3
 80059c2:	79ba      	ldrb	r2, [r7, #6]
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	4413      	add	r3, r2
 80059c8:	b2d9      	uxtb	r1, r3
 80059ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f083 0301 	eor.w	r3, r3, #1
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	f7ff ff67 	bl	80058b8 <lcd_setPixel>
 80059ea:	e00c      	b.n	8005a06 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 80059ec:	79fa      	ldrb	r2, [r7, #7]
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	4413      	add	r3, r2
 80059f2:	b2d8      	uxtb	r0, r3
 80059f4:	79ba      	ldrb	r2, [r7, #6]
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	4413      	add	r3, r2
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005a00:	4619      	mov	r1, r3
 8005a02:	f7ff ff59 	bl	80058b8 <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	73bb      	strb	r3, [r7, #14]
 8005a0c:	793b      	ldrb	r3, [r7, #4]
 8005a0e:	4a0b      	ldr	r2, [pc, #44]	; (8005a3c <lcd_setChar+0xd8>)
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	7bba      	ldrb	r2, [r7, #14]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d3bb      	bcc.n	8005994 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
 8005a22:	793b      	ldrb	r3, [r7, #4]
 8005a24:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <lcd_setChar+0xd8>)
 8005a26:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d3ae      	bcc.n	800598e <lcd_setChar+0x2a>
        }
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	0800993c 	.word	0x0800993c
 8005a40:	080095bc 	.word	0x080095bc

08005a44 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	603a      	str	r2, [r7, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	71fb      	strb	r3, [r7, #7]
 8005a52:	460b      	mov	r3, r1
 8005a54:	71bb      	strb	r3, [r7, #6]
 8005a56:	4613      	mov	r3, r2
 8005a58:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 8005a5a:	797b      	ldrb	r3, [r7, #5]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11c      	bne.n	8005a9a <lcd_setString+0x56>
 8005a60:	797b      	ldrb	r3, [r7, #5]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d819      	bhi.n	8005a9a <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 8005a66:	e014      	b.n	8005a92 <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781a      	ldrb	r2, [r3, #0]
 8005a6c:	797c      	ldrb	r4, [r7, #5]
 8005a6e:	79b9      	ldrb	r1, [r7, #6]
 8005a70:	79f8      	ldrb	r0, [r7, #7]
 8005a72:	7e3b      	ldrb	r3, [r7, #24]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	4623      	mov	r3, r4
 8005a78:	f7ff ff74 	bl	8005964 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8005a7c:	797b      	ldrb	r3, [r7, #5]
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <lcd_setString+0x60>)
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	4413      	add	r3, r2
 8005a84:	785a      	ldrb	r2, [r3, #1]
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	4413      	add	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e6      	bne.n	8005a68 <lcd_setString+0x24>
        }
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd90      	pop	{r4, r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	0800993c 	.word	0x0800993c

08005aa8 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b08b      	sub	sp, #44	; 0x2c
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	81fb      	strh	r3, [r7, #14]
 8005aba:	4603      	mov	r3, r0
 8005abc:	81bb      	strh	r3, [r7, #12]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	817b      	strh	r3, [r7, #10]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 8005ac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ad2:	edc7 7a08 	vstr	s15, [r7, #32]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 8005ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
 8005aea:	2300      	movs	r3, #0
 8005aec:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 8005aee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bfb8      	it	lt
 8005afc:	425b      	neglt	r3, r3
 8005afe:	b21b      	sxth	r3, r3
 8005b00:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 8005b02:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005b06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	bfb8      	it	lt
 8005b10:	425b      	neglt	r3, r3
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 8005b16:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <lcd_setLine+0x8c>
 8005b1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005b2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b30:	b21b      	sxth	r3, r3
 8005b32:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8005b34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <lcd_setLine+0xaa>
 8005b3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005b40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b4e:	b21b      	sxth	r3, r3
 8005b50:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 8005b52:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005b56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	db5f      	blt.n	8005c1e <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 8005b5e:	2300      	movs	r3, #0
 8005b60:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b62:	e055      	b.n	8005c10 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8005b64:	edd7 7a08 	vldr	s15, [r7, #32]
 8005b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b70:	db20      	blt.n	8005bb4 <lcd_setLine+0x10c>
 8005b72:	edd7 7a07 	vldr	s15, [r7, #28]
 8005b76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7e:	db19      	blt.n	8005bb4 <lcd_setLine+0x10c>
 8005b80:	edd7 7a08 	vldr	s15, [r7, #32]
 8005b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b88:	edc7 7a01 	vstr	s15, [r7, #4]
 8005b8c:	793b      	ldrb	r3, [r7, #4]
 8005b8e:	b2d8      	uxtb	r0, r3
 8005b90:	edd7 7a07 	vldr	s15, [r7, #28]
 8005b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b98:	edc7 7a01 	vstr	s15, [r7, #4]
 8005b9c:	793b      	ldrb	r3, [r7, #4]
 8005b9e:	b2d9      	uxtb	r1, r3
 8005ba0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f7ff fe82 	bl	80058b8 <lcd_setPixel>
			xF += x[1];
 8005bb4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc0:	ed97 7a08 	vldr	s14, [r7, #32]
 8005bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc8:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8005bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005bd0:	ee07 3a90 	vmov	s15, r3
 8005bd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005bd8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c00:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 8005c04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005c14:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	dba3      	blt.n	8005b64 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 8005c1c:	e05e      	b.n	8005cdc <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 8005c1e:	2300      	movs	r3, #0
 8005c20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c22:	e055      	b.n	8005cd0 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8005c24:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	db20      	blt.n	8005c74 <lcd_setLine+0x1cc>
 8005c32:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3e:	db19      	blt.n	8005c74 <lcd_setLine+0x1cc>
 8005c40:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c48:	edc7 7a01 	vstr	s15, [r7, #4]
 8005c4c:	793b      	ldrb	r3, [r7, #4]
 8005c4e:	b2d8      	uxtb	r0, r3
 8005c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c58:	edc7 7a01 	vstr	s15, [r7, #4]
 8005c5c:	793b      	ldrb	r3, [r7, #4]
 8005c5e:	b2d9      	uxtb	r1, r3
 8005c60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7ff fe22 	bl	80058b8 <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8005c74:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca0:	ed97 7a08 	vldr	s14, [r7, #32]
 8005ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ca8:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8005cac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cc0:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8005cc4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3301      	adds	r3, #1
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005cd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cd4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	dba3      	blt.n	8005c24 <lcd_setLine+0x17c>
}
 8005cdc:	bf00      	nop
 8005cde:	372c      	adds	r7, #44	; 0x2c
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd90      	pop	{r4, r7, pc}

08005ce4 <lcd_show>:

void lcd_show(void){
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8005cea:	2300      	movs	r3, #0
 8005cec:	71fb      	strb	r3, [r7, #7]
 8005cee:	e022      	b.n	8005d36 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	3b50      	subs	r3, #80	; 0x50
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fd76 	bl	80057e8 <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 8005cfc:	2010      	movs	r0, #16
 8005cfe:	f7ff fd73 	bl	80057e8 <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 8005d02:	2000      	movs	r0, #0
 8005d04:	f7ff fd70 	bl	80057e8 <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	71bb      	strb	r3, [r7, #6]
 8005d0c:	e00c      	b.n	8005d28 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 8005d0e:	79ba      	ldrb	r2, [r7, #6]
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	490d      	ldr	r1, [pc, #52]	; (8005d48 <lcd_show+0x64>)
 8005d14:	0092      	lsls	r2, r2, #2
 8005d16:	440a      	add	r2, r1
 8005d18:	4413      	add	r3, r2
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fd7d 	bl	800581c <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8005d22:	79bb      	ldrb	r3, [r7, #6]
 8005d24:	3301      	adds	r3, #1
 8005d26:	71bb      	strb	r3, [r7, #6]
 8005d28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	daee      	bge.n	8005d0e <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	3301      	adds	r3, #1
 8005d34:	71fb      	strb	r3, [r7, #7]
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d9d9      	bls.n	8005cf0 <lcd_show+0xc>
    }
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	2000020c 	.word	0x2000020c

08005d4c <lcd_setBar>:
        lcd_setPixel(columnCounter, yPositionUL, true);
    }
}

void lcd_setBar(uint8_t xPositionUL, uint8_t yPositionUL, uint8_t xPositionDR, uint8_t yPositionDR)
{
 8005d4c:	b590      	push	{r4, r7, lr}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	71fb      	strb	r3, [r7, #7]
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71bb      	strb	r3, [r7, #6]
 8005d62:	460b      	mov	r3, r1
 8005d64:	717b      	strb	r3, [r7, #5]
 8005d66:	4613      	mov	r3, r2
 8005d68:	713b      	strb	r3, [r7, #4]
    for (uint8_t rowCounter = yPositionUL; rowCounter <= yPositionDR; rowCounter++)
 8005d6a:	79bb      	ldrb	r3, [r7, #6]
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e012      	b.n	8005d96 <lcd_setBar+0x4a>
        for (uint8_t columnCounter = xPositionUL; columnCounter <= xPositionDR; columnCounter++)
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	73bb      	strb	r3, [r7, #14]
 8005d74:	e008      	b.n	8005d88 <lcd_setBar+0x3c>
            lcd_setPixel(columnCounter, rowCounter, true);
 8005d76:	7bf9      	ldrb	r1, [r7, #15]
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fd9b 	bl	80058b8 <lcd_setPixel>
        for (uint8_t columnCounter = xPositionUL; columnCounter <= xPositionDR; columnCounter++)
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	3301      	adds	r3, #1
 8005d86:	73bb      	strb	r3, [r7, #14]
 8005d88:	7bba      	ldrb	r2, [r7, #14]
 8005d8a:	797b      	ldrb	r3, [r7, #5]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d9f2      	bls.n	8005d76 <lcd_setBar+0x2a>
    for (uint8_t rowCounter = yPositionUL; rowCounter <= yPositionDR; rowCounter++)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	3301      	adds	r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
 8005d96:	7bfa      	ldrb	r2, [r7, #15]
 8005d98:	793b      	ldrb	r3, [r7, #4]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d9e8      	bls.n	8005d70 <lcd_setBar+0x24>

}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd90      	pop	{r4, r7, pc}

08005da8 <welcome_display>:

char msgBuf1[30];
char glass[30];
char size;

void welcome_display(void){
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af02      	add	r7, sp, #8
	lcd_clear();
 8005dae:	f7ff fdbd 	bl	800592c <lcd_clear>
	lcd_setString(4, 4, "WELCOME!", LCD_FONT_8, false);
 8005db2:	2300      	movs	r3, #0
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	2300      	movs	r3, #0
 8005db8:	4a06      	ldr	r2, [pc, #24]	; (8005dd4 <welcome_display+0x2c>)
 8005dba:	2104      	movs	r1, #4
 8005dbc:	2004      	movs	r0, #4
 8005dbe:	f7ff fe41 	bl	8005a44 <lcd_setString>
	lcd_show();
 8005dc2:	f7ff ff8f 	bl	8005ce4 <lcd_show>
	HAL_Delay(3000);
 8005dc6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005dca:	f7fc f819 	bl	8001e00 <HAL_Delay>
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	080092f0 	.word	0x080092f0

08005dd8 <menu1_display>:

void menu1_display(void){
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af02      	add	r7, sp, #8
	lcd_clear();
 8005dde:	f7ff fda5 	bl	800592c <lcd_clear>
	lcd_setString(4, 4, "To continue", LCD_FONT_8, false);
 8005de2:	2300      	movs	r3, #0
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2300      	movs	r3, #0
 8005de8:	4a08      	ldr	r2, [pc, #32]	; (8005e0c <menu1_display+0x34>)
 8005dea:	2104      	movs	r1, #4
 8005dec:	2004      	movs	r0, #4
 8005dee:	f7ff fe29 	bl	8005a44 <lcd_setString>
	lcd_setString(4, 16, "press joystick!", LCD_FONT_8, false);
 8005df2:	2300      	movs	r3, #0
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	2300      	movs	r3, #0
 8005df8:	4a05      	ldr	r2, [pc, #20]	; (8005e10 <menu1_display+0x38>)
 8005dfa:	2110      	movs	r1, #16
 8005dfc:	2004      	movs	r0, #4
 8005dfe:	f7ff fe21 	bl	8005a44 <lcd_setString>
	lcd_show();
 8005e02:	f7ff ff6f 	bl	8005ce4 <lcd_show>
}
 8005e06:	bf00      	nop
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	080092fc 	.word	0x080092fc
 8005e10:	08009308 	.word	0x08009308

08005e14 <menu2_display>:

void menu2_display(void){
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af02      	add	r7, sp, #8
	lcd_clear();
 8005e1a:	f7ff fd87 	bl	800592c <lcd_clear>
	lcd_setString(4, 4, "Place the glass", LCD_FONT_8, false);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	2300      	movs	r3, #0
 8005e24:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <menu2_display+0x34>)
 8005e26:	2104      	movs	r1, #4
 8005e28:	2004      	movs	r0, #4
 8005e2a:	f7ff fe0b 	bl	8005a44 <lcd_setString>
	lcd_setString(4, 16, "on the scale", LCD_FONT_8, false);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2300      	movs	r3, #0
 8005e34:	4a05      	ldr	r2, [pc, #20]	; (8005e4c <menu2_display+0x38>)
 8005e36:	2110      	movs	r1, #16
 8005e38:	2004      	movs	r0, #4
 8005e3a:	f7ff fe03 	bl	8005a44 <lcd_setString>
	lcd_show();
 8005e3e:	f7ff ff51 	bl	8005ce4 <lcd_show>
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	08009318 	.word	0x08009318
 8005e4c:	08009328 	.word	0x08009328

08005e50 <menu3_display>:

// which glass has been chosen
char menu3_display(int weight){
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
	if (weight > 190){
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2bbe      	cmp	r3, #190	; 0xbe
 8005e5c:	dd07      	ble.n	8005e6e <menu3_display+0x1e>
		sprintf(glass, "Big glass chosen");
 8005e5e:	4910      	ldr	r1, [pc, #64]	; (8005ea0 <menu3_display+0x50>)
 8005e60:	4810      	ldr	r0, [pc, #64]	; (8005ea4 <menu3_display+0x54>)
 8005e62:	f001 f8ab 	bl	8006fbc <siprintf>
		size = 1;
 8005e66:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <menu3_display+0x58>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	e006      	b.n	8005e7c <menu3_display+0x2c>
	}
	else{
		sprintf(glass, "Small glass chosen");
 8005e6e:	490f      	ldr	r1, [pc, #60]	; (8005eac <menu3_display+0x5c>)
 8005e70:	480c      	ldr	r0, [pc, #48]	; (8005ea4 <menu3_display+0x54>)
 8005e72:	f001 f8a3 	bl	8006fbc <siprintf>
		size = 0;
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <menu3_display+0x58>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
	}
	lcd_clear();
 8005e7c:	f7ff fd56 	bl	800592c <lcd_clear>
	lcd_setString(4, 4, glass, LCD_FONT_8, false);
 8005e80:	2300      	movs	r3, #0
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	2300      	movs	r3, #0
 8005e86:	4a07      	ldr	r2, [pc, #28]	; (8005ea4 <menu3_display+0x54>)
 8005e88:	2104      	movs	r1, #4
 8005e8a:	2004      	movs	r0, #4
 8005e8c:	f7ff fdda 	bl	8005a44 <lcd_setString>
	lcd_show();
 8005e90:	f7ff ff28 	bl	8005ce4 <lcd_show>
	return size;
 8005e94:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <menu3_display+0x58>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	08009338 	.word	0x08009338
 8005ea4:	200005a0 	.word	0x200005a0
 8005ea8:	20000468 	.word	0x20000468
 8005eac:	0800934c 	.word	0x0800934c

08005eb0 <menu4_display>:


void menu4_display(int value){
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	6078      	str	r0, [r7, #4]
	lcd_clear();
 8005eb8:	f7ff fd38 	bl	800592c <lcd_clear>
	sprintf(msgBuf1,"%d%% sirup chosen", value); 			// fill message buffer
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4909      	ldr	r1, [pc, #36]	; (8005ee4 <menu4_display+0x34>)
 8005ec0:	4809      	ldr	r0, [pc, #36]	; (8005ee8 <menu4_display+0x38>)
 8005ec2:	f001 f87b 	bl	8006fbc <siprintf>
	lcd_setString(4, 1, msgBuf1, LCD_FONT_8, false); 		// LCD message
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	4a06      	ldr	r2, [pc, #24]	; (8005ee8 <menu4_display+0x38>)
 8005ece:	2101      	movs	r1, #1
 8005ed0:	2004      	movs	r0, #4
 8005ed2:	f7ff fdb7 	bl	8005a44 <lcd_setString>
	lcd_show();
 8005ed6:	f7ff ff05 	bl	8005ce4 <lcd_show>
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	08009360 	.word	0x08009360
 8005ee8:	200005c0 	.word	0x200005c0

08005eec <menu5_display>:

void menu5_display(void){
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af02      	add	r7, sp, #8
	lcd_clear();
 8005ef2:	f7ff fd1b 	bl	800592c <lcd_clear>
	lcd_setString(4, 4, "Cheers!", LCD_FONT_8, false);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2300      	movs	r3, #0
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <menu5_display+0x24>)
 8005efe:	2104      	movs	r1, #4
 8005f00:	2004      	movs	r0, #4
 8005f02:	f7ff fd9f 	bl	8005a44 <lcd_setString>
	lcd_show();
 8005f06:	f7ff feed 	bl	8005ce4 <lcd_show>
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	08009374 	.word	0x08009374

08005f14 <potiInit>:
#include "math.h"
#include "lcd_driver.h"

char msgBuf1[30]; 	// Prepare buffer for message

HAL_StatusTypeDef potiInit(void){
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
	return HAL_ADC_Start(&hadc1);
 8005f18:	4802      	ldr	r0, [pc, #8]	; (8005f24 <potiInit+0x10>)
 8005f1a:	f7fb ffd9 	bl	8001ed0 <HAL_ADC_Start>
 8005f1e:	4603      	mov	r3, r0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20000414 	.word	0x20000414

08005f28 <potiRead>:


HAL_StatusTypeDef potiRead(uint16_t* value){
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	if(potiInit() == HAL_OK){
 8005f30:	f7ff fff0 	bl	8005f14 <potiInit>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d108      	bne.n	8005f4c <potiRead+0x24>
		*value = HAL_ADC_GetValue(&hadc1);
 8005f3a:	4807      	ldr	r0, [pc, #28]	; (8005f58 <potiRead+0x30>)
 8005f3c:	f7fc f8cd 	bl	80020da <HAL_ADC_GetValue>
 8005f40:	4603      	mov	r3, r0
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	801a      	strh	r2, [r3, #0]
		return HAL_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e000      	b.n	8005f4e <potiRead+0x26>
	}
	else
		return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000414 	.word	0x20000414

08005f5c <potiPrint>:

char msgBuf1[30]; 	// Prepare buffer for message
int new_value;

int potiPrint(uint16_t* value){
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
	lcd_clear();
 8005f64:	f7ff fce2 	bl	800592c <lcd_clear>
	lcd_setLine(12, 15, 12, 25, 1);
 8005f68:	2301      	movs	r3, #1
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2319      	movs	r3, #25
 8005f6e:	220c      	movs	r2, #12
 8005f70:	210f      	movs	r1, #15
 8005f72:	200c      	movs	r0, #12
 8005f74:	f7ff fd98 	bl	8005aa8 <lcd_setLine>
	lcd_setLine(12, 15, 115, 15, 1);
 8005f78:	2301      	movs	r3, #1
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	230f      	movs	r3, #15
 8005f7e:	2273      	movs	r2, #115	; 0x73
 8005f80:	210f      	movs	r1, #15
 8005f82:	200c      	movs	r0, #12
 8005f84:	f7ff fd90 	bl	8005aa8 <lcd_setLine>
	lcd_setLine(12, 25, 116, 25, 1);
 8005f88:	2301      	movs	r3, #1
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2319      	movs	r3, #25
 8005f8e:	2274      	movs	r2, #116	; 0x74
 8005f90:	2119      	movs	r1, #25
 8005f92:	200c      	movs	r0, #12
 8005f94:	f7ff fd88 	bl	8005aa8 <lcd_setLine>
	lcd_setLine(115, 15, 115, 25, 1);
 8005f98:	2301      	movs	r3, #1
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	2319      	movs	r3, #25
 8005f9e:	2273      	movs	r2, #115	; 0x73
 8005fa0:	210f      	movs	r1, #15
 8005fa2:	2073      	movs	r0, #115	; 0x73
 8005fa4:	f7ff fd80 	bl	8005aa8 <lcd_setLine>
	new_value = (int)*value/200;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	4abf      	ldr	r2, [pc, #764]	; (80062ac <potiPrint+0x350>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	099b      	lsrs	r3, r3, #6
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4bbd      	ldr	r3, [pc, #756]	; (80062b0 <potiPrint+0x354>)
 8005fba:	601a      	str	r2, [r3, #0]
	switch(new_value){
 8005fbc:	4bbc      	ldr	r3, [pc, #752]	; (80062b0 <potiPrint+0x354>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b14      	cmp	r3, #20
 8005fc2:	f200 8168 	bhi.w	8006296 <potiPrint+0x33a>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <potiPrint+0x70>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08006021 	.word	0x08006021
 8005fd0:	0800603f 	.word	0x0800603f
 8005fd4:	0800605d 	.word	0x0800605d
 8005fd8:	0800607b 	.word	0x0800607b
 8005fdc:	08006099 	.word	0x08006099
 8005fe0:	080060b7 	.word	0x080060b7
 8005fe4:	080060d5 	.word	0x080060d5
 8005fe8:	080060f3 	.word	0x080060f3
 8005fec:	08006111 	.word	0x08006111
 8005ff0:	0800612f 	.word	0x0800612f
 8005ff4:	0800614d 	.word	0x0800614d
 8005ff8:	0800616b 	.word	0x0800616b
 8005ffc:	08006189 	.word	0x08006189
 8006000:	080061a7 	.word	0x080061a7
 8006004:	080061c5 	.word	0x080061c5
 8006008:	080061e3 	.word	0x080061e3
 800600c:	08006201 	.word	0x08006201
 8006010:	0800621f 	.word	0x0800621f
 8006014:	0800623d 	.word	0x0800623d
 8006018:	0800625b 	.word	0x0800625b
 800601c:	08006279 	.word	0x08006279
	case 0:
		lcd_setString(4, 4, "Sirup percentage: 5%", LCD_FONT_8, false);
 8006020:	2300      	movs	r3, #0
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	2300      	movs	r3, #0
 8006026:	4aa3      	ldr	r2, [pc, #652]	; (80062b4 <potiPrint+0x358>)
 8006028:	2104      	movs	r1, #4
 800602a:	2004      	movs	r0, #4
 800602c:	f7ff fd0a 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 18, 24);
 8006030:	2318      	movs	r3, #24
 8006032:	2212      	movs	r2, #18
 8006034:	2110      	movs	r1, #16
 8006036:	200d      	movs	r0, #13
 8006038:	f7ff fe88 	bl	8005d4c <lcd_setBar>
		break;
 800603c:	e12c      	b.n	8006298 <potiPrint+0x33c>
	case 1:
		lcd_setString(4, 4, "Sirup percentage: 6%", LCD_FONT_8, false);
 800603e:	2300      	movs	r3, #0
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2300      	movs	r3, #0
 8006044:	4a9c      	ldr	r2, [pc, #624]	; (80062b8 <potiPrint+0x35c>)
 8006046:	2104      	movs	r1, #4
 8006048:	2004      	movs	r0, #4
 800604a:	f7ff fcfb 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 19, 24);
 800604e:	2318      	movs	r3, #24
 8006050:	2213      	movs	r2, #19
 8006052:	2110      	movs	r1, #16
 8006054:	200d      	movs	r0, #13
 8006056:	f7ff fe79 	bl	8005d4c <lcd_setBar>
		break;
 800605a:	e11d      	b.n	8006298 <potiPrint+0x33c>
	case 2:
		lcd_setString(4, 4, "Sirup percentage: 7%", LCD_FONT_8, false);
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	4a96      	ldr	r2, [pc, #600]	; (80062bc <potiPrint+0x360>)
 8006064:	2104      	movs	r1, #4
 8006066:	2004      	movs	r0, #4
 8006068:	f7ff fcec 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 20, 24);
 800606c:	2318      	movs	r3, #24
 800606e:	2214      	movs	r2, #20
 8006070:	2110      	movs	r1, #16
 8006072:	200d      	movs	r0, #13
 8006074:	f7ff fe6a 	bl	8005d4c <lcd_setBar>
		break;
 8006078:	e10e      	b.n	8006298 <potiPrint+0x33c>
	case 3:
		lcd_setString(4, 4, "Sirup percentage: 8%", LCD_FONT_8, false);
 800607a:	2300      	movs	r3, #0
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	2300      	movs	r3, #0
 8006080:	4a8f      	ldr	r2, [pc, #572]	; (80062c0 <potiPrint+0x364>)
 8006082:	2104      	movs	r1, #4
 8006084:	2004      	movs	r0, #4
 8006086:	f7ff fcdd 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 21, 24);
 800608a:	2318      	movs	r3, #24
 800608c:	2215      	movs	r2, #21
 800608e:	2110      	movs	r1, #16
 8006090:	200d      	movs	r0, #13
 8006092:	f7ff fe5b 	bl	8005d4c <lcd_setBar>
		break;
 8006096:	e0ff      	b.n	8006298 <potiPrint+0x33c>
	case 4:
		lcd_setString(4, 4, "Sirup percentage: 9%", LCD_FONT_8, false);
 8006098:	2300      	movs	r3, #0
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	4a89      	ldr	r2, [pc, #548]	; (80062c4 <potiPrint+0x368>)
 80060a0:	2104      	movs	r1, #4
 80060a2:	2004      	movs	r0, #4
 80060a4:	f7ff fcce 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 22, 24);
 80060a8:	2318      	movs	r3, #24
 80060aa:	2216      	movs	r2, #22
 80060ac:	2110      	movs	r1, #16
 80060ae:	200d      	movs	r0, #13
 80060b0:	f7ff fe4c 	bl	8005d4c <lcd_setBar>
		break;
 80060b4:	e0f0      	b.n	8006298 <potiPrint+0x33c>
	case 5:
		lcd_setString(4, 4, "Sirup percentage: 10%", LCD_FONT_8, false);
 80060b6:	2300      	movs	r3, #0
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	2300      	movs	r3, #0
 80060bc:	4a82      	ldr	r2, [pc, #520]	; (80062c8 <potiPrint+0x36c>)
 80060be:	2104      	movs	r1, #4
 80060c0:	2004      	movs	r0, #4
 80060c2:	f7ff fcbf 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 23, 24);
 80060c6:	2318      	movs	r3, #24
 80060c8:	2217      	movs	r2, #23
 80060ca:	2110      	movs	r1, #16
 80060cc:	200d      	movs	r0, #13
 80060ce:	f7ff fe3d 	bl	8005d4c <lcd_setBar>
		break;
 80060d2:	e0e1      	b.n	8006298 <potiPrint+0x33c>
	case 6:
		lcd_setString(4, 4, "Sirup percentage: 11%", LCD_FONT_8, false);
 80060d4:	2300      	movs	r3, #0
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	4a7c      	ldr	r2, [pc, #496]	; (80062cc <potiPrint+0x370>)
 80060dc:	2104      	movs	r1, #4
 80060de:	2004      	movs	r0, #4
 80060e0:	f7ff fcb0 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 24, 24);
 80060e4:	2318      	movs	r3, #24
 80060e6:	2218      	movs	r2, #24
 80060e8:	2110      	movs	r1, #16
 80060ea:	200d      	movs	r0, #13
 80060ec:	f7ff fe2e 	bl	8005d4c <lcd_setBar>
		break;
 80060f0:	e0d2      	b.n	8006298 <potiPrint+0x33c>
	case 7:
		lcd_setString(4, 4, "Sirup percentage: 12%", LCD_FONT_8, false);
 80060f2:	2300      	movs	r3, #0
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	2300      	movs	r3, #0
 80060f8:	4a75      	ldr	r2, [pc, #468]	; (80062d0 <potiPrint+0x374>)
 80060fa:	2104      	movs	r1, #4
 80060fc:	2004      	movs	r0, #4
 80060fe:	f7ff fca1 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 25, 24);
 8006102:	2318      	movs	r3, #24
 8006104:	2219      	movs	r2, #25
 8006106:	2110      	movs	r1, #16
 8006108:	200d      	movs	r0, #13
 800610a:	f7ff fe1f 	bl	8005d4c <lcd_setBar>
		break;
 800610e:	e0c3      	b.n	8006298 <potiPrint+0x33c>
	case 8:
		lcd_setString(4, 4, "Sirup percentage: 13%", LCD_FONT_8, false);
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	4a6f      	ldr	r2, [pc, #444]	; (80062d4 <potiPrint+0x378>)
 8006118:	2104      	movs	r1, #4
 800611a:	2004      	movs	r0, #4
 800611c:	f7ff fc92 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 26, 24);
 8006120:	2318      	movs	r3, #24
 8006122:	221a      	movs	r2, #26
 8006124:	2110      	movs	r1, #16
 8006126:	200d      	movs	r0, #13
 8006128:	f7ff fe10 	bl	8005d4c <lcd_setBar>
		break;
 800612c:	e0b4      	b.n	8006298 <potiPrint+0x33c>
	case 9:
		lcd_setString(4, 4, "Sirup percentage: 14%", LCD_FONT_8, false);
 800612e:	2300      	movs	r3, #0
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	2300      	movs	r3, #0
 8006134:	4a68      	ldr	r2, [pc, #416]	; (80062d8 <potiPrint+0x37c>)
 8006136:	2104      	movs	r1, #4
 8006138:	2004      	movs	r0, #4
 800613a:	f7ff fc83 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 27, 24);
 800613e:	2318      	movs	r3, #24
 8006140:	221b      	movs	r2, #27
 8006142:	2110      	movs	r1, #16
 8006144:	200d      	movs	r0, #13
 8006146:	f7ff fe01 	bl	8005d4c <lcd_setBar>
		break;
 800614a:	e0a5      	b.n	8006298 <potiPrint+0x33c>
	case 10:
		lcd_setString(4, 4, "Sirup percentage: 15%", LCD_FONT_8, false);
 800614c:	2300      	movs	r3, #0
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2300      	movs	r3, #0
 8006152:	4a62      	ldr	r2, [pc, #392]	; (80062dc <potiPrint+0x380>)
 8006154:	2104      	movs	r1, #4
 8006156:	2004      	movs	r0, #4
 8006158:	f7ff fc74 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 28, 24);
 800615c:	2318      	movs	r3, #24
 800615e:	221c      	movs	r2, #28
 8006160:	2110      	movs	r1, #16
 8006162:	200d      	movs	r0, #13
 8006164:	f7ff fdf2 	bl	8005d4c <lcd_setBar>
		break;
 8006168:	e096      	b.n	8006298 <potiPrint+0x33c>
	case 11:
		lcd_setString(4, 4, "Sirup percentage: 16%", LCD_FONT_8, false);
 800616a:	2300      	movs	r3, #0
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2300      	movs	r3, #0
 8006170:	4a5b      	ldr	r2, [pc, #364]	; (80062e0 <potiPrint+0x384>)
 8006172:	2104      	movs	r1, #4
 8006174:	2004      	movs	r0, #4
 8006176:	f7ff fc65 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 29, 24);
 800617a:	2318      	movs	r3, #24
 800617c:	221d      	movs	r2, #29
 800617e:	2110      	movs	r1, #16
 8006180:	200d      	movs	r0, #13
 8006182:	f7ff fde3 	bl	8005d4c <lcd_setBar>
		break;
 8006186:	e087      	b.n	8006298 <potiPrint+0x33c>
	case 12:
		lcd_setString(4, 4, "Sirup percentage: 17%", LCD_FONT_8, false);
 8006188:	2300      	movs	r3, #0
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	4a55      	ldr	r2, [pc, #340]	; (80062e4 <potiPrint+0x388>)
 8006190:	2104      	movs	r1, #4
 8006192:	2004      	movs	r0, #4
 8006194:	f7ff fc56 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 30, 24);
 8006198:	2318      	movs	r3, #24
 800619a:	221e      	movs	r2, #30
 800619c:	2110      	movs	r1, #16
 800619e:	200d      	movs	r0, #13
 80061a0:	f7ff fdd4 	bl	8005d4c <lcd_setBar>
		break;
 80061a4:	e078      	b.n	8006298 <potiPrint+0x33c>
	case 13:
		lcd_setString(4, 4, "Sirup percentage: 18%", LCD_FONT_8, false);
 80061a6:	2300      	movs	r3, #0
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	2300      	movs	r3, #0
 80061ac:	4a4e      	ldr	r2, [pc, #312]	; (80062e8 <potiPrint+0x38c>)
 80061ae:	2104      	movs	r1, #4
 80061b0:	2004      	movs	r0, #4
 80061b2:	f7ff fc47 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 31, 24);
 80061b6:	2318      	movs	r3, #24
 80061b8:	221f      	movs	r2, #31
 80061ba:	2110      	movs	r1, #16
 80061bc:	200d      	movs	r0, #13
 80061be:	f7ff fdc5 	bl	8005d4c <lcd_setBar>
		break;
 80061c2:	e069      	b.n	8006298 <potiPrint+0x33c>
	case 14:
		lcd_setString(4, 4, "Sirup percentage: 19%", LCD_FONT_8, false);
 80061c4:	2300      	movs	r3, #0
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	2300      	movs	r3, #0
 80061ca:	4a48      	ldr	r2, [pc, #288]	; (80062ec <potiPrint+0x390>)
 80061cc:	2104      	movs	r1, #4
 80061ce:	2004      	movs	r0, #4
 80061d0:	f7ff fc38 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 32, 24);
 80061d4:	2318      	movs	r3, #24
 80061d6:	2220      	movs	r2, #32
 80061d8:	2110      	movs	r1, #16
 80061da:	200d      	movs	r0, #13
 80061dc:	f7ff fdb6 	bl	8005d4c <lcd_setBar>
		break;
 80061e0:	e05a      	b.n	8006298 <potiPrint+0x33c>
	case 15:
		lcd_setString(4, 4, "Sirup percentage: 20%", LCD_FONT_8, false);
 80061e2:	2300      	movs	r3, #0
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	2300      	movs	r3, #0
 80061e8:	4a41      	ldr	r2, [pc, #260]	; (80062f0 <potiPrint+0x394>)
 80061ea:	2104      	movs	r1, #4
 80061ec:	2004      	movs	r0, #4
 80061ee:	f7ff fc29 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 33, 24);
 80061f2:	2318      	movs	r3, #24
 80061f4:	2221      	movs	r2, #33	; 0x21
 80061f6:	2110      	movs	r1, #16
 80061f8:	200d      	movs	r0, #13
 80061fa:	f7ff fda7 	bl	8005d4c <lcd_setBar>
		break;
 80061fe:	e04b      	b.n	8006298 <potiPrint+0x33c>
	case 16:
		lcd_setString(4, 4, "Sirup percentage: 21%", LCD_FONT_8, false);
 8006200:	2300      	movs	r3, #0
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	4a3b      	ldr	r2, [pc, #236]	; (80062f4 <potiPrint+0x398>)
 8006208:	2104      	movs	r1, #4
 800620a:	2004      	movs	r0, #4
 800620c:	f7ff fc1a 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 34, 24);
 8006210:	2318      	movs	r3, #24
 8006212:	2222      	movs	r2, #34	; 0x22
 8006214:	2110      	movs	r1, #16
 8006216:	200d      	movs	r0, #13
 8006218:	f7ff fd98 	bl	8005d4c <lcd_setBar>
		break;
 800621c:	e03c      	b.n	8006298 <potiPrint+0x33c>
	case 17:
		lcd_setString(4, 4, "Sirup percentage: 22%", LCD_FONT_8, false);
 800621e:	2300      	movs	r3, #0
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	4a34      	ldr	r2, [pc, #208]	; (80062f8 <potiPrint+0x39c>)
 8006226:	2104      	movs	r1, #4
 8006228:	2004      	movs	r0, #4
 800622a:	f7ff fc0b 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 35, 24);
 800622e:	2318      	movs	r3, #24
 8006230:	2223      	movs	r2, #35	; 0x23
 8006232:	2110      	movs	r1, #16
 8006234:	200d      	movs	r0, #13
 8006236:	f7ff fd89 	bl	8005d4c <lcd_setBar>
		break;
 800623a:	e02d      	b.n	8006298 <potiPrint+0x33c>
	case 18:
		lcd_setString(4, 4, "Sirup percentage: 23%", LCD_FONT_8, false);
 800623c:	2300      	movs	r3, #0
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2300      	movs	r3, #0
 8006242:	4a2e      	ldr	r2, [pc, #184]	; (80062fc <potiPrint+0x3a0>)
 8006244:	2104      	movs	r1, #4
 8006246:	2004      	movs	r0, #4
 8006248:	f7ff fbfc 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 36, 24);
 800624c:	2318      	movs	r3, #24
 800624e:	2224      	movs	r2, #36	; 0x24
 8006250:	2110      	movs	r1, #16
 8006252:	200d      	movs	r0, #13
 8006254:	f7ff fd7a 	bl	8005d4c <lcd_setBar>
		break;
 8006258:	e01e      	b.n	8006298 <potiPrint+0x33c>
	case 19:
		lcd_setString(4, 4, "Sirup percentage: 24%", LCD_FONT_8, false);
 800625a:	2300      	movs	r3, #0
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	2300      	movs	r3, #0
 8006260:	4a27      	ldr	r2, [pc, #156]	; (8006300 <potiPrint+0x3a4>)
 8006262:	2104      	movs	r1, #4
 8006264:	2004      	movs	r0, #4
 8006266:	f7ff fbed 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 37, 24);
 800626a:	2318      	movs	r3, #24
 800626c:	2225      	movs	r2, #37	; 0x25
 800626e:	2110      	movs	r1, #16
 8006270:	200d      	movs	r0, #13
 8006272:	f7ff fd6b 	bl	8005d4c <lcd_setBar>
		break;
 8006276:	e00f      	b.n	8006298 <potiPrint+0x33c>
	case 20:
		lcd_setString(4, 4, "Sirup percentage: 25%", LCD_FONT_8, false);
 8006278:	2300      	movs	r3, #0
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	2300      	movs	r3, #0
 800627e:	4a21      	ldr	r2, [pc, #132]	; (8006304 <potiPrint+0x3a8>)
 8006280:	2104      	movs	r1, #4
 8006282:	2004      	movs	r0, #4
 8006284:	f7ff fbde 	bl	8005a44 <lcd_setString>
		lcd_setBar(13, 16, 38, 24);
 8006288:	2318      	movs	r3, #24
 800628a:	2226      	movs	r2, #38	; 0x26
 800628c:	2110      	movs	r1, #16
 800628e:	200d      	movs	r0, #13
 8006290:	f7ff fd5c 	bl	8005d4c <lcd_setBar>
		break;
 8006294:	e000      	b.n	8006298 <potiPrint+0x33c>
	default:
		break;
 8006296:	bf00      	nop
	}
	lcd_show();
 8006298:	f7ff fd24 	bl	8005ce4 <lcd_show>
	return new_value+5; // +5 since we start at 5 percent
 800629c:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <potiPrint+0x354>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3305      	adds	r3, #5
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	51eb851f 	.word	0x51eb851f
 80062b0:	200005e0 	.word	0x200005e0
 80062b4:	0800937c 	.word	0x0800937c
 80062b8:	08009394 	.word	0x08009394
 80062bc:	080093ac 	.word	0x080093ac
 80062c0:	080093c4 	.word	0x080093c4
 80062c4:	080093dc 	.word	0x080093dc
 80062c8:	080093f4 	.word	0x080093f4
 80062cc:	0800940c 	.word	0x0800940c
 80062d0:	08009424 	.word	0x08009424
 80062d4:	0800943c 	.word	0x0800943c
 80062d8:	08009454 	.word	0x08009454
 80062dc:	0800946c 	.word	0x0800946c
 80062e0:	08009484 	.word	0x08009484
 80062e4:	0800949c 	.word	0x0800949c
 80062e8:	080094b4 	.word	0x080094b4
 80062ec:	080094cc 	.word	0x080094cc
 80062f0:	080094e4 	.word	0x080094e4
 80062f4:	080094fc 	.word	0x080094fc
 80062f8:	08009514 	.word	0x08009514
 80062fc:	0800952c 	.word	0x0800952c
 8006300:	08009544 	.word	0x08009544
 8006304:	0800955c 	.word	0x0800955c

08006308 <potiDeInit>:

HAL_StatusTypeDef potiDeInit()
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
	return HAL_ADC_Stop(&hadc1);
 800630c:	4802      	ldr	r0, [pc, #8]	; (8006318 <potiDeInit+0x10>)
 800630e:	f7fb feb1 	bl	8002074 <HAL_ADC_Stop>
 8006312:	4603      	mov	r3, r0
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000414 	.word	0x20000414

0800631c <initScale>:
int volume_small = 185;
int volume_big = 500;
int volume;


void initScale(void){
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af02      	add	r7, sp, #8
	hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_CLK_Pin, HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 8006322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <initScale+0x34>)
 800632a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800632e:	4908      	ldr	r1, [pc, #32]	; (8006350 <initScale+0x34>)
 8006330:	4808      	ldr	r0, [pc, #32]	; (8006354 <initScale+0x38>)
 8006332:	f7ff f882 	bl	800543a <hx711_init>
	hx711_coef_set(&loadcell, 354.5); 						// read afer calibration
 8006336:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006358 <initScale+0x3c>
 800633a:	4806      	ldr	r0, [pc, #24]	; (8006354 <initScale+0x38>)
 800633c:	f7ff fa04 	bl	8005748 <hx711_coef_set>
	hx711_tare(&loadcell, 10);
 8006340:	210a      	movs	r1, #10
 8006342:	4804      	ldr	r0, [pc, #16]	; (8006354 <initScale+0x38>)
 8006344:	f7ff f947 	bl	80055d6 <hx711_tare>
}
 8006348:	bf00      	nop
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40020400 	.word	0x40020400
 8006354:	200005e4 	.word	0x200005e4
 8006358:	43b14000 	.word	0x43b14000

0800635c <getWeight>:

int getWeight(void){
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af02      	add	r7, sp, #8
	HAL_Delay(500);
 8006362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006366:	f7fb fd4b 	bl	8001e00 <HAL_Delay>
	weight = hx711_weight(&loadcell, 10);
 800636a:	210a      	movs	r1, #10
 800636c:	4818      	ldr	r0, [pc, #96]	; (80063d0 <getWeight+0x74>)
 800636e:	f7ff f96f 	bl	8005650 <hx711_weight>
 8006372:	eef0 7a40 	vmov.f32	s15, s0
 8006376:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <getWeight+0x78>)
 8006378:	edc3 7a00 	vstr	s15, [r3]
	sprintf(msgBuf,"Weight: %dg", (int)weight); // fill message buffer
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <getWeight+0x78>)
 800637e:	edd3 7a00 	vldr	s15, [r3]
 8006382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006386:	ee17 2a90 	vmov	r2, s15
 800638a:	4913      	ldr	r1, [pc, #76]	; (80063d8 <getWeight+0x7c>)
 800638c:	4813      	ldr	r0, [pc, #76]	; (80063dc <getWeight+0x80>)
 800638e:	f000 fe15 	bl	8006fbc <siprintf>
	lcd_clear();
 8006392:	f7ff facb 	bl	800592c <lcd_clear>
	lcd_setString(4, 1, msgBuf, LCD_FONT_8, false); 		// LCD message
 8006396:	2300      	movs	r3, #0
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	2300      	movs	r3, #0
 800639c:	4a0f      	ldr	r2, [pc, #60]	; (80063dc <getWeight+0x80>)
 800639e:	2101      	movs	r1, #1
 80063a0:	2004      	movs	r0, #4
 80063a2:	f7ff fb4f 	bl	8005a44 <lcd_setString>
	lcd_setString(4, 16, "Press js to continue", LCD_FONT_8, false);
 80063a6:	2300      	movs	r3, #0
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	2300      	movs	r3, #0
 80063ac:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <getWeight+0x84>)
 80063ae:	2110      	movs	r1, #16
 80063b0:	2004      	movs	r0, #4
 80063b2:	f7ff fb47 	bl	8005a44 <lcd_setString>
	lcd_show();
 80063b6:	f7ff fc95 	bl	8005ce4 <lcd_show>
	return (int)weight;
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <getWeight+0x78>)
 80063bc:	edd3 7a00 	vldr	s15, [r3]
 80063c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063c4:	ee17 3a90 	vmov	r3, s15
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200005e4 	.word	0x200005e4
 80063d4:	2000046c 	.word	0x2000046c
 80063d8:	08009574 	.word	0x08009574
 80063dc:	20000600 	.word	0x20000600
 80063e0:	08009580 	.word	0x08009580

080063e4 <getWeight2>:

int getWeight2(void){
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af02      	add	r7, sp, #8
	HAL_Delay(500);
 80063ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063ee:	f7fb fd07 	bl	8001e00 <HAL_Delay>
	weight = hx711_weight(&loadcell, 10);
 80063f2:	210a      	movs	r1, #10
 80063f4:	480e      	ldr	r0, [pc, #56]	; (8006430 <getWeight2+0x4c>)
 80063f6:	f7ff f92b 	bl	8005650 <hx711_weight>
 80063fa:	eef0 7a40 	vmov.f32	s15, s0
 80063fe:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <getWeight2+0x50>)
 8006400:	edc3 7a00 	vstr	s15, [r3]
	//sprintf(msgBuf,"Weight: %dg", (int)weight); // fill message buffer
	lcd_clear();
 8006404:	f7ff fa92 	bl	800592c <lcd_clear>
	lcd_setString(4, 1, "Filling..." , LCD_FONT_8, false); 		// LCD message
 8006408:	2300      	movs	r3, #0
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2300      	movs	r3, #0
 800640e:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <getWeight2+0x54>)
 8006410:	2101      	movs	r1, #1
 8006412:	2004      	movs	r0, #4
 8006414:	f7ff fb16 	bl	8005a44 <lcd_setString>
	lcd_show();
 8006418:	f7ff fc64 	bl	8005ce4 <lcd_show>
	return (int)weight;
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <getWeight2+0x50>)
 800641e:	edd3 7a00 	vldr	s15, [r3]
 8006422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006426:	ee17 3a90 	vmov	r3, s15
}
 800642a:	4618      	mov	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	200005e4 	.word	0x200005e4
 8006434:	2000046c 	.word	0x2000046c
 8006438:	08009598 	.word	0x08009598

0800643c <checkWeight>:

int checkWeight(char size, int weight, int percentage){
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	73fb      	strb	r3, [r7, #15]
	if (size == 0){
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d104      	bne.n	800645a <checkWeight+0x1e>
		volume = volume_small;
 8006450:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <checkWeight+0x54>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a0f      	ldr	r2, [pc, #60]	; (8006494 <checkWeight+0x58>)
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e003      	b.n	8006462 <checkWeight+0x26>
	}
	else{
		volume = volume_big;
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <checkWeight+0x5c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a0d      	ldr	r2, [pc, #52]	; (8006494 <checkWeight+0x58>)
 8006460:	6013      	str	r3, [r2, #0]
	}
	if (weight > volume*percentage/100)
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <checkWeight+0x58>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	4a0b      	ldr	r2, [pc, #44]	; (800649c <checkWeight+0x60>)
 800646e:	fb82 1203 	smull	r1, r2, r2, r3
 8006472:	1152      	asrs	r2, r2, #5
 8006474:	17db      	asrs	r3, r3, #31
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	dd01      	ble.n	8006482 <checkWeight+0x46>
		return 1;
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <checkWeight+0x48>
	return 0;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20000010 	.word	0x20000010
 8006494:	200005fc 	.word	0x200005fc
 8006498:	20000014 	.word	0x20000014
 800649c:	51eb851f 	.word	0x51eb851f

080064a0 <checkWeight2>:

int checkWeight2(char size, int weight, int percentage){
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	73fb      	strb	r3, [r7, #15]
	if (size == 0){
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d104      	bne.n	80064be <checkWeight2+0x1e>
		volume = volume_small;
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <checkWeight2+0x44>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a0b      	ldr	r2, [pc, #44]	; (80064e8 <checkWeight2+0x48>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e003      	b.n	80064c6 <checkWeight2+0x26>
	}
	else{
		volume = volume_big;
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <checkWeight2+0x4c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <checkWeight2+0x48>)
 80064c4:	6013      	str	r3, [r2, #0]
	}
	if (weight > volume)
 80064c6:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <checkWeight2+0x48>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	dd01      	ble.n	80064d4 <checkWeight2+0x34>
		return 1;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <checkWeight2+0x36>
	return 0;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000010 	.word	0x20000010
 80064e8:	200005fc 	.word	0x200005fc
 80064ec:	20000014 	.word	0x20000014

080064f0 <__errno>:
 80064f0:	4b01      	ldr	r3, [pc, #4]	; (80064f8 <__errno+0x8>)
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20000018 	.word	0x20000018

080064fc <__libc_init_array>:
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	4d0d      	ldr	r5, [pc, #52]	; (8006534 <__libc_init_array+0x38>)
 8006500:	4c0d      	ldr	r4, [pc, #52]	; (8006538 <__libc_init_array+0x3c>)
 8006502:	1b64      	subs	r4, r4, r5
 8006504:	10a4      	asrs	r4, r4, #2
 8006506:	2600      	movs	r6, #0
 8006508:	42a6      	cmp	r6, r4
 800650a:	d109      	bne.n	8006520 <__libc_init_array+0x24>
 800650c:	4d0b      	ldr	r5, [pc, #44]	; (800653c <__libc_init_array+0x40>)
 800650e:	4c0c      	ldr	r4, [pc, #48]	; (8006540 <__libc_init_array+0x44>)
 8006510:	f002 fed0 	bl	80092b4 <_init>
 8006514:	1b64      	subs	r4, r4, r5
 8006516:	10a4      	asrs	r4, r4, #2
 8006518:	2600      	movs	r6, #0
 800651a:	42a6      	cmp	r6, r4
 800651c:	d105      	bne.n	800652a <__libc_init_array+0x2e>
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	f855 3b04 	ldr.w	r3, [r5], #4
 8006524:	4798      	blx	r3
 8006526:	3601      	adds	r6, #1
 8006528:	e7ee      	b.n	8006508 <__libc_init_array+0xc>
 800652a:	f855 3b04 	ldr.w	r3, [r5], #4
 800652e:	4798      	blx	r3
 8006530:	3601      	adds	r6, #1
 8006532:	e7f2      	b.n	800651a <__libc_init_array+0x1e>
 8006534:	08009d2c 	.word	0x08009d2c
 8006538:	08009d2c 	.word	0x08009d2c
 800653c:	08009d2c 	.word	0x08009d2c
 8006540:	08009d30 	.word	0x08009d30

08006544 <malloc>:
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <malloc+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f000 b863 	b.w	8006614 <_malloc_r>
 800654e:	bf00      	nop
 8006550:	20000018 	.word	0x20000018

08006554 <free>:
 8006554:	4b02      	ldr	r3, [pc, #8]	; (8006560 <free+0xc>)
 8006556:	4601      	mov	r1, r0
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	f000 b80b 	b.w	8006574 <_free_r>
 800655e:	bf00      	nop
 8006560:	20000018 	.word	0x20000018

08006564 <memset>:
 8006564:	4402      	add	r2, r0
 8006566:	4603      	mov	r3, r0
 8006568:	4293      	cmp	r3, r2
 800656a:	d100      	bne.n	800656e <memset+0xa>
 800656c:	4770      	bx	lr
 800656e:	f803 1b01 	strb.w	r1, [r3], #1
 8006572:	e7f9      	b.n	8006568 <memset+0x4>

08006574 <_free_r>:
 8006574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006576:	2900      	cmp	r1, #0
 8006578:	d048      	beq.n	800660c <_free_r+0x98>
 800657a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657e:	9001      	str	r0, [sp, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f1a1 0404 	sub.w	r4, r1, #4
 8006586:	bfb8      	it	lt
 8006588:	18e4      	addlt	r4, r4, r3
 800658a:	f001 fbd7 	bl	8007d3c <__malloc_lock>
 800658e:	4a20      	ldr	r2, [pc, #128]	; (8006610 <_free_r+0x9c>)
 8006590:	9801      	ldr	r0, [sp, #4]
 8006592:	6813      	ldr	r3, [r2, #0]
 8006594:	4615      	mov	r5, r2
 8006596:	b933      	cbnz	r3, 80065a6 <_free_r+0x32>
 8006598:	6063      	str	r3, [r4, #4]
 800659a:	6014      	str	r4, [r2, #0]
 800659c:	b003      	add	sp, #12
 800659e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065a2:	f001 bbd1 	b.w	8007d48 <__malloc_unlock>
 80065a6:	42a3      	cmp	r3, r4
 80065a8:	d90b      	bls.n	80065c2 <_free_r+0x4e>
 80065aa:	6821      	ldr	r1, [r4, #0]
 80065ac:	1862      	adds	r2, r4, r1
 80065ae:	4293      	cmp	r3, r2
 80065b0:	bf04      	itt	eq
 80065b2:	681a      	ldreq	r2, [r3, #0]
 80065b4:	685b      	ldreq	r3, [r3, #4]
 80065b6:	6063      	str	r3, [r4, #4]
 80065b8:	bf04      	itt	eq
 80065ba:	1852      	addeq	r2, r2, r1
 80065bc:	6022      	streq	r2, [r4, #0]
 80065be:	602c      	str	r4, [r5, #0]
 80065c0:	e7ec      	b.n	800659c <_free_r+0x28>
 80065c2:	461a      	mov	r2, r3
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	b10b      	cbz	r3, 80065cc <_free_r+0x58>
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	d9fa      	bls.n	80065c2 <_free_r+0x4e>
 80065cc:	6811      	ldr	r1, [r2, #0]
 80065ce:	1855      	adds	r5, r2, r1
 80065d0:	42a5      	cmp	r5, r4
 80065d2:	d10b      	bne.n	80065ec <_free_r+0x78>
 80065d4:	6824      	ldr	r4, [r4, #0]
 80065d6:	4421      	add	r1, r4
 80065d8:	1854      	adds	r4, r2, r1
 80065da:	42a3      	cmp	r3, r4
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	d1dd      	bne.n	800659c <_free_r+0x28>
 80065e0:	681c      	ldr	r4, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	6053      	str	r3, [r2, #4]
 80065e6:	4421      	add	r1, r4
 80065e8:	6011      	str	r1, [r2, #0]
 80065ea:	e7d7      	b.n	800659c <_free_r+0x28>
 80065ec:	d902      	bls.n	80065f4 <_free_r+0x80>
 80065ee:	230c      	movs	r3, #12
 80065f0:	6003      	str	r3, [r0, #0]
 80065f2:	e7d3      	b.n	800659c <_free_r+0x28>
 80065f4:	6825      	ldr	r5, [r4, #0]
 80065f6:	1961      	adds	r1, r4, r5
 80065f8:	428b      	cmp	r3, r1
 80065fa:	bf04      	itt	eq
 80065fc:	6819      	ldreq	r1, [r3, #0]
 80065fe:	685b      	ldreq	r3, [r3, #4]
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	bf04      	itt	eq
 8006604:	1949      	addeq	r1, r1, r5
 8006606:	6021      	streq	r1, [r4, #0]
 8006608:	6054      	str	r4, [r2, #4]
 800660a:	e7c7      	b.n	800659c <_free_r+0x28>
 800660c:	b003      	add	sp, #12
 800660e:	bd30      	pop	{r4, r5, pc}
 8006610:	2000040c 	.word	0x2000040c

08006614 <_malloc_r>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	1ccd      	adds	r5, r1, #3
 8006618:	f025 0503 	bic.w	r5, r5, #3
 800661c:	3508      	adds	r5, #8
 800661e:	2d0c      	cmp	r5, #12
 8006620:	bf38      	it	cc
 8006622:	250c      	movcc	r5, #12
 8006624:	2d00      	cmp	r5, #0
 8006626:	4606      	mov	r6, r0
 8006628:	db01      	blt.n	800662e <_malloc_r+0x1a>
 800662a:	42a9      	cmp	r1, r5
 800662c:	d903      	bls.n	8006636 <_malloc_r+0x22>
 800662e:	230c      	movs	r3, #12
 8006630:	6033      	str	r3, [r6, #0]
 8006632:	2000      	movs	r0, #0
 8006634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006636:	f001 fb81 	bl	8007d3c <__malloc_lock>
 800663a:	4921      	ldr	r1, [pc, #132]	; (80066c0 <_malloc_r+0xac>)
 800663c:	680a      	ldr	r2, [r1, #0]
 800663e:	4614      	mov	r4, r2
 8006640:	b99c      	cbnz	r4, 800666a <_malloc_r+0x56>
 8006642:	4f20      	ldr	r7, [pc, #128]	; (80066c4 <_malloc_r+0xb0>)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	b923      	cbnz	r3, 8006652 <_malloc_r+0x3e>
 8006648:	4621      	mov	r1, r4
 800664a:	4630      	mov	r0, r6
 800664c:	f000 fca6 	bl	8006f9c <_sbrk_r>
 8006650:	6038      	str	r0, [r7, #0]
 8006652:	4629      	mov	r1, r5
 8006654:	4630      	mov	r0, r6
 8006656:	f000 fca1 	bl	8006f9c <_sbrk_r>
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d123      	bne.n	80066a6 <_malloc_r+0x92>
 800665e:	230c      	movs	r3, #12
 8006660:	6033      	str	r3, [r6, #0]
 8006662:	4630      	mov	r0, r6
 8006664:	f001 fb70 	bl	8007d48 <__malloc_unlock>
 8006668:	e7e3      	b.n	8006632 <_malloc_r+0x1e>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	1b5b      	subs	r3, r3, r5
 800666e:	d417      	bmi.n	80066a0 <_malloc_r+0x8c>
 8006670:	2b0b      	cmp	r3, #11
 8006672:	d903      	bls.n	800667c <_malloc_r+0x68>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	441c      	add	r4, r3
 8006678:	6025      	str	r5, [r4, #0]
 800667a:	e004      	b.n	8006686 <_malloc_r+0x72>
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	42a2      	cmp	r2, r4
 8006680:	bf0c      	ite	eq
 8006682:	600b      	streq	r3, [r1, #0]
 8006684:	6053      	strne	r3, [r2, #4]
 8006686:	4630      	mov	r0, r6
 8006688:	f001 fb5e 	bl	8007d48 <__malloc_unlock>
 800668c:	f104 000b 	add.w	r0, r4, #11
 8006690:	1d23      	adds	r3, r4, #4
 8006692:	f020 0007 	bic.w	r0, r0, #7
 8006696:	1ac2      	subs	r2, r0, r3
 8006698:	d0cc      	beq.n	8006634 <_malloc_r+0x20>
 800669a:	1a1b      	subs	r3, r3, r0
 800669c:	50a3      	str	r3, [r4, r2]
 800669e:	e7c9      	b.n	8006634 <_malloc_r+0x20>
 80066a0:	4622      	mov	r2, r4
 80066a2:	6864      	ldr	r4, [r4, #4]
 80066a4:	e7cc      	b.n	8006640 <_malloc_r+0x2c>
 80066a6:	1cc4      	adds	r4, r0, #3
 80066a8:	f024 0403 	bic.w	r4, r4, #3
 80066ac:	42a0      	cmp	r0, r4
 80066ae:	d0e3      	beq.n	8006678 <_malloc_r+0x64>
 80066b0:	1a21      	subs	r1, r4, r0
 80066b2:	4630      	mov	r0, r6
 80066b4:	f000 fc72 	bl	8006f9c <_sbrk_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d1dd      	bne.n	8006678 <_malloc_r+0x64>
 80066bc:	e7cf      	b.n	800665e <_malloc_r+0x4a>
 80066be:	bf00      	nop
 80066c0:	2000040c 	.word	0x2000040c
 80066c4:	20000410 	.word	0x20000410

080066c8 <__cvt>:
 80066c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066cc:	ec55 4b10 	vmov	r4, r5, d0
 80066d0:	2d00      	cmp	r5, #0
 80066d2:	460e      	mov	r6, r1
 80066d4:	4619      	mov	r1, r3
 80066d6:	462b      	mov	r3, r5
 80066d8:	bfbb      	ittet	lt
 80066da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066de:	461d      	movlt	r5, r3
 80066e0:	2300      	movge	r3, #0
 80066e2:	232d      	movlt	r3, #45	; 0x2d
 80066e4:	700b      	strb	r3, [r1, #0]
 80066e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066ec:	4691      	mov	r9, r2
 80066ee:	f023 0820 	bic.w	r8, r3, #32
 80066f2:	bfbc      	itt	lt
 80066f4:	4622      	movlt	r2, r4
 80066f6:	4614      	movlt	r4, r2
 80066f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066fc:	d005      	beq.n	800670a <__cvt+0x42>
 80066fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006702:	d100      	bne.n	8006706 <__cvt+0x3e>
 8006704:	3601      	adds	r6, #1
 8006706:	2102      	movs	r1, #2
 8006708:	e000      	b.n	800670c <__cvt+0x44>
 800670a:	2103      	movs	r1, #3
 800670c:	ab03      	add	r3, sp, #12
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	ab02      	add	r3, sp, #8
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	ec45 4b10 	vmov	d0, r4, r5
 8006718:	4653      	mov	r3, sl
 800671a:	4632      	mov	r2, r6
 800671c:	f000 fd10 	bl	8007140 <_dtoa_r>
 8006720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006724:	4607      	mov	r7, r0
 8006726:	d102      	bne.n	800672e <__cvt+0x66>
 8006728:	f019 0f01 	tst.w	r9, #1
 800672c:	d022      	beq.n	8006774 <__cvt+0xac>
 800672e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006732:	eb07 0906 	add.w	r9, r7, r6
 8006736:	d110      	bne.n	800675a <__cvt+0x92>
 8006738:	783b      	ldrb	r3, [r7, #0]
 800673a:	2b30      	cmp	r3, #48	; 0x30
 800673c:	d10a      	bne.n	8006754 <__cvt+0x8c>
 800673e:	2200      	movs	r2, #0
 8006740:	2300      	movs	r3, #0
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f7fa f9df 	bl	8000b08 <__aeabi_dcmpeq>
 800674a:	b918      	cbnz	r0, 8006754 <__cvt+0x8c>
 800674c:	f1c6 0601 	rsb	r6, r6, #1
 8006750:	f8ca 6000 	str.w	r6, [sl]
 8006754:	f8da 3000 	ldr.w	r3, [sl]
 8006758:	4499      	add	r9, r3
 800675a:	2200      	movs	r2, #0
 800675c:	2300      	movs	r3, #0
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	f7fa f9d1 	bl	8000b08 <__aeabi_dcmpeq>
 8006766:	b108      	cbz	r0, 800676c <__cvt+0xa4>
 8006768:	f8cd 900c 	str.w	r9, [sp, #12]
 800676c:	2230      	movs	r2, #48	; 0x30
 800676e:	9b03      	ldr	r3, [sp, #12]
 8006770:	454b      	cmp	r3, r9
 8006772:	d307      	bcc.n	8006784 <__cvt+0xbc>
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006778:	1bdb      	subs	r3, r3, r7
 800677a:	4638      	mov	r0, r7
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	b004      	add	sp, #16
 8006780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006784:	1c59      	adds	r1, r3, #1
 8006786:	9103      	str	r1, [sp, #12]
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e7f0      	b.n	800676e <__cvt+0xa6>

0800678c <__exponent>:
 800678c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800678e:	4603      	mov	r3, r0
 8006790:	2900      	cmp	r1, #0
 8006792:	bfb8      	it	lt
 8006794:	4249      	neglt	r1, r1
 8006796:	f803 2b02 	strb.w	r2, [r3], #2
 800679a:	bfb4      	ite	lt
 800679c:	222d      	movlt	r2, #45	; 0x2d
 800679e:	222b      	movge	r2, #43	; 0x2b
 80067a0:	2909      	cmp	r1, #9
 80067a2:	7042      	strb	r2, [r0, #1]
 80067a4:	dd2a      	ble.n	80067fc <__exponent+0x70>
 80067a6:	f10d 0407 	add.w	r4, sp, #7
 80067aa:	46a4      	mov	ip, r4
 80067ac:	270a      	movs	r7, #10
 80067ae:	46a6      	mov	lr, r4
 80067b0:	460a      	mov	r2, r1
 80067b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80067b6:	fb07 1516 	mls	r5, r7, r6, r1
 80067ba:	3530      	adds	r5, #48	; 0x30
 80067bc:	2a63      	cmp	r2, #99	; 0x63
 80067be:	f104 34ff 	add.w	r4, r4, #4294967295
 80067c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067c6:	4631      	mov	r1, r6
 80067c8:	dcf1      	bgt.n	80067ae <__exponent+0x22>
 80067ca:	3130      	adds	r1, #48	; 0x30
 80067cc:	f1ae 0502 	sub.w	r5, lr, #2
 80067d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067d4:	1c44      	adds	r4, r0, #1
 80067d6:	4629      	mov	r1, r5
 80067d8:	4561      	cmp	r1, ip
 80067da:	d30a      	bcc.n	80067f2 <__exponent+0x66>
 80067dc:	f10d 0209 	add.w	r2, sp, #9
 80067e0:	eba2 020e 	sub.w	r2, r2, lr
 80067e4:	4565      	cmp	r5, ip
 80067e6:	bf88      	it	hi
 80067e8:	2200      	movhi	r2, #0
 80067ea:	4413      	add	r3, r2
 80067ec:	1a18      	subs	r0, r3, r0
 80067ee:	b003      	add	sp, #12
 80067f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80067fa:	e7ed      	b.n	80067d8 <__exponent+0x4c>
 80067fc:	2330      	movs	r3, #48	; 0x30
 80067fe:	3130      	adds	r1, #48	; 0x30
 8006800:	7083      	strb	r3, [r0, #2]
 8006802:	70c1      	strb	r1, [r0, #3]
 8006804:	1d03      	adds	r3, r0, #4
 8006806:	e7f1      	b.n	80067ec <__exponent+0x60>

08006808 <_printf_float>:
 8006808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	ed2d 8b02 	vpush	{d8}
 8006810:	b08d      	sub	sp, #52	; 0x34
 8006812:	460c      	mov	r4, r1
 8006814:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006818:	4616      	mov	r6, r2
 800681a:	461f      	mov	r7, r3
 800681c:	4605      	mov	r5, r0
 800681e:	f001 fa7b 	bl	8007d18 <_localeconv_r>
 8006822:	f8d0 a000 	ldr.w	sl, [r0]
 8006826:	4650      	mov	r0, sl
 8006828:	f7f9 fcf2 	bl	8000210 <strlen>
 800682c:	2300      	movs	r3, #0
 800682e:	930a      	str	r3, [sp, #40]	; 0x28
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	9305      	str	r3, [sp, #20]
 8006834:	f8d8 3000 	ldr.w	r3, [r8]
 8006838:	f894 b018 	ldrb.w	fp, [r4, #24]
 800683c:	3307      	adds	r3, #7
 800683e:	f023 0307 	bic.w	r3, r3, #7
 8006842:	f103 0208 	add.w	r2, r3, #8
 8006846:	f8c8 2000 	str.w	r2, [r8]
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006852:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006856:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800685a:	9307      	str	r3, [sp, #28]
 800685c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006860:	ee08 0a10 	vmov	s16, r0
 8006864:	4b9f      	ldr	r3, [pc, #636]	; (8006ae4 <_printf_float+0x2dc>)
 8006866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	f7fa f97d 	bl	8000b6c <__aeabi_dcmpun>
 8006872:	bb88      	cbnz	r0, 80068d8 <_printf_float+0xd0>
 8006874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006878:	4b9a      	ldr	r3, [pc, #616]	; (8006ae4 <_printf_float+0x2dc>)
 800687a:	f04f 32ff 	mov.w	r2, #4294967295
 800687e:	f7fa f957 	bl	8000b30 <__aeabi_dcmple>
 8006882:	bb48      	cbnz	r0, 80068d8 <_printf_float+0xd0>
 8006884:	2200      	movs	r2, #0
 8006886:	2300      	movs	r3, #0
 8006888:	4640      	mov	r0, r8
 800688a:	4649      	mov	r1, r9
 800688c:	f7fa f946 	bl	8000b1c <__aeabi_dcmplt>
 8006890:	b110      	cbz	r0, 8006898 <_printf_float+0x90>
 8006892:	232d      	movs	r3, #45	; 0x2d
 8006894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006898:	4b93      	ldr	r3, [pc, #588]	; (8006ae8 <_printf_float+0x2e0>)
 800689a:	4894      	ldr	r0, [pc, #592]	; (8006aec <_printf_float+0x2e4>)
 800689c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068a0:	bf94      	ite	ls
 80068a2:	4698      	movls	r8, r3
 80068a4:	4680      	movhi	r8, r0
 80068a6:	2303      	movs	r3, #3
 80068a8:	6123      	str	r3, [r4, #16]
 80068aa:	9b05      	ldr	r3, [sp, #20]
 80068ac:	f023 0204 	bic.w	r2, r3, #4
 80068b0:	6022      	str	r2, [r4, #0]
 80068b2:	f04f 0900 	mov.w	r9, #0
 80068b6:	9700      	str	r7, [sp, #0]
 80068b8:	4633      	mov	r3, r6
 80068ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f9d8 	bl	8006c74 <_printf_common>
 80068c4:	3001      	adds	r0, #1
 80068c6:	f040 8090 	bne.w	80069ea <_printf_float+0x1e2>
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295
 80068ce:	b00d      	add	sp, #52	; 0x34
 80068d0:	ecbd 8b02 	vpop	{d8}
 80068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	4640      	mov	r0, r8
 80068de:	4649      	mov	r1, r9
 80068e0:	f7fa f944 	bl	8000b6c <__aeabi_dcmpun>
 80068e4:	b140      	cbz	r0, 80068f8 <_printf_float+0xf0>
 80068e6:	464b      	mov	r3, r9
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bfbc      	itt	lt
 80068ec:	232d      	movlt	r3, #45	; 0x2d
 80068ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068f2:	487f      	ldr	r0, [pc, #508]	; (8006af0 <_printf_float+0x2e8>)
 80068f4:	4b7f      	ldr	r3, [pc, #508]	; (8006af4 <_printf_float+0x2ec>)
 80068f6:	e7d1      	b.n	800689c <_printf_float+0x94>
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80068fe:	9206      	str	r2, [sp, #24]
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	d13f      	bne.n	8006984 <_printf_float+0x17c>
 8006904:	2306      	movs	r3, #6
 8006906:	6063      	str	r3, [r4, #4]
 8006908:	9b05      	ldr	r3, [sp, #20]
 800690a:	6861      	ldr	r1, [r4, #4]
 800690c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006910:	2300      	movs	r3, #0
 8006912:	9303      	str	r3, [sp, #12]
 8006914:	ab0a      	add	r3, sp, #40	; 0x28
 8006916:	e9cd b301 	strd	fp, r3, [sp, #4]
 800691a:	ab09      	add	r3, sp, #36	; 0x24
 800691c:	ec49 8b10 	vmov	d0, r8, r9
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	6022      	str	r2, [r4, #0]
 8006924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006928:	4628      	mov	r0, r5
 800692a:	f7ff fecd 	bl	80066c8 <__cvt>
 800692e:	9b06      	ldr	r3, [sp, #24]
 8006930:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006932:	2b47      	cmp	r3, #71	; 0x47
 8006934:	4680      	mov	r8, r0
 8006936:	d108      	bne.n	800694a <_printf_float+0x142>
 8006938:	1cc8      	adds	r0, r1, #3
 800693a:	db02      	blt.n	8006942 <_printf_float+0x13a>
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	4299      	cmp	r1, r3
 8006940:	dd41      	ble.n	80069c6 <_printf_float+0x1be>
 8006942:	f1ab 0b02 	sub.w	fp, fp, #2
 8006946:	fa5f fb8b 	uxtb.w	fp, fp
 800694a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800694e:	d820      	bhi.n	8006992 <_printf_float+0x18a>
 8006950:	3901      	subs	r1, #1
 8006952:	465a      	mov	r2, fp
 8006954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006958:	9109      	str	r1, [sp, #36]	; 0x24
 800695a:	f7ff ff17 	bl	800678c <__exponent>
 800695e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006960:	1813      	adds	r3, r2, r0
 8006962:	2a01      	cmp	r2, #1
 8006964:	4681      	mov	r9, r0
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	dc02      	bgt.n	8006970 <_printf_float+0x168>
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	07d2      	lsls	r2, r2, #31
 800696e:	d501      	bpl.n	8006974 <_printf_float+0x16c>
 8006970:	3301      	adds	r3, #1
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006978:	2b00      	cmp	r3, #0
 800697a:	d09c      	beq.n	80068b6 <_printf_float+0xae>
 800697c:	232d      	movs	r3, #45	; 0x2d
 800697e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006982:	e798      	b.n	80068b6 <_printf_float+0xae>
 8006984:	9a06      	ldr	r2, [sp, #24]
 8006986:	2a47      	cmp	r2, #71	; 0x47
 8006988:	d1be      	bne.n	8006908 <_printf_float+0x100>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1bc      	bne.n	8006908 <_printf_float+0x100>
 800698e:	2301      	movs	r3, #1
 8006990:	e7b9      	b.n	8006906 <_printf_float+0xfe>
 8006992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006996:	d118      	bne.n	80069ca <_printf_float+0x1c2>
 8006998:	2900      	cmp	r1, #0
 800699a:	6863      	ldr	r3, [r4, #4]
 800699c:	dd0b      	ble.n	80069b6 <_printf_float+0x1ae>
 800699e:	6121      	str	r1, [r4, #16]
 80069a0:	b913      	cbnz	r3, 80069a8 <_printf_float+0x1a0>
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	07d0      	lsls	r0, r2, #31
 80069a6:	d502      	bpl.n	80069ae <_printf_float+0x1a6>
 80069a8:	3301      	adds	r3, #1
 80069aa:	440b      	add	r3, r1
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80069b0:	f04f 0900 	mov.w	r9, #0
 80069b4:	e7de      	b.n	8006974 <_printf_float+0x16c>
 80069b6:	b913      	cbnz	r3, 80069be <_printf_float+0x1b6>
 80069b8:	6822      	ldr	r2, [r4, #0]
 80069ba:	07d2      	lsls	r2, r2, #31
 80069bc:	d501      	bpl.n	80069c2 <_printf_float+0x1ba>
 80069be:	3302      	adds	r3, #2
 80069c0:	e7f4      	b.n	80069ac <_printf_float+0x1a4>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e7f2      	b.n	80069ac <_printf_float+0x1a4>
 80069c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069cc:	4299      	cmp	r1, r3
 80069ce:	db05      	blt.n	80069dc <_printf_float+0x1d4>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	6121      	str	r1, [r4, #16]
 80069d4:	07d8      	lsls	r0, r3, #31
 80069d6:	d5ea      	bpl.n	80069ae <_printf_float+0x1a6>
 80069d8:	1c4b      	adds	r3, r1, #1
 80069da:	e7e7      	b.n	80069ac <_printf_float+0x1a4>
 80069dc:	2900      	cmp	r1, #0
 80069de:	bfd4      	ite	le
 80069e0:	f1c1 0202 	rsble	r2, r1, #2
 80069e4:	2201      	movgt	r2, #1
 80069e6:	4413      	add	r3, r2
 80069e8:	e7e0      	b.n	80069ac <_printf_float+0x1a4>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	055a      	lsls	r2, r3, #21
 80069ee:	d407      	bmi.n	8006a00 <_printf_float+0x1f8>
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	4642      	mov	r2, r8
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	d12c      	bne.n	8006a58 <_printf_float+0x250>
 80069fe:	e764      	b.n	80068ca <_printf_float+0xc2>
 8006a00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a04:	f240 80e0 	bls.w	8006bc8 <_printf_float+0x3c0>
 8006a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f7fa f87a 	bl	8000b08 <__aeabi_dcmpeq>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d034      	beq.n	8006a82 <_printf_float+0x27a>
 8006a18:	4a37      	ldr	r2, [pc, #220]	; (8006af8 <_printf_float+0x2f0>)
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	4628      	mov	r0, r5
 8006a20:	47b8      	blx	r7
 8006a22:	3001      	adds	r0, #1
 8006a24:	f43f af51 	beq.w	80068ca <_printf_float+0xc2>
 8006a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	db02      	blt.n	8006a36 <_printf_float+0x22e>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	07d8      	lsls	r0, r3, #31
 8006a34:	d510      	bpl.n	8006a58 <_printf_float+0x250>
 8006a36:	ee18 3a10 	vmov	r3, s16
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	f43f af41 	beq.w	80068ca <_printf_float+0xc2>
 8006a48:	f04f 0800 	mov.w	r8, #0
 8006a4c:	f104 091a 	add.w	r9, r4, #26
 8006a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4543      	cmp	r3, r8
 8006a56:	dc09      	bgt.n	8006a6c <_printf_float+0x264>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	079b      	lsls	r3, r3, #30
 8006a5c:	f100 8105 	bmi.w	8006c6a <_printf_float+0x462>
 8006a60:	68e0      	ldr	r0, [r4, #12]
 8006a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a64:	4298      	cmp	r0, r3
 8006a66:	bfb8      	it	lt
 8006a68:	4618      	movlt	r0, r3
 8006a6a:	e730      	b.n	80068ce <_printf_float+0xc6>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	464a      	mov	r2, r9
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f af27 	beq.w	80068ca <_printf_float+0xc2>
 8006a7c:	f108 0801 	add.w	r8, r8, #1
 8006a80:	e7e6      	b.n	8006a50 <_printf_float+0x248>
 8006a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dc39      	bgt.n	8006afc <_printf_float+0x2f4>
 8006a88:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <_printf_float+0x2f0>)
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f af19 	beq.w	80068ca <_printf_float+0xc2>
 8006a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	d102      	bne.n	8006aa6 <_printf_float+0x29e>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	07d9      	lsls	r1, r3, #31
 8006aa4:	d5d8      	bpl.n	8006a58 <_printf_float+0x250>
 8006aa6:	ee18 3a10 	vmov	r3, s16
 8006aaa:	4652      	mov	r2, sl
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b8      	blx	r7
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	f43f af09 	beq.w	80068ca <_printf_float+0xc2>
 8006ab8:	f04f 0900 	mov.w	r9, #0
 8006abc:	f104 0a1a 	add.w	sl, r4, #26
 8006ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac2:	425b      	negs	r3, r3
 8006ac4:	454b      	cmp	r3, r9
 8006ac6:	dc01      	bgt.n	8006acc <_printf_float+0x2c4>
 8006ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aca:	e792      	b.n	80069f2 <_printf_float+0x1ea>
 8006acc:	2301      	movs	r3, #1
 8006ace:	4652      	mov	r2, sl
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f aef7 	beq.w	80068ca <_printf_float+0xc2>
 8006adc:	f109 0901 	add.w	r9, r9, #1
 8006ae0:	e7ee      	b.n	8006ac0 <_printf_float+0x2b8>
 8006ae2:	bf00      	nop
 8006ae4:	7fefffff 	.word	0x7fefffff
 8006ae8:	08009944 	.word	0x08009944
 8006aec:	08009948 	.word	0x08009948
 8006af0:	08009950 	.word	0x08009950
 8006af4:	0800994c 	.word	0x0800994c
 8006af8:	08009954 	.word	0x08009954
 8006afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b00:	429a      	cmp	r2, r3
 8006b02:	bfa8      	it	ge
 8006b04:	461a      	movge	r2, r3
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	4691      	mov	r9, r2
 8006b0a:	dc37      	bgt.n	8006b7c <_printf_float+0x374>
 8006b0c:	f04f 0b00 	mov.w	fp, #0
 8006b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b14:	f104 021a 	add.w	r2, r4, #26
 8006b18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b1a:	9305      	str	r3, [sp, #20]
 8006b1c:	eba3 0309 	sub.w	r3, r3, r9
 8006b20:	455b      	cmp	r3, fp
 8006b22:	dc33      	bgt.n	8006b8c <_printf_float+0x384>
 8006b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	db3b      	blt.n	8006ba4 <_printf_float+0x39c>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	07da      	lsls	r2, r3, #31
 8006b30:	d438      	bmi.n	8006ba4 <_printf_float+0x39c>
 8006b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b34:	9b05      	ldr	r3, [sp, #20]
 8006b36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	eba2 0901 	sub.w	r9, r2, r1
 8006b3e:	4599      	cmp	r9, r3
 8006b40:	bfa8      	it	ge
 8006b42:	4699      	movge	r9, r3
 8006b44:	f1b9 0f00 	cmp.w	r9, #0
 8006b48:	dc35      	bgt.n	8006bb6 <_printf_float+0x3ae>
 8006b4a:	f04f 0800 	mov.w	r8, #0
 8006b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b52:	f104 0a1a 	add.w	sl, r4, #26
 8006b56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b5a:	1a9b      	subs	r3, r3, r2
 8006b5c:	eba3 0309 	sub.w	r3, r3, r9
 8006b60:	4543      	cmp	r3, r8
 8006b62:	f77f af79 	ble.w	8006a58 <_printf_float+0x250>
 8006b66:	2301      	movs	r3, #1
 8006b68:	4652      	mov	r2, sl
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	f43f aeaa 	beq.w	80068ca <_printf_float+0xc2>
 8006b76:	f108 0801 	add.w	r8, r8, #1
 8006b7a:	e7ec      	b.n	8006b56 <_printf_float+0x34e>
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4642      	mov	r2, r8
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	d1c0      	bne.n	8006b0c <_printf_float+0x304>
 8006b8a:	e69e      	b.n	80068ca <_printf_float+0xc2>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4628      	mov	r0, r5
 8006b92:	9205      	str	r2, [sp, #20]
 8006b94:	47b8      	blx	r7
 8006b96:	3001      	adds	r0, #1
 8006b98:	f43f ae97 	beq.w	80068ca <_printf_float+0xc2>
 8006b9c:	9a05      	ldr	r2, [sp, #20]
 8006b9e:	f10b 0b01 	add.w	fp, fp, #1
 8006ba2:	e7b9      	b.n	8006b18 <_printf_float+0x310>
 8006ba4:	ee18 3a10 	vmov	r3, s16
 8006ba8:	4652      	mov	r2, sl
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d1be      	bne.n	8006b32 <_printf_float+0x32a>
 8006bb4:	e689      	b.n	80068ca <_printf_float+0xc2>
 8006bb6:	9a05      	ldr	r2, [sp, #20]
 8006bb8:	464b      	mov	r3, r9
 8006bba:	4442      	add	r2, r8
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	47b8      	blx	r7
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d1c1      	bne.n	8006b4a <_printf_float+0x342>
 8006bc6:	e680      	b.n	80068ca <_printf_float+0xc2>
 8006bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bca:	2a01      	cmp	r2, #1
 8006bcc:	dc01      	bgt.n	8006bd2 <_printf_float+0x3ca>
 8006bce:	07db      	lsls	r3, r3, #31
 8006bd0:	d538      	bpl.n	8006c44 <_printf_float+0x43c>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	f43f ae74 	beq.w	80068ca <_printf_float+0xc2>
 8006be2:	ee18 3a10 	vmov	r3, s16
 8006be6:	4652      	mov	r2, sl
 8006be8:	4631      	mov	r1, r6
 8006bea:	4628      	mov	r0, r5
 8006bec:	47b8      	blx	r7
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f43f ae6b 	beq.w	80068ca <_printf_float+0xc2>
 8006bf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f7f9 ff84 	bl	8000b08 <__aeabi_dcmpeq>
 8006c00:	b9d8      	cbnz	r0, 8006c3a <_printf_float+0x432>
 8006c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c04:	f108 0201 	add.w	r2, r8, #1
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b8      	blx	r7
 8006c10:	3001      	adds	r0, #1
 8006c12:	d10e      	bne.n	8006c32 <_printf_float+0x42a>
 8006c14:	e659      	b.n	80068ca <_printf_float+0xc2>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4652      	mov	r2, sl
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	f43f ae52 	beq.w	80068ca <_printf_float+0xc2>
 8006c26:	f108 0801 	add.w	r8, r8, #1
 8006c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	4543      	cmp	r3, r8
 8006c30:	dcf1      	bgt.n	8006c16 <_printf_float+0x40e>
 8006c32:	464b      	mov	r3, r9
 8006c34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c38:	e6dc      	b.n	80069f4 <_printf_float+0x1ec>
 8006c3a:	f04f 0800 	mov.w	r8, #0
 8006c3e:	f104 0a1a 	add.w	sl, r4, #26
 8006c42:	e7f2      	b.n	8006c2a <_printf_float+0x422>
 8006c44:	2301      	movs	r3, #1
 8006c46:	4642      	mov	r2, r8
 8006c48:	e7df      	b.n	8006c0a <_printf_float+0x402>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	464a      	mov	r2, r9
 8006c4e:	4631      	mov	r1, r6
 8006c50:	4628      	mov	r0, r5
 8006c52:	47b8      	blx	r7
 8006c54:	3001      	adds	r0, #1
 8006c56:	f43f ae38 	beq.w	80068ca <_printf_float+0xc2>
 8006c5a:	f108 0801 	add.w	r8, r8, #1
 8006c5e:	68e3      	ldr	r3, [r4, #12]
 8006c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c62:	1a5b      	subs	r3, r3, r1
 8006c64:	4543      	cmp	r3, r8
 8006c66:	dcf0      	bgt.n	8006c4a <_printf_float+0x442>
 8006c68:	e6fa      	b.n	8006a60 <_printf_float+0x258>
 8006c6a:	f04f 0800 	mov.w	r8, #0
 8006c6e:	f104 0919 	add.w	r9, r4, #25
 8006c72:	e7f4      	b.n	8006c5e <_printf_float+0x456>

08006c74 <_printf_common>:
 8006c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c78:	4616      	mov	r6, r2
 8006c7a:	4699      	mov	r9, r3
 8006c7c:	688a      	ldr	r2, [r1, #8]
 8006c7e:	690b      	ldr	r3, [r1, #16]
 8006c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c84:	4293      	cmp	r3, r2
 8006c86:	bfb8      	it	lt
 8006c88:	4613      	movlt	r3, r2
 8006c8a:	6033      	str	r3, [r6, #0]
 8006c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c90:	4607      	mov	r7, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	b10a      	cbz	r2, 8006c9a <_printf_common+0x26>
 8006c96:	3301      	adds	r3, #1
 8006c98:	6033      	str	r3, [r6, #0]
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	0699      	lsls	r1, r3, #26
 8006c9e:	bf42      	ittt	mi
 8006ca0:	6833      	ldrmi	r3, [r6, #0]
 8006ca2:	3302      	addmi	r3, #2
 8006ca4:	6033      	strmi	r3, [r6, #0]
 8006ca6:	6825      	ldr	r5, [r4, #0]
 8006ca8:	f015 0506 	ands.w	r5, r5, #6
 8006cac:	d106      	bne.n	8006cbc <_printf_common+0x48>
 8006cae:	f104 0a19 	add.w	sl, r4, #25
 8006cb2:	68e3      	ldr	r3, [r4, #12]
 8006cb4:	6832      	ldr	r2, [r6, #0]
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	42ab      	cmp	r3, r5
 8006cba:	dc26      	bgt.n	8006d0a <_printf_common+0x96>
 8006cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cc0:	1e13      	subs	r3, r2, #0
 8006cc2:	6822      	ldr	r2, [r4, #0]
 8006cc4:	bf18      	it	ne
 8006cc6:	2301      	movne	r3, #1
 8006cc8:	0692      	lsls	r2, r2, #26
 8006cca:	d42b      	bmi.n	8006d24 <_printf_common+0xb0>
 8006ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	47c0      	blx	r8
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d01e      	beq.n	8006d18 <_printf_common+0xa4>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	68e5      	ldr	r5, [r4, #12]
 8006cde:	6832      	ldr	r2, [r6, #0]
 8006ce0:	f003 0306 	and.w	r3, r3, #6
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	bf08      	it	eq
 8006ce8:	1aad      	subeq	r5, r5, r2
 8006cea:	68a3      	ldr	r3, [r4, #8]
 8006cec:	6922      	ldr	r2, [r4, #16]
 8006cee:	bf0c      	ite	eq
 8006cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf4:	2500      	movne	r5, #0
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	bfc4      	itt	gt
 8006cfa:	1a9b      	subgt	r3, r3, r2
 8006cfc:	18ed      	addgt	r5, r5, r3
 8006cfe:	2600      	movs	r6, #0
 8006d00:	341a      	adds	r4, #26
 8006d02:	42b5      	cmp	r5, r6
 8006d04:	d11a      	bne.n	8006d3c <_printf_common+0xc8>
 8006d06:	2000      	movs	r0, #0
 8006d08:	e008      	b.n	8006d1c <_printf_common+0xa8>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4652      	mov	r2, sl
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4638      	mov	r0, r7
 8006d12:	47c0      	blx	r8
 8006d14:	3001      	adds	r0, #1
 8006d16:	d103      	bne.n	8006d20 <_printf_common+0xac>
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d20:	3501      	adds	r5, #1
 8006d22:	e7c6      	b.n	8006cb2 <_printf_common+0x3e>
 8006d24:	18e1      	adds	r1, r4, r3
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	2030      	movs	r0, #48	; 0x30
 8006d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d2e:	4422      	add	r2, r4
 8006d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d38:	3302      	adds	r3, #2
 8006d3a:	e7c7      	b.n	8006ccc <_printf_common+0x58>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4622      	mov	r2, r4
 8006d40:	4649      	mov	r1, r9
 8006d42:	4638      	mov	r0, r7
 8006d44:	47c0      	blx	r8
 8006d46:	3001      	adds	r0, #1
 8006d48:	d0e6      	beq.n	8006d18 <_printf_common+0xa4>
 8006d4a:	3601      	adds	r6, #1
 8006d4c:	e7d9      	b.n	8006d02 <_printf_common+0x8e>
	...

08006d50 <_printf_i>:
 8006d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d54:	460c      	mov	r4, r1
 8006d56:	4691      	mov	r9, r2
 8006d58:	7e27      	ldrb	r7, [r4, #24]
 8006d5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d5c:	2f78      	cmp	r7, #120	; 0x78
 8006d5e:	4680      	mov	r8, r0
 8006d60:	469a      	mov	sl, r3
 8006d62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d66:	d807      	bhi.n	8006d78 <_printf_i+0x28>
 8006d68:	2f62      	cmp	r7, #98	; 0x62
 8006d6a:	d80a      	bhi.n	8006d82 <_printf_i+0x32>
 8006d6c:	2f00      	cmp	r7, #0
 8006d6e:	f000 80d8 	beq.w	8006f22 <_printf_i+0x1d2>
 8006d72:	2f58      	cmp	r7, #88	; 0x58
 8006d74:	f000 80a3 	beq.w	8006ebe <_printf_i+0x16e>
 8006d78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d80:	e03a      	b.n	8006df8 <_printf_i+0xa8>
 8006d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d86:	2b15      	cmp	r3, #21
 8006d88:	d8f6      	bhi.n	8006d78 <_printf_i+0x28>
 8006d8a:	a001      	add	r0, pc, #4	; (adr r0, 8006d90 <_printf_i+0x40>)
 8006d8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d90:	08006de9 	.word	0x08006de9
 8006d94:	08006dfd 	.word	0x08006dfd
 8006d98:	08006d79 	.word	0x08006d79
 8006d9c:	08006d79 	.word	0x08006d79
 8006da0:	08006d79 	.word	0x08006d79
 8006da4:	08006d79 	.word	0x08006d79
 8006da8:	08006dfd 	.word	0x08006dfd
 8006dac:	08006d79 	.word	0x08006d79
 8006db0:	08006d79 	.word	0x08006d79
 8006db4:	08006d79 	.word	0x08006d79
 8006db8:	08006d79 	.word	0x08006d79
 8006dbc:	08006f09 	.word	0x08006f09
 8006dc0:	08006e2d 	.word	0x08006e2d
 8006dc4:	08006eeb 	.word	0x08006eeb
 8006dc8:	08006d79 	.word	0x08006d79
 8006dcc:	08006d79 	.word	0x08006d79
 8006dd0:	08006f2b 	.word	0x08006f2b
 8006dd4:	08006d79 	.word	0x08006d79
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006d79 	.word	0x08006d79
 8006de0:	08006d79 	.word	0x08006d79
 8006de4:	08006ef3 	.word	0x08006ef3
 8006de8:	680b      	ldr	r3, [r1, #0]
 8006dea:	1d1a      	adds	r2, r3, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	600a      	str	r2, [r1, #0]
 8006df0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e0a3      	b.n	8006f44 <_printf_i+0x1f4>
 8006dfc:	6825      	ldr	r5, [r4, #0]
 8006dfe:	6808      	ldr	r0, [r1, #0]
 8006e00:	062e      	lsls	r6, r5, #24
 8006e02:	f100 0304 	add.w	r3, r0, #4
 8006e06:	d50a      	bpl.n	8006e1e <_printf_i+0xce>
 8006e08:	6805      	ldr	r5, [r0, #0]
 8006e0a:	600b      	str	r3, [r1, #0]
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	da03      	bge.n	8006e18 <_printf_i+0xc8>
 8006e10:	232d      	movs	r3, #45	; 0x2d
 8006e12:	426d      	negs	r5, r5
 8006e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e18:	485e      	ldr	r0, [pc, #376]	; (8006f94 <_printf_i+0x244>)
 8006e1a:	230a      	movs	r3, #10
 8006e1c:	e019      	b.n	8006e52 <_printf_i+0x102>
 8006e1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e22:	6805      	ldr	r5, [r0, #0]
 8006e24:	600b      	str	r3, [r1, #0]
 8006e26:	bf18      	it	ne
 8006e28:	b22d      	sxthne	r5, r5
 8006e2a:	e7ef      	b.n	8006e0c <_printf_i+0xbc>
 8006e2c:	680b      	ldr	r3, [r1, #0]
 8006e2e:	6825      	ldr	r5, [r4, #0]
 8006e30:	1d18      	adds	r0, r3, #4
 8006e32:	6008      	str	r0, [r1, #0]
 8006e34:	0628      	lsls	r0, r5, #24
 8006e36:	d501      	bpl.n	8006e3c <_printf_i+0xec>
 8006e38:	681d      	ldr	r5, [r3, #0]
 8006e3a:	e002      	b.n	8006e42 <_printf_i+0xf2>
 8006e3c:	0669      	lsls	r1, r5, #25
 8006e3e:	d5fb      	bpl.n	8006e38 <_printf_i+0xe8>
 8006e40:	881d      	ldrh	r5, [r3, #0]
 8006e42:	4854      	ldr	r0, [pc, #336]	; (8006f94 <_printf_i+0x244>)
 8006e44:	2f6f      	cmp	r7, #111	; 0x6f
 8006e46:	bf0c      	ite	eq
 8006e48:	2308      	moveq	r3, #8
 8006e4a:	230a      	movne	r3, #10
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e52:	6866      	ldr	r6, [r4, #4]
 8006e54:	60a6      	str	r6, [r4, #8]
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	bfa2      	ittt	ge
 8006e5a:	6821      	ldrge	r1, [r4, #0]
 8006e5c:	f021 0104 	bicge.w	r1, r1, #4
 8006e60:	6021      	strge	r1, [r4, #0]
 8006e62:	b90d      	cbnz	r5, 8006e68 <_printf_i+0x118>
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	d04d      	beq.n	8006f04 <_printf_i+0x1b4>
 8006e68:	4616      	mov	r6, r2
 8006e6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e6e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e72:	5dc7      	ldrb	r7, [r0, r7]
 8006e74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e78:	462f      	mov	r7, r5
 8006e7a:	42bb      	cmp	r3, r7
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	d9f4      	bls.n	8006e6a <_printf_i+0x11a>
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d10b      	bne.n	8006e9c <_printf_i+0x14c>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	07df      	lsls	r7, r3, #31
 8006e88:	d508      	bpl.n	8006e9c <_printf_i+0x14c>
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	6861      	ldr	r1, [r4, #4]
 8006e8e:	4299      	cmp	r1, r3
 8006e90:	bfde      	ittt	le
 8006e92:	2330      	movle	r3, #48	; 0x30
 8006e94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e9c:	1b92      	subs	r2, r2, r6
 8006e9e:	6122      	str	r2, [r4, #16]
 8006ea0:	f8cd a000 	str.w	sl, [sp]
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	aa03      	add	r2, sp, #12
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4640      	mov	r0, r8
 8006eac:	f7ff fee2 	bl	8006c74 <_printf_common>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d14c      	bne.n	8006f4e <_printf_i+0x1fe>
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb8:	b004      	add	sp, #16
 8006eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ebe:	4835      	ldr	r0, [pc, #212]	; (8006f94 <_printf_i+0x244>)
 8006ec0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	680e      	ldr	r6, [r1, #0]
 8006ec8:	061f      	lsls	r7, r3, #24
 8006eca:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ece:	600e      	str	r6, [r1, #0]
 8006ed0:	d514      	bpl.n	8006efc <_printf_i+0x1ac>
 8006ed2:	07d9      	lsls	r1, r3, #31
 8006ed4:	bf44      	itt	mi
 8006ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8006eda:	6023      	strmi	r3, [r4, #0]
 8006edc:	b91d      	cbnz	r5, 8006ee6 <_printf_i+0x196>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	f023 0320 	bic.w	r3, r3, #32
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	2310      	movs	r3, #16
 8006ee8:	e7b0      	b.n	8006e4c <_printf_i+0xfc>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	f043 0320 	orr.w	r3, r3, #32
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	2378      	movs	r3, #120	; 0x78
 8006ef4:	4828      	ldr	r0, [pc, #160]	; (8006f98 <_printf_i+0x248>)
 8006ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006efa:	e7e3      	b.n	8006ec4 <_printf_i+0x174>
 8006efc:	065e      	lsls	r6, r3, #25
 8006efe:	bf48      	it	mi
 8006f00:	b2ad      	uxthmi	r5, r5
 8006f02:	e7e6      	b.n	8006ed2 <_printf_i+0x182>
 8006f04:	4616      	mov	r6, r2
 8006f06:	e7bb      	b.n	8006e80 <_printf_i+0x130>
 8006f08:	680b      	ldr	r3, [r1, #0]
 8006f0a:	6826      	ldr	r6, [r4, #0]
 8006f0c:	6960      	ldr	r0, [r4, #20]
 8006f0e:	1d1d      	adds	r5, r3, #4
 8006f10:	600d      	str	r5, [r1, #0]
 8006f12:	0635      	lsls	r5, r6, #24
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	d501      	bpl.n	8006f1c <_printf_i+0x1cc>
 8006f18:	6018      	str	r0, [r3, #0]
 8006f1a:	e002      	b.n	8006f22 <_printf_i+0x1d2>
 8006f1c:	0671      	lsls	r1, r6, #25
 8006f1e:	d5fb      	bpl.n	8006f18 <_printf_i+0x1c8>
 8006f20:	8018      	strh	r0, [r3, #0]
 8006f22:	2300      	movs	r3, #0
 8006f24:	6123      	str	r3, [r4, #16]
 8006f26:	4616      	mov	r6, r2
 8006f28:	e7ba      	b.n	8006ea0 <_printf_i+0x150>
 8006f2a:	680b      	ldr	r3, [r1, #0]
 8006f2c:	1d1a      	adds	r2, r3, #4
 8006f2e:	600a      	str	r2, [r1, #0]
 8006f30:	681e      	ldr	r6, [r3, #0]
 8006f32:	6862      	ldr	r2, [r4, #4]
 8006f34:	2100      	movs	r1, #0
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7f9 f972 	bl	8000220 <memchr>
 8006f3c:	b108      	cbz	r0, 8006f42 <_printf_i+0x1f2>
 8006f3e:	1b80      	subs	r0, r0, r6
 8006f40:	6060      	str	r0, [r4, #4]
 8006f42:	6863      	ldr	r3, [r4, #4]
 8006f44:	6123      	str	r3, [r4, #16]
 8006f46:	2300      	movs	r3, #0
 8006f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f4c:	e7a8      	b.n	8006ea0 <_printf_i+0x150>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	4632      	mov	r2, r6
 8006f52:	4649      	mov	r1, r9
 8006f54:	4640      	mov	r0, r8
 8006f56:	47d0      	blx	sl
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d0ab      	beq.n	8006eb4 <_printf_i+0x164>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	079b      	lsls	r3, r3, #30
 8006f60:	d413      	bmi.n	8006f8a <_printf_i+0x23a>
 8006f62:	68e0      	ldr	r0, [r4, #12]
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	4298      	cmp	r0, r3
 8006f68:	bfb8      	it	lt
 8006f6a:	4618      	movlt	r0, r3
 8006f6c:	e7a4      	b.n	8006eb8 <_printf_i+0x168>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4632      	mov	r2, r6
 8006f72:	4649      	mov	r1, r9
 8006f74:	4640      	mov	r0, r8
 8006f76:	47d0      	blx	sl
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d09b      	beq.n	8006eb4 <_printf_i+0x164>
 8006f7c:	3501      	adds	r5, #1
 8006f7e:	68e3      	ldr	r3, [r4, #12]
 8006f80:	9903      	ldr	r1, [sp, #12]
 8006f82:	1a5b      	subs	r3, r3, r1
 8006f84:	42ab      	cmp	r3, r5
 8006f86:	dcf2      	bgt.n	8006f6e <_printf_i+0x21e>
 8006f88:	e7eb      	b.n	8006f62 <_printf_i+0x212>
 8006f8a:	2500      	movs	r5, #0
 8006f8c:	f104 0619 	add.w	r6, r4, #25
 8006f90:	e7f5      	b.n	8006f7e <_printf_i+0x22e>
 8006f92:	bf00      	nop
 8006f94:	08009956 	.word	0x08009956
 8006f98:	08009967 	.word	0x08009967

08006f9c <_sbrk_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d06      	ldr	r5, [pc, #24]	; (8006fb8 <_sbrk_r+0x1c>)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	f7fa fcde 	bl	8001968 <_sbrk>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_sbrk_r+0x1a>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_sbrk_r+0x1a>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20000620 	.word	0x20000620

08006fbc <siprintf>:
 8006fbc:	b40e      	push	{r1, r2, r3}
 8006fbe:	b500      	push	{lr}
 8006fc0:	b09c      	sub	sp, #112	; 0x70
 8006fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fc4:	9002      	str	r0, [sp, #8]
 8006fc6:	9006      	str	r0, [sp, #24]
 8006fc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fcc:	4809      	ldr	r0, [pc, #36]	; (8006ff4 <siprintf+0x38>)
 8006fce:	9107      	str	r1, [sp, #28]
 8006fd0:	9104      	str	r1, [sp, #16]
 8006fd2:	4909      	ldr	r1, [pc, #36]	; (8006ff8 <siprintf+0x3c>)
 8006fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd8:	9105      	str	r1, [sp, #20]
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	a902      	add	r1, sp, #8
 8006fe0:	f001 faa0 	bl	8008524 <_svfiprintf_r>
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	b01c      	add	sp, #112	; 0x70
 8006fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff0:	b003      	add	sp, #12
 8006ff2:	4770      	bx	lr
 8006ff4:	20000018 	.word	0x20000018
 8006ff8:	ffff0208 	.word	0xffff0208

08006ffc <strcat>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	4602      	mov	r2, r0
 8007000:	7814      	ldrb	r4, [r2, #0]
 8007002:	4613      	mov	r3, r2
 8007004:	3201      	adds	r2, #1
 8007006:	2c00      	cmp	r4, #0
 8007008:	d1fa      	bne.n	8007000 <strcat+0x4>
 800700a:	3b01      	subs	r3, #1
 800700c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007010:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007014:	2a00      	cmp	r2, #0
 8007016:	d1f9      	bne.n	800700c <strcat+0x10>
 8007018:	bd10      	pop	{r4, pc}

0800701a <strcpy>:
 800701a:	4603      	mov	r3, r0
 800701c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007020:	f803 2b01 	strb.w	r2, [r3], #1
 8007024:	2a00      	cmp	r2, #0
 8007026:	d1f9      	bne.n	800701c <strcpy+0x2>
 8007028:	4770      	bx	lr

0800702a <quorem>:
 800702a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702e:	6903      	ldr	r3, [r0, #16]
 8007030:	690c      	ldr	r4, [r1, #16]
 8007032:	42a3      	cmp	r3, r4
 8007034:	4607      	mov	r7, r0
 8007036:	f2c0 8081 	blt.w	800713c <quorem+0x112>
 800703a:	3c01      	subs	r4, #1
 800703c:	f101 0814 	add.w	r8, r1, #20
 8007040:	f100 0514 	add.w	r5, r0, #20
 8007044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800704e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007052:	3301      	adds	r3, #1
 8007054:	429a      	cmp	r2, r3
 8007056:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800705a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800705e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007062:	d331      	bcc.n	80070c8 <quorem+0x9e>
 8007064:	f04f 0e00 	mov.w	lr, #0
 8007068:	4640      	mov	r0, r8
 800706a:	46ac      	mov	ip, r5
 800706c:	46f2      	mov	sl, lr
 800706e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007072:	b293      	uxth	r3, r2
 8007074:	fb06 e303 	mla	r3, r6, r3, lr
 8007078:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800707c:	b29b      	uxth	r3, r3
 800707e:	ebaa 0303 	sub.w	r3, sl, r3
 8007082:	0c12      	lsrs	r2, r2, #16
 8007084:	f8dc a000 	ldr.w	sl, [ip]
 8007088:	fb06 e202 	mla	r2, r6, r2, lr
 800708c:	fa13 f38a 	uxtah	r3, r3, sl
 8007090:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007094:	fa1f fa82 	uxth.w	sl, r2
 8007098:	f8dc 2000 	ldr.w	r2, [ip]
 800709c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80070a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070aa:	4581      	cmp	r9, r0
 80070ac:	f84c 3b04 	str.w	r3, [ip], #4
 80070b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070b4:	d2db      	bcs.n	800706e <quorem+0x44>
 80070b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80070ba:	b92b      	cbnz	r3, 80070c8 <quorem+0x9e>
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	3b04      	subs	r3, #4
 80070c0:	429d      	cmp	r5, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	d32e      	bcc.n	8007124 <quorem+0xfa>
 80070c6:	613c      	str	r4, [r7, #16]
 80070c8:	4638      	mov	r0, r7
 80070ca:	f001 f8c1 	bl	8008250 <__mcmp>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	db24      	blt.n	800711c <quorem+0xf2>
 80070d2:	3601      	adds	r6, #1
 80070d4:	4628      	mov	r0, r5
 80070d6:	f04f 0c00 	mov.w	ip, #0
 80070da:	f858 2b04 	ldr.w	r2, [r8], #4
 80070de:	f8d0 e000 	ldr.w	lr, [r0]
 80070e2:	b293      	uxth	r3, r2
 80070e4:	ebac 0303 	sub.w	r3, ip, r3
 80070e8:	0c12      	lsrs	r2, r2, #16
 80070ea:	fa13 f38e 	uxtah	r3, r3, lr
 80070ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070fc:	45c1      	cmp	r9, r8
 80070fe:	f840 3b04 	str.w	r3, [r0], #4
 8007102:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007106:	d2e8      	bcs.n	80070da <quorem+0xb0>
 8007108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800710c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007110:	b922      	cbnz	r2, 800711c <quorem+0xf2>
 8007112:	3b04      	subs	r3, #4
 8007114:	429d      	cmp	r5, r3
 8007116:	461a      	mov	r2, r3
 8007118:	d30a      	bcc.n	8007130 <quorem+0x106>
 800711a:	613c      	str	r4, [r7, #16]
 800711c:	4630      	mov	r0, r6
 800711e:	b003      	add	sp, #12
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	3b04      	subs	r3, #4
 8007128:	2a00      	cmp	r2, #0
 800712a:	d1cc      	bne.n	80070c6 <quorem+0x9c>
 800712c:	3c01      	subs	r4, #1
 800712e:	e7c7      	b.n	80070c0 <quorem+0x96>
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	3b04      	subs	r3, #4
 8007134:	2a00      	cmp	r2, #0
 8007136:	d1f0      	bne.n	800711a <quorem+0xf0>
 8007138:	3c01      	subs	r4, #1
 800713a:	e7eb      	b.n	8007114 <quorem+0xea>
 800713c:	2000      	movs	r0, #0
 800713e:	e7ee      	b.n	800711e <quorem+0xf4>

08007140 <_dtoa_r>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b02 	vpush	{d8}
 8007148:	ec57 6b10 	vmov	r6, r7, d0
 800714c:	b095      	sub	sp, #84	; 0x54
 800714e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007150:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007154:	9105      	str	r1, [sp, #20]
 8007156:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800715a:	4604      	mov	r4, r0
 800715c:	9209      	str	r2, [sp, #36]	; 0x24
 800715e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007160:	b975      	cbnz	r5, 8007180 <_dtoa_r+0x40>
 8007162:	2010      	movs	r0, #16
 8007164:	f7ff f9ee 	bl	8006544 <malloc>
 8007168:	4602      	mov	r2, r0
 800716a:	6260      	str	r0, [r4, #36]	; 0x24
 800716c:	b920      	cbnz	r0, 8007178 <_dtoa_r+0x38>
 800716e:	4bb2      	ldr	r3, [pc, #712]	; (8007438 <_dtoa_r+0x2f8>)
 8007170:	21ea      	movs	r1, #234	; 0xea
 8007172:	48b2      	ldr	r0, [pc, #712]	; (800743c <_dtoa_r+0x2fc>)
 8007174:	f001 fad6 	bl	8008724 <__assert_func>
 8007178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800717c:	6005      	str	r5, [r0, #0]
 800717e:	60c5      	str	r5, [r0, #12]
 8007180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007182:	6819      	ldr	r1, [r3, #0]
 8007184:	b151      	cbz	r1, 800719c <_dtoa_r+0x5c>
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	604a      	str	r2, [r1, #4]
 800718a:	2301      	movs	r3, #1
 800718c:	4093      	lsls	r3, r2
 800718e:	608b      	str	r3, [r1, #8]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fe1f 	bl	8007dd4 <_Bfree>
 8007196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	1e3b      	subs	r3, r7, #0
 800719e:	bfb9      	ittee	lt
 80071a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071a4:	9303      	strlt	r3, [sp, #12]
 80071a6:	2300      	movge	r3, #0
 80071a8:	f8c8 3000 	strge.w	r3, [r8]
 80071ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80071b0:	4ba3      	ldr	r3, [pc, #652]	; (8007440 <_dtoa_r+0x300>)
 80071b2:	bfbc      	itt	lt
 80071b4:	2201      	movlt	r2, #1
 80071b6:	f8c8 2000 	strlt.w	r2, [r8]
 80071ba:	ea33 0309 	bics.w	r3, r3, r9
 80071be:	d11b      	bne.n	80071f8 <_dtoa_r+0xb8>
 80071c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071cc:	4333      	orrs	r3, r6
 80071ce:	f000 857a 	beq.w	8007cc6 <_dtoa_r+0xb86>
 80071d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d4:	b963      	cbnz	r3, 80071f0 <_dtoa_r+0xb0>
 80071d6:	4b9b      	ldr	r3, [pc, #620]	; (8007444 <_dtoa_r+0x304>)
 80071d8:	e024      	b.n	8007224 <_dtoa_r+0xe4>
 80071da:	4b9b      	ldr	r3, [pc, #620]	; (8007448 <_dtoa_r+0x308>)
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	9800      	ldr	r0, [sp, #0]
 80071e6:	b015      	add	sp, #84	; 0x54
 80071e8:	ecbd 8b02 	vpop	{d8}
 80071ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f0:	4b94      	ldr	r3, [pc, #592]	; (8007444 <_dtoa_r+0x304>)
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	3303      	adds	r3, #3
 80071f6:	e7f3      	b.n	80071e0 <_dtoa_r+0xa0>
 80071f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	ec51 0b17 	vmov	r0, r1, d7
 8007202:	2300      	movs	r3, #0
 8007204:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007208:	f7f9 fc7e 	bl	8000b08 <__aeabi_dcmpeq>
 800720c:	4680      	mov	r8, r0
 800720e:	b158      	cbz	r0, 8007228 <_dtoa_r+0xe8>
 8007210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007212:	2301      	movs	r3, #1
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8551 	beq.w	8007cc0 <_dtoa_r+0xb80>
 800721e:	488b      	ldr	r0, [pc, #556]	; (800744c <_dtoa_r+0x30c>)
 8007220:	6018      	str	r0, [r3, #0]
 8007222:	1e43      	subs	r3, r0, #1
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	e7dd      	b.n	80071e4 <_dtoa_r+0xa4>
 8007228:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800722c:	aa12      	add	r2, sp, #72	; 0x48
 800722e:	a913      	add	r1, sp, #76	; 0x4c
 8007230:	4620      	mov	r0, r4
 8007232:	f001 f8b1 	bl	8008398 <__d2b>
 8007236:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800723a:	4683      	mov	fp, r0
 800723c:	2d00      	cmp	r5, #0
 800723e:	d07c      	beq.n	800733a <_dtoa_r+0x1fa>
 8007240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007242:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800724a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800724e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800725a:	4b7d      	ldr	r3, [pc, #500]	; (8007450 <_dtoa_r+0x310>)
 800725c:	2200      	movs	r2, #0
 800725e:	4630      	mov	r0, r6
 8007260:	4639      	mov	r1, r7
 8007262:	f7f9 f831 	bl	80002c8 <__aeabi_dsub>
 8007266:	a36e      	add	r3, pc, #440	; (adr r3, 8007420 <_dtoa_r+0x2e0>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f9e4 	bl	8000638 <__aeabi_dmul>
 8007270:	a36d      	add	r3, pc, #436	; (adr r3, 8007428 <_dtoa_r+0x2e8>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f829 	bl	80002cc <__adddf3>
 800727a:	4606      	mov	r6, r0
 800727c:	4628      	mov	r0, r5
 800727e:	460f      	mov	r7, r1
 8007280:	f7f9 f970 	bl	8000564 <__aeabi_i2d>
 8007284:	a36a      	add	r3, pc, #424	; (adr r3, 8007430 <_dtoa_r+0x2f0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f9d5 	bl	8000638 <__aeabi_dmul>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4630      	mov	r0, r6
 8007294:	4639      	mov	r1, r7
 8007296:	f7f9 f819 	bl	80002cc <__adddf3>
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	f7f9 fc7b 	bl	8000b98 <__aeabi_d2iz>
 80072a2:	2200      	movs	r2, #0
 80072a4:	4682      	mov	sl, r0
 80072a6:	2300      	movs	r3, #0
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fc36 	bl	8000b1c <__aeabi_dcmplt>
 80072b0:	b148      	cbz	r0, 80072c6 <_dtoa_r+0x186>
 80072b2:	4650      	mov	r0, sl
 80072b4:	f7f9 f956 	bl	8000564 <__aeabi_i2d>
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	f7f9 fc24 	bl	8000b08 <__aeabi_dcmpeq>
 80072c0:	b908      	cbnz	r0, 80072c6 <_dtoa_r+0x186>
 80072c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c6:	f1ba 0f16 	cmp.w	sl, #22
 80072ca:	d854      	bhi.n	8007376 <_dtoa_r+0x236>
 80072cc:	4b61      	ldr	r3, [pc, #388]	; (8007454 <_dtoa_r+0x314>)
 80072ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072da:	f7f9 fc1f 	bl	8000b1c <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d04b      	beq.n	800737a <_dtoa_r+0x23a>
 80072e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072e6:	2300      	movs	r3, #0
 80072e8:	930e      	str	r3, [sp, #56]	; 0x38
 80072ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ec:	1b5d      	subs	r5, r3, r5
 80072ee:	1e6b      	subs	r3, r5, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	bf43      	ittte	mi
 80072f4:	2300      	movmi	r3, #0
 80072f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80072fa:	9304      	strmi	r3, [sp, #16]
 80072fc:	f04f 0800 	movpl.w	r8, #0
 8007300:	f1ba 0f00 	cmp.w	sl, #0
 8007304:	db3b      	blt.n	800737e <_dtoa_r+0x23e>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800730c:	4453      	add	r3, sl
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	2300      	movs	r3, #0
 8007312:	9306      	str	r3, [sp, #24]
 8007314:	9b05      	ldr	r3, [sp, #20]
 8007316:	2b09      	cmp	r3, #9
 8007318:	d869      	bhi.n	80073ee <_dtoa_r+0x2ae>
 800731a:	2b05      	cmp	r3, #5
 800731c:	bfc4      	itt	gt
 800731e:	3b04      	subgt	r3, #4
 8007320:	9305      	strgt	r3, [sp, #20]
 8007322:	9b05      	ldr	r3, [sp, #20]
 8007324:	f1a3 0302 	sub.w	r3, r3, #2
 8007328:	bfcc      	ite	gt
 800732a:	2500      	movgt	r5, #0
 800732c:	2501      	movle	r5, #1
 800732e:	2b03      	cmp	r3, #3
 8007330:	d869      	bhi.n	8007406 <_dtoa_r+0x2c6>
 8007332:	e8df f003 	tbb	[pc, r3]
 8007336:	4e2c      	.short	0x4e2c
 8007338:	5a4c      	.short	0x5a4c
 800733a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800733e:	441d      	add	r5, r3
 8007340:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007344:	2b20      	cmp	r3, #32
 8007346:	bfc1      	itttt	gt
 8007348:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800734c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007350:	fa09 f303 	lslgt.w	r3, r9, r3
 8007354:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007358:	bfda      	itte	le
 800735a:	f1c3 0320 	rsble	r3, r3, #32
 800735e:	fa06 f003 	lslle.w	r0, r6, r3
 8007362:	4318      	orrgt	r0, r3
 8007364:	f7f9 f8ee 	bl	8000544 <__aeabi_ui2d>
 8007368:	2301      	movs	r3, #1
 800736a:	4606      	mov	r6, r0
 800736c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007370:	3d01      	subs	r5, #1
 8007372:	9310      	str	r3, [sp, #64]	; 0x40
 8007374:	e771      	b.n	800725a <_dtoa_r+0x11a>
 8007376:	2301      	movs	r3, #1
 8007378:	e7b6      	b.n	80072e8 <_dtoa_r+0x1a8>
 800737a:	900e      	str	r0, [sp, #56]	; 0x38
 800737c:	e7b5      	b.n	80072ea <_dtoa_r+0x1aa>
 800737e:	f1ca 0300 	rsb	r3, sl, #0
 8007382:	9306      	str	r3, [sp, #24]
 8007384:	2300      	movs	r3, #0
 8007386:	eba8 080a 	sub.w	r8, r8, sl
 800738a:	930d      	str	r3, [sp, #52]	; 0x34
 800738c:	e7c2      	b.n	8007314 <_dtoa_r+0x1d4>
 800738e:	2300      	movs	r3, #0
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc39      	bgt.n	800740c <_dtoa_r+0x2cc>
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	f8cd 9004 	str.w	r9, [sp, #4]
 80073a0:	464b      	mov	r3, r9
 80073a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80073a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073a8:	2200      	movs	r2, #0
 80073aa:	6042      	str	r2, [r0, #4]
 80073ac:	2204      	movs	r2, #4
 80073ae:	f102 0614 	add.w	r6, r2, #20
 80073b2:	429e      	cmp	r6, r3
 80073b4:	6841      	ldr	r1, [r0, #4]
 80073b6:	d92f      	bls.n	8007418 <_dtoa_r+0x2d8>
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 fccb 	bl	8007d54 <_Balloc>
 80073be:	9000      	str	r0, [sp, #0]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d14b      	bne.n	800745c <_dtoa_r+0x31c>
 80073c4:	4b24      	ldr	r3, [pc, #144]	; (8007458 <_dtoa_r+0x318>)
 80073c6:	4602      	mov	r2, r0
 80073c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073cc:	e6d1      	b.n	8007172 <_dtoa_r+0x32>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7de      	b.n	8007390 <_dtoa_r+0x250>
 80073d2:	2300      	movs	r3, #0
 80073d4:	9308      	str	r3, [sp, #32]
 80073d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d8:	eb0a 0903 	add.w	r9, sl, r3
 80073dc:	f109 0301 	add.w	r3, r9, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	bfb8      	it	lt
 80073e6:	2301      	movlt	r3, #1
 80073e8:	e7dd      	b.n	80073a6 <_dtoa_r+0x266>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e7f2      	b.n	80073d4 <_dtoa_r+0x294>
 80073ee:	2501      	movs	r5, #1
 80073f0:	2300      	movs	r3, #0
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	9508      	str	r5, [sp, #32]
 80073f6:	f04f 39ff 	mov.w	r9, #4294967295
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007400:	2312      	movs	r3, #18
 8007402:	9209      	str	r2, [sp, #36]	; 0x24
 8007404:	e7cf      	b.n	80073a6 <_dtoa_r+0x266>
 8007406:	2301      	movs	r3, #1
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	e7f4      	b.n	80073f6 <_dtoa_r+0x2b6>
 800740c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007410:	f8cd 9004 	str.w	r9, [sp, #4]
 8007414:	464b      	mov	r3, r9
 8007416:	e7c6      	b.n	80073a6 <_dtoa_r+0x266>
 8007418:	3101      	adds	r1, #1
 800741a:	6041      	str	r1, [r0, #4]
 800741c:	0052      	lsls	r2, r2, #1
 800741e:	e7c6      	b.n	80073ae <_dtoa_r+0x26e>
 8007420:	636f4361 	.word	0x636f4361
 8007424:	3fd287a7 	.word	0x3fd287a7
 8007428:	8b60c8b3 	.word	0x8b60c8b3
 800742c:	3fc68a28 	.word	0x3fc68a28
 8007430:	509f79fb 	.word	0x509f79fb
 8007434:	3fd34413 	.word	0x3fd34413
 8007438:	08009985 	.word	0x08009985
 800743c:	0800999c 	.word	0x0800999c
 8007440:	7ff00000 	.word	0x7ff00000
 8007444:	08009981 	.word	0x08009981
 8007448:	08009978 	.word	0x08009978
 800744c:	08009955 	.word	0x08009955
 8007450:	3ff80000 	.word	0x3ff80000
 8007454:	08009a98 	.word	0x08009a98
 8007458:	080099fb 	.word	0x080099fb
 800745c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800745e:	9a00      	ldr	r2, [sp, #0]
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	2b0e      	cmp	r3, #14
 8007466:	f200 80ad 	bhi.w	80075c4 <_dtoa_r+0x484>
 800746a:	2d00      	cmp	r5, #0
 800746c:	f000 80aa 	beq.w	80075c4 <_dtoa_r+0x484>
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	dd36      	ble.n	80074e4 <_dtoa_r+0x3a4>
 8007476:	4ac3      	ldr	r2, [pc, #780]	; (8007784 <_dtoa_r+0x644>)
 8007478:	f00a 030f 	and.w	r3, sl, #15
 800747c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007480:	ed93 7b00 	vldr	d7, [r3]
 8007484:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007488:	ea4f 172a 	mov.w	r7, sl, asr #4
 800748c:	eeb0 8a47 	vmov.f32	s16, s14
 8007490:	eef0 8a67 	vmov.f32	s17, s15
 8007494:	d016      	beq.n	80074c4 <_dtoa_r+0x384>
 8007496:	4bbc      	ldr	r3, [pc, #752]	; (8007788 <_dtoa_r+0x648>)
 8007498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800749c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074a0:	f7f9 f9f4 	bl	800088c <__aeabi_ddiv>
 80074a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a8:	f007 070f 	and.w	r7, r7, #15
 80074ac:	2503      	movs	r5, #3
 80074ae:	4eb6      	ldr	r6, [pc, #728]	; (8007788 <_dtoa_r+0x648>)
 80074b0:	b957      	cbnz	r7, 80074c8 <_dtoa_r+0x388>
 80074b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b6:	ec53 2b18 	vmov	r2, r3, d8
 80074ba:	f7f9 f9e7 	bl	800088c <__aeabi_ddiv>
 80074be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c2:	e029      	b.n	8007518 <_dtoa_r+0x3d8>
 80074c4:	2502      	movs	r5, #2
 80074c6:	e7f2      	b.n	80074ae <_dtoa_r+0x36e>
 80074c8:	07f9      	lsls	r1, r7, #31
 80074ca:	d508      	bpl.n	80074de <_dtoa_r+0x39e>
 80074cc:	ec51 0b18 	vmov	r0, r1, d8
 80074d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074d4:	f7f9 f8b0 	bl	8000638 <__aeabi_dmul>
 80074d8:	ec41 0b18 	vmov	d8, r0, r1
 80074dc:	3501      	adds	r5, #1
 80074de:	107f      	asrs	r7, r7, #1
 80074e0:	3608      	adds	r6, #8
 80074e2:	e7e5      	b.n	80074b0 <_dtoa_r+0x370>
 80074e4:	f000 80a6 	beq.w	8007634 <_dtoa_r+0x4f4>
 80074e8:	f1ca 0600 	rsb	r6, sl, #0
 80074ec:	4ba5      	ldr	r3, [pc, #660]	; (8007784 <_dtoa_r+0x644>)
 80074ee:	4fa6      	ldr	r7, [pc, #664]	; (8007788 <_dtoa_r+0x648>)
 80074f0:	f006 020f 	and.w	r2, r6, #15
 80074f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007500:	f7f9 f89a 	bl	8000638 <__aeabi_dmul>
 8007504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007508:	1136      	asrs	r6, r6, #4
 800750a:	2300      	movs	r3, #0
 800750c:	2502      	movs	r5, #2
 800750e:	2e00      	cmp	r6, #0
 8007510:	f040 8085 	bne.w	800761e <_dtoa_r+0x4de>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1d2      	bne.n	80074be <_dtoa_r+0x37e>
 8007518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 808c 	beq.w	8007638 <_dtoa_r+0x4f8>
 8007520:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007524:	4b99      	ldr	r3, [pc, #612]	; (800778c <_dtoa_r+0x64c>)
 8007526:	2200      	movs	r2, #0
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f9 faf6 	bl	8000b1c <__aeabi_dcmplt>
 8007530:	2800      	cmp	r0, #0
 8007532:	f000 8081 	beq.w	8007638 <_dtoa_r+0x4f8>
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d07d      	beq.n	8007638 <_dtoa_r+0x4f8>
 800753c:	f1b9 0f00 	cmp.w	r9, #0
 8007540:	dd3c      	ble.n	80075bc <_dtoa_r+0x47c>
 8007542:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	2200      	movs	r2, #0
 800754a:	4b91      	ldr	r3, [pc, #580]	; (8007790 <_dtoa_r+0x650>)
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f9 f872 	bl	8000638 <__aeabi_dmul>
 8007554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007558:	3501      	adds	r5, #1
 800755a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800755e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007562:	4628      	mov	r0, r5
 8007564:	f7f8 fffe 	bl	8000564 <__aeabi_i2d>
 8007568:	4632      	mov	r2, r6
 800756a:	463b      	mov	r3, r7
 800756c:	f7f9 f864 	bl	8000638 <__aeabi_dmul>
 8007570:	4b88      	ldr	r3, [pc, #544]	; (8007794 <_dtoa_r+0x654>)
 8007572:	2200      	movs	r2, #0
 8007574:	f7f8 feaa 	bl	80002cc <__adddf3>
 8007578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800757c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	d15c      	bne.n	8007642 <_dtoa_r+0x502>
 8007588:	4b83      	ldr	r3, [pc, #524]	; (8007798 <_dtoa_r+0x658>)
 800758a:	2200      	movs	r2, #0
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f8 fe9a 	bl	80002c8 <__aeabi_dsub>
 8007594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007598:	4606      	mov	r6, r0
 800759a:	460f      	mov	r7, r1
 800759c:	f7f9 fadc 	bl	8000b58 <__aeabi_dcmpgt>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f040 8296 	bne.w	8007ad2 <_dtoa_r+0x992>
 80075a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075aa:	4630      	mov	r0, r6
 80075ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075b0:	4639      	mov	r1, r7
 80075b2:	f7f9 fab3 	bl	8000b1c <__aeabi_dcmplt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 8288 	bne.w	8007acc <_dtoa_r+0x98c>
 80075bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f2c0 8158 	blt.w	800787c <_dtoa_r+0x73c>
 80075cc:	f1ba 0f0e 	cmp.w	sl, #14
 80075d0:	f300 8154 	bgt.w	800787c <_dtoa_r+0x73c>
 80075d4:	4b6b      	ldr	r3, [pc, #428]	; (8007784 <_dtoa_r+0x644>)
 80075d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f280 80e3 	bge.w	80077ac <_dtoa_r+0x66c>
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f300 80df 	bgt.w	80077ac <_dtoa_r+0x66c>
 80075ee:	f040 826d 	bne.w	8007acc <_dtoa_r+0x98c>
 80075f2:	4b69      	ldr	r3, [pc, #420]	; (8007798 <_dtoa_r+0x658>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f9 f81d 	bl	8000638 <__aeabi_dmul>
 80075fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007602:	f7f9 fa9f 	bl	8000b44 <__aeabi_dcmpge>
 8007606:	9e01      	ldr	r6, [sp, #4]
 8007608:	4637      	mov	r7, r6
 800760a:	2800      	cmp	r0, #0
 800760c:	f040 8243 	bne.w	8007a96 <_dtoa_r+0x956>
 8007610:	9d00      	ldr	r5, [sp, #0]
 8007612:	2331      	movs	r3, #49	; 0x31
 8007614:	f805 3b01 	strb.w	r3, [r5], #1
 8007618:	f10a 0a01 	add.w	sl, sl, #1
 800761c:	e23f      	b.n	8007a9e <_dtoa_r+0x95e>
 800761e:	07f2      	lsls	r2, r6, #31
 8007620:	d505      	bpl.n	800762e <_dtoa_r+0x4ee>
 8007622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007626:	f7f9 f807 	bl	8000638 <__aeabi_dmul>
 800762a:	3501      	adds	r5, #1
 800762c:	2301      	movs	r3, #1
 800762e:	1076      	asrs	r6, r6, #1
 8007630:	3708      	adds	r7, #8
 8007632:	e76c      	b.n	800750e <_dtoa_r+0x3ce>
 8007634:	2502      	movs	r5, #2
 8007636:	e76f      	b.n	8007518 <_dtoa_r+0x3d8>
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	f8cd a01c 	str.w	sl, [sp, #28]
 800763e:	930c      	str	r3, [sp, #48]	; 0x30
 8007640:	e78d      	b.n	800755e <_dtoa_r+0x41e>
 8007642:	9900      	ldr	r1, [sp, #0]
 8007644:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007648:	4b4e      	ldr	r3, [pc, #312]	; (8007784 <_dtoa_r+0x644>)
 800764a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800764e:	4401      	add	r1, r0
 8007650:	9102      	str	r1, [sp, #8]
 8007652:	9908      	ldr	r1, [sp, #32]
 8007654:	eeb0 8a47 	vmov.f32	s16, s14
 8007658:	eef0 8a67 	vmov.f32	s17, s15
 800765c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007664:	2900      	cmp	r1, #0
 8007666:	d045      	beq.n	80076f4 <_dtoa_r+0x5b4>
 8007668:	494c      	ldr	r1, [pc, #304]	; (800779c <_dtoa_r+0x65c>)
 800766a:	2000      	movs	r0, #0
 800766c:	f7f9 f90e 	bl	800088c <__aeabi_ddiv>
 8007670:	ec53 2b18 	vmov	r2, r3, d8
 8007674:	f7f8 fe28 	bl	80002c8 <__aeabi_dsub>
 8007678:	9d00      	ldr	r5, [sp, #0]
 800767a:	ec41 0b18 	vmov	d8, r0, r1
 800767e:	4639      	mov	r1, r7
 8007680:	4630      	mov	r0, r6
 8007682:	f7f9 fa89 	bl	8000b98 <__aeabi_d2iz>
 8007686:	900c      	str	r0, [sp, #48]	; 0x30
 8007688:	f7f8 ff6c 	bl	8000564 <__aeabi_i2d>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f8 fe18 	bl	80002c8 <__aeabi_dsub>
 8007698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800769a:	3330      	adds	r3, #48	; 0x30
 800769c:	f805 3b01 	strb.w	r3, [r5], #1
 80076a0:	ec53 2b18 	vmov	r2, r3, d8
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	f7f9 fa38 	bl	8000b1c <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d165      	bne.n	800777c <_dtoa_r+0x63c>
 80076b0:	4632      	mov	r2, r6
 80076b2:	463b      	mov	r3, r7
 80076b4:	4935      	ldr	r1, [pc, #212]	; (800778c <_dtoa_r+0x64c>)
 80076b6:	2000      	movs	r0, #0
 80076b8:	f7f8 fe06 	bl	80002c8 <__aeabi_dsub>
 80076bc:	ec53 2b18 	vmov	r2, r3, d8
 80076c0:	f7f9 fa2c 	bl	8000b1c <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f040 80b9 	bne.w	800783c <_dtoa_r+0x6fc>
 80076ca:	9b02      	ldr	r3, [sp, #8]
 80076cc:	429d      	cmp	r5, r3
 80076ce:	f43f af75 	beq.w	80075bc <_dtoa_r+0x47c>
 80076d2:	4b2f      	ldr	r3, [pc, #188]	; (8007790 <_dtoa_r+0x650>)
 80076d4:	ec51 0b18 	vmov	r0, r1, d8
 80076d8:	2200      	movs	r2, #0
 80076da:	f7f8 ffad 	bl	8000638 <__aeabi_dmul>
 80076de:	4b2c      	ldr	r3, [pc, #176]	; (8007790 <_dtoa_r+0x650>)
 80076e0:	ec41 0b18 	vmov	d8, r0, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	4630      	mov	r0, r6
 80076e8:	4639      	mov	r1, r7
 80076ea:	f7f8 ffa5 	bl	8000638 <__aeabi_dmul>
 80076ee:	4606      	mov	r6, r0
 80076f0:	460f      	mov	r7, r1
 80076f2:	e7c4      	b.n	800767e <_dtoa_r+0x53e>
 80076f4:	ec51 0b17 	vmov	r0, r1, d7
 80076f8:	f7f8 ff9e 	bl	8000638 <__aeabi_dmul>
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	9d00      	ldr	r5, [sp, #0]
 8007700:	930c      	str	r3, [sp, #48]	; 0x30
 8007702:	ec41 0b18 	vmov	d8, r0, r1
 8007706:	4639      	mov	r1, r7
 8007708:	4630      	mov	r0, r6
 800770a:	f7f9 fa45 	bl	8000b98 <__aeabi_d2iz>
 800770e:	9011      	str	r0, [sp, #68]	; 0x44
 8007710:	f7f8 ff28 	bl	8000564 <__aeabi_i2d>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f8 fdd4 	bl	80002c8 <__aeabi_dsub>
 8007720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007722:	3330      	adds	r3, #48	; 0x30
 8007724:	f805 3b01 	strb.w	r3, [r5], #1
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	429d      	cmp	r5, r3
 800772c:	4606      	mov	r6, r0
 800772e:	460f      	mov	r7, r1
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	d134      	bne.n	80077a0 <_dtoa_r+0x660>
 8007736:	4b19      	ldr	r3, [pc, #100]	; (800779c <_dtoa_r+0x65c>)
 8007738:	ec51 0b18 	vmov	r0, r1, d8
 800773c:	f7f8 fdc6 	bl	80002cc <__adddf3>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4630      	mov	r0, r6
 8007746:	4639      	mov	r1, r7
 8007748:	f7f9 fa06 	bl	8000b58 <__aeabi_dcmpgt>
 800774c:	2800      	cmp	r0, #0
 800774e:	d175      	bne.n	800783c <_dtoa_r+0x6fc>
 8007750:	ec53 2b18 	vmov	r2, r3, d8
 8007754:	4911      	ldr	r1, [pc, #68]	; (800779c <_dtoa_r+0x65c>)
 8007756:	2000      	movs	r0, #0
 8007758:	f7f8 fdb6 	bl	80002c8 <__aeabi_dsub>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f9 f9da 	bl	8000b1c <__aeabi_dcmplt>
 8007768:	2800      	cmp	r0, #0
 800776a:	f43f af27 	beq.w	80075bc <_dtoa_r+0x47c>
 800776e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007770:	1e6b      	subs	r3, r5, #1
 8007772:	930c      	str	r3, [sp, #48]	; 0x30
 8007774:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007778:	2b30      	cmp	r3, #48	; 0x30
 800777a:	d0f8      	beq.n	800776e <_dtoa_r+0x62e>
 800777c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007780:	e04a      	b.n	8007818 <_dtoa_r+0x6d8>
 8007782:	bf00      	nop
 8007784:	08009a98 	.word	0x08009a98
 8007788:	08009a70 	.word	0x08009a70
 800778c:	3ff00000 	.word	0x3ff00000
 8007790:	40240000 	.word	0x40240000
 8007794:	401c0000 	.word	0x401c0000
 8007798:	40140000 	.word	0x40140000
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	4baf      	ldr	r3, [pc, #700]	; (8007a60 <_dtoa_r+0x920>)
 80077a2:	f7f8 ff49 	bl	8000638 <__aeabi_dmul>
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	e7ac      	b.n	8007706 <_dtoa_r+0x5c6>
 80077ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077b0:	9d00      	ldr	r5, [sp, #0]
 80077b2:	4642      	mov	r2, r8
 80077b4:	464b      	mov	r3, r9
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f9 f867 	bl	800088c <__aeabi_ddiv>
 80077be:	f7f9 f9eb 	bl	8000b98 <__aeabi_d2iz>
 80077c2:	9002      	str	r0, [sp, #8]
 80077c4:	f7f8 fece 	bl	8000564 <__aeabi_i2d>
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	f7f8 ff34 	bl	8000638 <__aeabi_dmul>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4630      	mov	r0, r6
 80077d6:	4639      	mov	r1, r7
 80077d8:	f7f8 fd76 	bl	80002c8 <__aeabi_dsub>
 80077dc:	9e02      	ldr	r6, [sp, #8]
 80077de:	9f01      	ldr	r7, [sp, #4]
 80077e0:	3630      	adds	r6, #48	; 0x30
 80077e2:	f805 6b01 	strb.w	r6, [r5], #1
 80077e6:	9e00      	ldr	r6, [sp, #0]
 80077e8:	1bae      	subs	r6, r5, r6
 80077ea:	42b7      	cmp	r7, r6
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	d137      	bne.n	8007862 <_dtoa_r+0x722>
 80077f2:	f7f8 fd6b 	bl	80002cc <__adddf3>
 80077f6:	4642      	mov	r2, r8
 80077f8:	464b      	mov	r3, r9
 80077fa:	4606      	mov	r6, r0
 80077fc:	460f      	mov	r7, r1
 80077fe:	f7f9 f9ab 	bl	8000b58 <__aeabi_dcmpgt>
 8007802:	b9c8      	cbnz	r0, 8007838 <_dtoa_r+0x6f8>
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	f7f9 f97c 	bl	8000b08 <__aeabi_dcmpeq>
 8007810:	b110      	cbz	r0, 8007818 <_dtoa_r+0x6d8>
 8007812:	9b02      	ldr	r3, [sp, #8]
 8007814:	07d9      	lsls	r1, r3, #31
 8007816:	d40f      	bmi.n	8007838 <_dtoa_r+0x6f8>
 8007818:	4620      	mov	r0, r4
 800781a:	4659      	mov	r1, fp
 800781c:	f000 fada 	bl	8007dd4 <_Bfree>
 8007820:	2300      	movs	r3, #0
 8007822:	702b      	strb	r3, [r5, #0]
 8007824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007826:	f10a 0001 	add.w	r0, sl, #1
 800782a:	6018      	str	r0, [r3, #0]
 800782c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800782e:	2b00      	cmp	r3, #0
 8007830:	f43f acd8 	beq.w	80071e4 <_dtoa_r+0xa4>
 8007834:	601d      	str	r5, [r3, #0]
 8007836:	e4d5      	b.n	80071e4 <_dtoa_r+0xa4>
 8007838:	f8cd a01c 	str.w	sl, [sp, #28]
 800783c:	462b      	mov	r3, r5
 800783e:	461d      	mov	r5, r3
 8007840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007844:	2a39      	cmp	r2, #57	; 0x39
 8007846:	d108      	bne.n	800785a <_dtoa_r+0x71a>
 8007848:	9a00      	ldr	r2, [sp, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d1f7      	bne.n	800783e <_dtoa_r+0x6fe>
 800784e:	9a07      	ldr	r2, [sp, #28]
 8007850:	9900      	ldr	r1, [sp, #0]
 8007852:	3201      	adds	r2, #1
 8007854:	9207      	str	r2, [sp, #28]
 8007856:	2230      	movs	r2, #48	; 0x30
 8007858:	700a      	strb	r2, [r1, #0]
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	3201      	adds	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e78c      	b.n	800777c <_dtoa_r+0x63c>
 8007862:	4b7f      	ldr	r3, [pc, #508]	; (8007a60 <_dtoa_r+0x920>)
 8007864:	2200      	movs	r2, #0
 8007866:	f7f8 fee7 	bl	8000638 <__aeabi_dmul>
 800786a:	2200      	movs	r2, #0
 800786c:	2300      	movs	r3, #0
 800786e:	4606      	mov	r6, r0
 8007870:	460f      	mov	r7, r1
 8007872:	f7f9 f949 	bl	8000b08 <__aeabi_dcmpeq>
 8007876:	2800      	cmp	r0, #0
 8007878:	d09b      	beq.n	80077b2 <_dtoa_r+0x672>
 800787a:	e7cd      	b.n	8007818 <_dtoa_r+0x6d8>
 800787c:	9a08      	ldr	r2, [sp, #32]
 800787e:	2a00      	cmp	r2, #0
 8007880:	f000 80c4 	beq.w	8007a0c <_dtoa_r+0x8cc>
 8007884:	9a05      	ldr	r2, [sp, #20]
 8007886:	2a01      	cmp	r2, #1
 8007888:	f300 80a8 	bgt.w	80079dc <_dtoa_r+0x89c>
 800788c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800788e:	2a00      	cmp	r2, #0
 8007890:	f000 80a0 	beq.w	80079d4 <_dtoa_r+0x894>
 8007894:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007898:	9e06      	ldr	r6, [sp, #24]
 800789a:	4645      	mov	r5, r8
 800789c:	9a04      	ldr	r2, [sp, #16]
 800789e:	2101      	movs	r1, #1
 80078a0:	441a      	add	r2, r3
 80078a2:	4620      	mov	r0, r4
 80078a4:	4498      	add	r8, r3
 80078a6:	9204      	str	r2, [sp, #16]
 80078a8:	f000 fb50 	bl	8007f4c <__i2b>
 80078ac:	4607      	mov	r7, r0
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	dd0b      	ble.n	80078ca <_dtoa_r+0x78a>
 80078b2:	9b04      	ldr	r3, [sp, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	dd08      	ble.n	80078ca <_dtoa_r+0x78a>
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	9a04      	ldr	r2, [sp, #16]
 80078bc:	bfa8      	it	ge
 80078be:	462b      	movge	r3, r5
 80078c0:	eba8 0803 	sub.w	r8, r8, r3
 80078c4:	1aed      	subs	r5, r5, r3
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	9304      	str	r3, [sp, #16]
 80078ca:	9b06      	ldr	r3, [sp, #24]
 80078cc:	b1fb      	cbz	r3, 800790e <_dtoa_r+0x7ce>
 80078ce:	9b08      	ldr	r3, [sp, #32]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 809f 	beq.w	8007a14 <_dtoa_r+0x8d4>
 80078d6:	2e00      	cmp	r6, #0
 80078d8:	dd11      	ble.n	80078fe <_dtoa_r+0x7be>
 80078da:	4639      	mov	r1, r7
 80078dc:	4632      	mov	r2, r6
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 fbf0 	bl	80080c4 <__pow5mult>
 80078e4:	465a      	mov	r2, fp
 80078e6:	4601      	mov	r1, r0
 80078e8:	4607      	mov	r7, r0
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 fb44 	bl	8007f78 <__multiply>
 80078f0:	4659      	mov	r1, fp
 80078f2:	9007      	str	r0, [sp, #28]
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fa6d 	bl	8007dd4 <_Bfree>
 80078fa:	9b07      	ldr	r3, [sp, #28]
 80078fc:	469b      	mov	fp, r3
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	1b9a      	subs	r2, r3, r6
 8007902:	d004      	beq.n	800790e <_dtoa_r+0x7ce>
 8007904:	4659      	mov	r1, fp
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fbdc 	bl	80080c4 <__pow5mult>
 800790c:	4683      	mov	fp, r0
 800790e:	2101      	movs	r1, #1
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fb1b 	bl	8007f4c <__i2b>
 8007916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007918:	2b00      	cmp	r3, #0
 800791a:	4606      	mov	r6, r0
 800791c:	dd7c      	ble.n	8007a18 <_dtoa_r+0x8d8>
 800791e:	461a      	mov	r2, r3
 8007920:	4601      	mov	r1, r0
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fbce 	bl	80080c4 <__pow5mult>
 8007928:	9b05      	ldr	r3, [sp, #20]
 800792a:	2b01      	cmp	r3, #1
 800792c:	4606      	mov	r6, r0
 800792e:	dd76      	ble.n	8007a1e <_dtoa_r+0x8de>
 8007930:	2300      	movs	r3, #0
 8007932:	9306      	str	r3, [sp, #24]
 8007934:	6933      	ldr	r3, [r6, #16]
 8007936:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800793a:	6918      	ldr	r0, [r3, #16]
 800793c:	f000 fab6 	bl	8007eac <__hi0bits>
 8007940:	f1c0 0020 	rsb	r0, r0, #32
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	4418      	add	r0, r3
 8007948:	f010 001f 	ands.w	r0, r0, #31
 800794c:	f000 8086 	beq.w	8007a5c <_dtoa_r+0x91c>
 8007950:	f1c0 0320 	rsb	r3, r0, #32
 8007954:	2b04      	cmp	r3, #4
 8007956:	dd7f      	ble.n	8007a58 <_dtoa_r+0x918>
 8007958:	f1c0 001c 	rsb	r0, r0, #28
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	4403      	add	r3, r0
 8007960:	4480      	add	r8, r0
 8007962:	4405      	add	r5, r0
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	f1b8 0f00 	cmp.w	r8, #0
 800796a:	dd05      	ble.n	8007978 <_dtoa_r+0x838>
 800796c:	4659      	mov	r1, fp
 800796e:	4642      	mov	r2, r8
 8007970:	4620      	mov	r0, r4
 8007972:	f000 fc01 	bl	8008178 <__lshift>
 8007976:	4683      	mov	fp, r0
 8007978:	9b04      	ldr	r3, [sp, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dd05      	ble.n	800798a <_dtoa_r+0x84a>
 800797e:	4631      	mov	r1, r6
 8007980:	461a      	mov	r2, r3
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fbf8 	bl	8008178 <__lshift>
 8007988:	4606      	mov	r6, r0
 800798a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d069      	beq.n	8007a64 <_dtoa_r+0x924>
 8007990:	4631      	mov	r1, r6
 8007992:	4658      	mov	r0, fp
 8007994:	f000 fc5c 	bl	8008250 <__mcmp>
 8007998:	2800      	cmp	r0, #0
 800799a:	da63      	bge.n	8007a64 <_dtoa_r+0x924>
 800799c:	2300      	movs	r3, #0
 800799e:	4659      	mov	r1, fp
 80079a0:	220a      	movs	r2, #10
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fa38 	bl	8007e18 <__multadd>
 80079a8:	9b08      	ldr	r3, [sp, #32]
 80079aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ae:	4683      	mov	fp, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 818f 	beq.w	8007cd4 <_dtoa_r+0xb94>
 80079b6:	4639      	mov	r1, r7
 80079b8:	2300      	movs	r3, #0
 80079ba:	220a      	movs	r2, #10
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fa2b 	bl	8007e18 <__multadd>
 80079c2:	f1b9 0f00 	cmp.w	r9, #0
 80079c6:	4607      	mov	r7, r0
 80079c8:	f300 808e 	bgt.w	8007ae8 <_dtoa_r+0x9a8>
 80079cc:	9b05      	ldr	r3, [sp, #20]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	dc50      	bgt.n	8007a74 <_dtoa_r+0x934>
 80079d2:	e089      	b.n	8007ae8 <_dtoa_r+0x9a8>
 80079d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079da:	e75d      	b.n	8007898 <_dtoa_r+0x758>
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	1e5e      	subs	r6, r3, #1
 80079e0:	9b06      	ldr	r3, [sp, #24]
 80079e2:	42b3      	cmp	r3, r6
 80079e4:	bfbf      	itttt	lt
 80079e6:	9b06      	ldrlt	r3, [sp, #24]
 80079e8:	9606      	strlt	r6, [sp, #24]
 80079ea:	1af2      	sublt	r2, r6, r3
 80079ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80079ee:	bfb6      	itet	lt
 80079f0:	189b      	addlt	r3, r3, r2
 80079f2:	1b9e      	subge	r6, r3, r6
 80079f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	bfb8      	it	lt
 80079fa:	2600      	movlt	r6, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bfb5      	itete	lt
 8007a00:	eba8 0503 	sublt.w	r5, r8, r3
 8007a04:	9b01      	ldrge	r3, [sp, #4]
 8007a06:	2300      	movlt	r3, #0
 8007a08:	4645      	movge	r5, r8
 8007a0a:	e747      	b.n	800789c <_dtoa_r+0x75c>
 8007a0c:	9e06      	ldr	r6, [sp, #24]
 8007a0e:	9f08      	ldr	r7, [sp, #32]
 8007a10:	4645      	mov	r5, r8
 8007a12:	e74c      	b.n	80078ae <_dtoa_r+0x76e>
 8007a14:	9a06      	ldr	r2, [sp, #24]
 8007a16:	e775      	b.n	8007904 <_dtoa_r+0x7c4>
 8007a18:	9b05      	ldr	r3, [sp, #20]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	dc18      	bgt.n	8007a50 <_dtoa_r+0x910>
 8007a1e:	9b02      	ldr	r3, [sp, #8]
 8007a20:	b9b3      	cbnz	r3, 8007a50 <_dtoa_r+0x910>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a28:	b9a3      	cbnz	r3, 8007a54 <_dtoa_r+0x914>
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a30:	0d1b      	lsrs	r3, r3, #20
 8007a32:	051b      	lsls	r3, r3, #20
 8007a34:	b12b      	cbz	r3, 8007a42 <_dtoa_r+0x902>
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	f108 0801 	add.w	r8, r8, #1
 8007a40:	2301      	movs	r3, #1
 8007a42:	9306      	str	r3, [sp, #24]
 8007a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f47f af74 	bne.w	8007934 <_dtoa_r+0x7f4>
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	e779      	b.n	8007944 <_dtoa_r+0x804>
 8007a50:	2300      	movs	r3, #0
 8007a52:	e7f6      	b.n	8007a42 <_dtoa_r+0x902>
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	e7f4      	b.n	8007a42 <_dtoa_r+0x902>
 8007a58:	d085      	beq.n	8007966 <_dtoa_r+0x826>
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	301c      	adds	r0, #28
 8007a5e:	e77d      	b.n	800795c <_dtoa_r+0x81c>
 8007a60:	40240000 	.word	0x40240000
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dc38      	bgt.n	8007adc <_dtoa_r+0x99c>
 8007a6a:	9b05      	ldr	r3, [sp, #20]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	dd35      	ble.n	8007adc <_dtoa_r+0x99c>
 8007a70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a74:	f1b9 0f00 	cmp.w	r9, #0
 8007a78:	d10d      	bne.n	8007a96 <_dtoa_r+0x956>
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	2205      	movs	r2, #5
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 f9c9 	bl	8007e18 <__multadd>
 8007a86:	4601      	mov	r1, r0
 8007a88:	4606      	mov	r6, r0
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 fbe0 	bl	8008250 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	f73f adbd 	bgt.w	8007610 <_dtoa_r+0x4d0>
 8007a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a98:	9d00      	ldr	r5, [sp, #0]
 8007a9a:	ea6f 0a03 	mvn.w	sl, r3
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 f995 	bl	8007dd4 <_Bfree>
 8007aaa:	2f00      	cmp	r7, #0
 8007aac:	f43f aeb4 	beq.w	8007818 <_dtoa_r+0x6d8>
 8007ab0:	f1b8 0f00 	cmp.w	r8, #0
 8007ab4:	d005      	beq.n	8007ac2 <_dtoa_r+0x982>
 8007ab6:	45b8      	cmp	r8, r7
 8007ab8:	d003      	beq.n	8007ac2 <_dtoa_r+0x982>
 8007aba:	4641      	mov	r1, r8
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 f989 	bl	8007dd4 <_Bfree>
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 f985 	bl	8007dd4 <_Bfree>
 8007aca:	e6a5      	b.n	8007818 <_dtoa_r+0x6d8>
 8007acc:	2600      	movs	r6, #0
 8007ace:	4637      	mov	r7, r6
 8007ad0:	e7e1      	b.n	8007a96 <_dtoa_r+0x956>
 8007ad2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ad4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ad8:	4637      	mov	r7, r6
 8007ada:	e599      	b.n	8007610 <_dtoa_r+0x4d0>
 8007adc:	9b08      	ldr	r3, [sp, #32]
 8007ade:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80fd 	beq.w	8007ce2 <_dtoa_r+0xba2>
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	dd05      	ble.n	8007af8 <_dtoa_r+0x9b8>
 8007aec:	4639      	mov	r1, r7
 8007aee:	462a      	mov	r2, r5
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fb41 	bl	8008178 <__lshift>
 8007af6:	4607      	mov	r7, r0
 8007af8:	9b06      	ldr	r3, [sp, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d05c      	beq.n	8007bb8 <_dtoa_r+0xa78>
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 f927 	bl	8007d54 <_Balloc>
 8007b06:	4605      	mov	r5, r0
 8007b08:	b928      	cbnz	r0, 8007b16 <_dtoa_r+0x9d6>
 8007b0a:	4b80      	ldr	r3, [pc, #512]	; (8007d0c <_dtoa_r+0xbcc>)
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b12:	f7ff bb2e 	b.w	8007172 <_dtoa_r+0x32>
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	3202      	adds	r2, #2
 8007b1a:	0092      	lsls	r2, r2, #2
 8007b1c:	f107 010c 	add.w	r1, r7, #12
 8007b20:	300c      	adds	r0, #12
 8007b22:	f000 f8fd 	bl	8007d20 <memcpy>
 8007b26:	2201      	movs	r2, #1
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fb24 	bl	8008178 <__lshift>
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	444b      	add	r3, r9
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	46b8      	mov	r8, r7
 8007b44:	9306      	str	r3, [sp, #24]
 8007b46:	4607      	mov	r7, r0
 8007b48:	9b01      	ldr	r3, [sp, #4]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	4658      	mov	r0, fp
 8007b50:	9302      	str	r3, [sp, #8]
 8007b52:	f7ff fa6a 	bl	800702a <quorem>
 8007b56:	4603      	mov	r3, r0
 8007b58:	3330      	adds	r3, #48	; 0x30
 8007b5a:	9004      	str	r0, [sp, #16]
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	4658      	mov	r0, fp
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	f000 fb75 	bl	8008250 <__mcmp>
 8007b66:	463a      	mov	r2, r7
 8007b68:	4681      	mov	r9, r0
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 fb8b 	bl	8008288 <__mdiff>
 8007b72:	68c2      	ldr	r2, [r0, #12]
 8007b74:	9b08      	ldr	r3, [sp, #32]
 8007b76:	4605      	mov	r5, r0
 8007b78:	bb02      	cbnz	r2, 8007bbc <_dtoa_r+0xa7c>
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	f000 fb67 	bl	8008250 <__mcmp>
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	4602      	mov	r2, r0
 8007b86:	4629      	mov	r1, r5
 8007b88:	4620      	mov	r0, r4
 8007b8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007b8e:	f000 f921 	bl	8007dd4 <_Bfree>
 8007b92:	9b05      	ldr	r3, [sp, #20]
 8007b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b96:	9d01      	ldr	r5, [sp, #4]
 8007b98:	ea43 0102 	orr.w	r1, r3, r2
 8007b9c:	9b06      	ldr	r3, [sp, #24]
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	d10d      	bne.n	8007bc0 <_dtoa_r+0xa80>
 8007ba4:	2b39      	cmp	r3, #57	; 0x39
 8007ba6:	d029      	beq.n	8007bfc <_dtoa_r+0xabc>
 8007ba8:	f1b9 0f00 	cmp.w	r9, #0
 8007bac:	dd01      	ble.n	8007bb2 <_dtoa_r+0xa72>
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	3331      	adds	r3, #49	; 0x31
 8007bb2:	9a02      	ldr	r2, [sp, #8]
 8007bb4:	7013      	strb	r3, [r2, #0]
 8007bb6:	e774      	b.n	8007aa2 <_dtoa_r+0x962>
 8007bb8:	4638      	mov	r0, r7
 8007bba:	e7b9      	b.n	8007b30 <_dtoa_r+0x9f0>
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	e7e2      	b.n	8007b86 <_dtoa_r+0xa46>
 8007bc0:	f1b9 0f00 	cmp.w	r9, #0
 8007bc4:	db06      	blt.n	8007bd4 <_dtoa_r+0xa94>
 8007bc6:	9905      	ldr	r1, [sp, #20]
 8007bc8:	ea41 0909 	orr.w	r9, r1, r9
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	ea59 0101 	orrs.w	r1, r9, r1
 8007bd2:	d120      	bne.n	8007c16 <_dtoa_r+0xad6>
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	ddec      	ble.n	8007bb2 <_dtoa_r+0xa72>
 8007bd8:	4659      	mov	r1, fp
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4620      	mov	r0, r4
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	f000 faca 	bl	8008178 <__lshift>
 8007be4:	4631      	mov	r1, r6
 8007be6:	4683      	mov	fp, r0
 8007be8:	f000 fb32 	bl	8008250 <__mcmp>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	dc02      	bgt.n	8007bf8 <_dtoa_r+0xab8>
 8007bf2:	d1de      	bne.n	8007bb2 <_dtoa_r+0xa72>
 8007bf4:	07da      	lsls	r2, r3, #31
 8007bf6:	d5dc      	bpl.n	8007bb2 <_dtoa_r+0xa72>
 8007bf8:	2b39      	cmp	r3, #57	; 0x39
 8007bfa:	d1d8      	bne.n	8007bae <_dtoa_r+0xa6e>
 8007bfc:	9a02      	ldr	r2, [sp, #8]
 8007bfe:	2339      	movs	r3, #57	; 0x39
 8007c00:	7013      	strb	r3, [r2, #0]
 8007c02:	462b      	mov	r3, r5
 8007c04:	461d      	mov	r5, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c0c:	2a39      	cmp	r2, #57	; 0x39
 8007c0e:	d050      	beq.n	8007cb2 <_dtoa_r+0xb72>
 8007c10:	3201      	adds	r2, #1
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e745      	b.n	8007aa2 <_dtoa_r+0x962>
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	dd03      	ble.n	8007c22 <_dtoa_r+0xae2>
 8007c1a:	2b39      	cmp	r3, #57	; 0x39
 8007c1c:	d0ee      	beq.n	8007bfc <_dtoa_r+0xabc>
 8007c1e:	3301      	adds	r3, #1
 8007c20:	e7c7      	b.n	8007bb2 <_dtoa_r+0xa72>
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	9907      	ldr	r1, [sp, #28]
 8007c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c2a:	428a      	cmp	r2, r1
 8007c2c:	d02a      	beq.n	8007c84 <_dtoa_r+0xb44>
 8007c2e:	4659      	mov	r1, fp
 8007c30:	2300      	movs	r3, #0
 8007c32:	220a      	movs	r2, #10
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f8ef 	bl	8007e18 <__multadd>
 8007c3a:	45b8      	cmp	r8, r7
 8007c3c:	4683      	mov	fp, r0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	f04f 020a 	mov.w	r2, #10
 8007c46:	4641      	mov	r1, r8
 8007c48:	4620      	mov	r0, r4
 8007c4a:	d107      	bne.n	8007c5c <_dtoa_r+0xb1c>
 8007c4c:	f000 f8e4 	bl	8007e18 <__multadd>
 8007c50:	4680      	mov	r8, r0
 8007c52:	4607      	mov	r7, r0
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	e775      	b.n	8007b48 <_dtoa_r+0xa08>
 8007c5c:	f000 f8dc 	bl	8007e18 <__multadd>
 8007c60:	4639      	mov	r1, r7
 8007c62:	4680      	mov	r8, r0
 8007c64:	2300      	movs	r3, #0
 8007c66:	220a      	movs	r2, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 f8d5 	bl	8007e18 <__multadd>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	e7f0      	b.n	8007c54 <_dtoa_r+0xb14>
 8007c72:	f1b9 0f00 	cmp.w	r9, #0
 8007c76:	9a00      	ldr	r2, [sp, #0]
 8007c78:	bfcc      	ite	gt
 8007c7a:	464d      	movgt	r5, r9
 8007c7c:	2501      	movle	r5, #1
 8007c7e:	4415      	add	r5, r2
 8007c80:	f04f 0800 	mov.w	r8, #0
 8007c84:	4659      	mov	r1, fp
 8007c86:	2201      	movs	r2, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	f000 fa74 	bl	8008178 <__lshift>
 8007c90:	4631      	mov	r1, r6
 8007c92:	4683      	mov	fp, r0
 8007c94:	f000 fadc 	bl	8008250 <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dcb2      	bgt.n	8007c02 <_dtoa_r+0xac2>
 8007c9c:	d102      	bne.n	8007ca4 <_dtoa_r+0xb64>
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	07db      	lsls	r3, r3, #31
 8007ca2:	d4ae      	bmi.n	8007c02 <_dtoa_r+0xac2>
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cac:	2a30      	cmp	r2, #48	; 0x30
 8007cae:	d0fa      	beq.n	8007ca6 <_dtoa_r+0xb66>
 8007cb0:	e6f7      	b.n	8007aa2 <_dtoa_r+0x962>
 8007cb2:	9a00      	ldr	r2, [sp, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d1a5      	bne.n	8007c04 <_dtoa_r+0xac4>
 8007cb8:	f10a 0a01 	add.w	sl, sl, #1
 8007cbc:	2331      	movs	r3, #49	; 0x31
 8007cbe:	e779      	b.n	8007bb4 <_dtoa_r+0xa74>
 8007cc0:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <_dtoa_r+0xbd0>)
 8007cc2:	f7ff baaf 	b.w	8007224 <_dtoa_r+0xe4>
 8007cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f47f aa86 	bne.w	80071da <_dtoa_r+0x9a>
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <_dtoa_r+0xbd4>)
 8007cd0:	f7ff baa8 	b.w	8007224 <_dtoa_r+0xe4>
 8007cd4:	f1b9 0f00 	cmp.w	r9, #0
 8007cd8:	dc03      	bgt.n	8007ce2 <_dtoa_r+0xba2>
 8007cda:	9b05      	ldr	r3, [sp, #20]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	f73f aec9 	bgt.w	8007a74 <_dtoa_r+0x934>
 8007ce2:	9d00      	ldr	r5, [sp, #0]
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f7ff f99f 	bl	800702a <quorem>
 8007cec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8007cf4:	9a00      	ldr	r2, [sp, #0]
 8007cf6:	1aaa      	subs	r2, r5, r2
 8007cf8:	4591      	cmp	r9, r2
 8007cfa:	ddba      	ble.n	8007c72 <_dtoa_r+0xb32>
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	2300      	movs	r3, #0
 8007d00:	220a      	movs	r2, #10
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 f888 	bl	8007e18 <__multadd>
 8007d08:	4683      	mov	fp, r0
 8007d0a:	e7eb      	b.n	8007ce4 <_dtoa_r+0xba4>
 8007d0c:	080099fb 	.word	0x080099fb
 8007d10:	08009954 	.word	0x08009954
 8007d14:	08009978 	.word	0x08009978

08007d18 <_localeconv_r>:
 8007d18:	4800      	ldr	r0, [pc, #0]	; (8007d1c <_localeconv_r+0x4>)
 8007d1a:	4770      	bx	lr
 8007d1c:	2000016c 	.word	0x2000016c

08007d20 <memcpy>:
 8007d20:	440a      	add	r2, r1
 8007d22:	4291      	cmp	r1, r2
 8007d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d28:	d100      	bne.n	8007d2c <memcpy+0xc>
 8007d2a:	4770      	bx	lr
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d36:	4291      	cmp	r1, r2
 8007d38:	d1f9      	bne.n	8007d2e <memcpy+0xe>
 8007d3a:	bd10      	pop	{r4, pc}

08007d3c <__malloc_lock>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__malloc_lock+0x8>)
 8007d3e:	f000 bd22 	b.w	8008786 <__retarget_lock_acquire_recursive>
 8007d42:	bf00      	nop
 8007d44:	20000628 	.word	0x20000628

08007d48 <__malloc_unlock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__malloc_unlock+0x8>)
 8007d4a:	f000 bd1d 	b.w	8008788 <__retarget_lock_release_recursive>
 8007d4e:	bf00      	nop
 8007d50:	20000628 	.word	0x20000628

08007d54 <_Balloc>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d58:	4604      	mov	r4, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	b976      	cbnz	r6, 8007d7c <_Balloc+0x28>
 8007d5e:	2010      	movs	r0, #16
 8007d60:	f7fe fbf0 	bl	8006544 <malloc>
 8007d64:	4602      	mov	r2, r0
 8007d66:	6260      	str	r0, [r4, #36]	; 0x24
 8007d68:	b920      	cbnz	r0, 8007d74 <_Balloc+0x20>
 8007d6a:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <_Balloc+0x78>)
 8007d6c:	4818      	ldr	r0, [pc, #96]	; (8007dd0 <_Balloc+0x7c>)
 8007d6e:	2166      	movs	r1, #102	; 0x66
 8007d70:	f000 fcd8 	bl	8008724 <__assert_func>
 8007d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d78:	6006      	str	r6, [r0, #0]
 8007d7a:	60c6      	str	r6, [r0, #12]
 8007d7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d7e:	68f3      	ldr	r3, [r6, #12]
 8007d80:	b183      	cbz	r3, 8007da4 <_Balloc+0x50>
 8007d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d8a:	b9b8      	cbnz	r0, 8007dbc <_Balloc+0x68>
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007d92:	1d72      	adds	r2, r6, #5
 8007d94:	0092      	lsls	r2, r2, #2
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 fb5a 	bl	8008450 <_calloc_r>
 8007d9c:	b160      	cbz	r0, 8007db8 <_Balloc+0x64>
 8007d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007da2:	e00e      	b.n	8007dc2 <_Balloc+0x6e>
 8007da4:	2221      	movs	r2, #33	; 0x21
 8007da6:	2104      	movs	r1, #4
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 fb51 	bl	8008450 <_calloc_r>
 8007dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007db0:	60f0      	str	r0, [r6, #12]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e4      	bne.n	8007d82 <_Balloc+0x2e>
 8007db8:	2000      	movs	r0, #0
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	6802      	ldr	r2, [r0, #0]
 8007dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dc8:	e7f7      	b.n	8007dba <_Balloc+0x66>
 8007dca:	bf00      	nop
 8007dcc:	08009985 	.word	0x08009985
 8007dd0:	08009a0c 	.word	0x08009a0c

08007dd4 <_Bfree>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dd8:	4605      	mov	r5, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	b976      	cbnz	r6, 8007dfc <_Bfree+0x28>
 8007dde:	2010      	movs	r0, #16
 8007de0:	f7fe fbb0 	bl	8006544 <malloc>
 8007de4:	4602      	mov	r2, r0
 8007de6:	6268      	str	r0, [r5, #36]	; 0x24
 8007de8:	b920      	cbnz	r0, 8007df4 <_Bfree+0x20>
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <_Bfree+0x3c>)
 8007dec:	4809      	ldr	r0, [pc, #36]	; (8007e14 <_Bfree+0x40>)
 8007dee:	218a      	movs	r1, #138	; 0x8a
 8007df0:	f000 fc98 	bl	8008724 <__assert_func>
 8007df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007df8:	6006      	str	r6, [r0, #0]
 8007dfa:	60c6      	str	r6, [r0, #12]
 8007dfc:	b13c      	cbz	r4, 8007e0e <_Bfree+0x3a>
 8007dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e00:	6862      	ldr	r2, [r4, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e08:	6021      	str	r1, [r4, #0]
 8007e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	08009985 	.word	0x08009985
 8007e14:	08009a0c 	.word	0x08009a0c

08007e18 <__multadd>:
 8007e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1c:	690e      	ldr	r6, [r1, #16]
 8007e1e:	4607      	mov	r7, r0
 8007e20:	4698      	mov	r8, r3
 8007e22:	460c      	mov	r4, r1
 8007e24:	f101 0014 	add.w	r0, r1, #20
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6805      	ldr	r5, [r0, #0]
 8007e2c:	b2a9      	uxth	r1, r5
 8007e2e:	fb02 8101 	mla	r1, r2, r1, r8
 8007e32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007e36:	0c2d      	lsrs	r5, r5, #16
 8007e38:	fb02 c505 	mla	r5, r2, r5, ip
 8007e3c:	b289      	uxth	r1, r1
 8007e3e:	3301      	adds	r3, #1
 8007e40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007e44:	429e      	cmp	r6, r3
 8007e46:	f840 1b04 	str.w	r1, [r0], #4
 8007e4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007e4e:	dcec      	bgt.n	8007e2a <__multadd+0x12>
 8007e50:	f1b8 0f00 	cmp.w	r8, #0
 8007e54:	d022      	beq.n	8007e9c <__multadd+0x84>
 8007e56:	68a3      	ldr	r3, [r4, #8]
 8007e58:	42b3      	cmp	r3, r6
 8007e5a:	dc19      	bgt.n	8007e90 <__multadd+0x78>
 8007e5c:	6861      	ldr	r1, [r4, #4]
 8007e5e:	4638      	mov	r0, r7
 8007e60:	3101      	adds	r1, #1
 8007e62:	f7ff ff77 	bl	8007d54 <_Balloc>
 8007e66:	4605      	mov	r5, r0
 8007e68:	b928      	cbnz	r0, 8007e76 <__multadd+0x5e>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <__multadd+0x8c>)
 8007e6e:	480e      	ldr	r0, [pc, #56]	; (8007ea8 <__multadd+0x90>)
 8007e70:	21b5      	movs	r1, #181	; 0xb5
 8007e72:	f000 fc57 	bl	8008724 <__assert_func>
 8007e76:	6922      	ldr	r2, [r4, #16]
 8007e78:	3202      	adds	r2, #2
 8007e7a:	f104 010c 	add.w	r1, r4, #12
 8007e7e:	0092      	lsls	r2, r2, #2
 8007e80:	300c      	adds	r0, #12
 8007e82:	f7ff ff4d 	bl	8007d20 <memcpy>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff ffa3 	bl	8007dd4 <_Bfree>
 8007e8e:	462c      	mov	r4, r5
 8007e90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007e94:	3601      	adds	r6, #1
 8007e96:	f8c3 8014 	str.w	r8, [r3, #20]
 8007e9a:	6126      	str	r6, [r4, #16]
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea2:	bf00      	nop
 8007ea4:	080099fb 	.word	0x080099fb
 8007ea8:	08009a0c 	.word	0x08009a0c

08007eac <__hi0bits>:
 8007eac:	0c03      	lsrs	r3, r0, #16
 8007eae:	041b      	lsls	r3, r3, #16
 8007eb0:	b9d3      	cbnz	r3, 8007ee8 <__hi0bits+0x3c>
 8007eb2:	0400      	lsls	r0, r0, #16
 8007eb4:	2310      	movs	r3, #16
 8007eb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007eba:	bf04      	itt	eq
 8007ebc:	0200      	lsleq	r0, r0, #8
 8007ebe:	3308      	addeq	r3, #8
 8007ec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ec4:	bf04      	itt	eq
 8007ec6:	0100      	lsleq	r0, r0, #4
 8007ec8:	3304      	addeq	r3, #4
 8007eca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ece:	bf04      	itt	eq
 8007ed0:	0080      	lsleq	r0, r0, #2
 8007ed2:	3302      	addeq	r3, #2
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	db05      	blt.n	8007ee4 <__hi0bits+0x38>
 8007ed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007edc:	f103 0301 	add.w	r3, r3, #1
 8007ee0:	bf08      	it	eq
 8007ee2:	2320      	moveq	r3, #32
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	4770      	bx	lr
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e7e4      	b.n	8007eb6 <__hi0bits+0xa>

08007eec <__lo0bits>:
 8007eec:	6803      	ldr	r3, [r0, #0]
 8007eee:	f013 0207 	ands.w	r2, r3, #7
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	d00b      	beq.n	8007f0e <__lo0bits+0x22>
 8007ef6:	07da      	lsls	r2, r3, #31
 8007ef8:	d424      	bmi.n	8007f44 <__lo0bits+0x58>
 8007efa:	0798      	lsls	r0, r3, #30
 8007efc:	bf49      	itett	mi
 8007efe:	085b      	lsrmi	r3, r3, #1
 8007f00:	089b      	lsrpl	r3, r3, #2
 8007f02:	2001      	movmi	r0, #1
 8007f04:	600b      	strmi	r3, [r1, #0]
 8007f06:	bf5c      	itt	pl
 8007f08:	600b      	strpl	r3, [r1, #0]
 8007f0a:	2002      	movpl	r0, #2
 8007f0c:	4770      	bx	lr
 8007f0e:	b298      	uxth	r0, r3
 8007f10:	b9b0      	cbnz	r0, 8007f40 <__lo0bits+0x54>
 8007f12:	0c1b      	lsrs	r3, r3, #16
 8007f14:	2010      	movs	r0, #16
 8007f16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f1a:	bf04      	itt	eq
 8007f1c:	0a1b      	lsreq	r3, r3, #8
 8007f1e:	3008      	addeq	r0, #8
 8007f20:	071a      	lsls	r2, r3, #28
 8007f22:	bf04      	itt	eq
 8007f24:	091b      	lsreq	r3, r3, #4
 8007f26:	3004      	addeq	r0, #4
 8007f28:	079a      	lsls	r2, r3, #30
 8007f2a:	bf04      	itt	eq
 8007f2c:	089b      	lsreq	r3, r3, #2
 8007f2e:	3002      	addeq	r0, #2
 8007f30:	07da      	lsls	r2, r3, #31
 8007f32:	d403      	bmi.n	8007f3c <__lo0bits+0x50>
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	f100 0001 	add.w	r0, r0, #1
 8007f3a:	d005      	beq.n	8007f48 <__lo0bits+0x5c>
 8007f3c:	600b      	str	r3, [r1, #0]
 8007f3e:	4770      	bx	lr
 8007f40:	4610      	mov	r0, r2
 8007f42:	e7e8      	b.n	8007f16 <__lo0bits+0x2a>
 8007f44:	2000      	movs	r0, #0
 8007f46:	4770      	bx	lr
 8007f48:	2020      	movs	r0, #32
 8007f4a:	4770      	bx	lr

08007f4c <__i2b>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	460c      	mov	r4, r1
 8007f50:	2101      	movs	r1, #1
 8007f52:	f7ff feff 	bl	8007d54 <_Balloc>
 8007f56:	4602      	mov	r2, r0
 8007f58:	b928      	cbnz	r0, 8007f66 <__i2b+0x1a>
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <__i2b+0x24>)
 8007f5c:	4805      	ldr	r0, [pc, #20]	; (8007f74 <__i2b+0x28>)
 8007f5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f62:	f000 fbdf 	bl	8008724 <__assert_func>
 8007f66:	2301      	movs	r3, #1
 8007f68:	6144      	str	r4, [r0, #20]
 8007f6a:	6103      	str	r3, [r0, #16]
 8007f6c:	bd10      	pop	{r4, pc}
 8007f6e:	bf00      	nop
 8007f70:	080099fb 	.word	0x080099fb
 8007f74:	08009a0c 	.word	0x08009a0c

08007f78 <__multiply>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	690a      	ldr	r2, [r1, #16]
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	bfb8      	it	lt
 8007f86:	460b      	movlt	r3, r1
 8007f88:	460d      	mov	r5, r1
 8007f8a:	bfbc      	itt	lt
 8007f8c:	4625      	movlt	r5, r4
 8007f8e:	461c      	movlt	r4, r3
 8007f90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f98:	68ab      	ldr	r3, [r5, #8]
 8007f9a:	6869      	ldr	r1, [r5, #4]
 8007f9c:	eb0a 0709 	add.w	r7, sl, r9
 8007fa0:	42bb      	cmp	r3, r7
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	bfb8      	it	lt
 8007fa6:	3101      	addlt	r1, #1
 8007fa8:	f7ff fed4 	bl	8007d54 <_Balloc>
 8007fac:	b930      	cbnz	r0, 8007fbc <__multiply+0x44>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b42      	ldr	r3, [pc, #264]	; (80080bc <__multiply+0x144>)
 8007fb2:	4843      	ldr	r0, [pc, #268]	; (80080c0 <__multiply+0x148>)
 8007fb4:	f240 115d 	movw	r1, #349	; 0x15d
 8007fb8:	f000 fbb4 	bl	8008724 <__assert_func>
 8007fbc:	f100 0614 	add.w	r6, r0, #20
 8007fc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007fc4:	4633      	mov	r3, r6
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	4543      	cmp	r3, r8
 8007fca:	d31e      	bcc.n	800800a <__multiply+0x92>
 8007fcc:	f105 0c14 	add.w	ip, r5, #20
 8007fd0:	f104 0314 	add.w	r3, r4, #20
 8007fd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007fd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007fdc:	9202      	str	r2, [sp, #8]
 8007fde:	ebac 0205 	sub.w	r2, ip, r5
 8007fe2:	3a15      	subs	r2, #21
 8007fe4:	f022 0203 	bic.w	r2, r2, #3
 8007fe8:	3204      	adds	r2, #4
 8007fea:	f105 0115 	add.w	r1, r5, #21
 8007fee:	458c      	cmp	ip, r1
 8007ff0:	bf38      	it	cc
 8007ff2:	2204      	movcc	r2, #4
 8007ff4:	9201      	str	r2, [sp, #4]
 8007ff6:	9a02      	ldr	r2, [sp, #8]
 8007ff8:	9303      	str	r3, [sp, #12]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d808      	bhi.n	8008010 <__multiply+0x98>
 8007ffe:	2f00      	cmp	r7, #0
 8008000:	dc55      	bgt.n	80080ae <__multiply+0x136>
 8008002:	6107      	str	r7, [r0, #16]
 8008004:	b005      	add	sp, #20
 8008006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800a:	f843 2b04 	str.w	r2, [r3], #4
 800800e:	e7db      	b.n	8007fc8 <__multiply+0x50>
 8008010:	f8b3 a000 	ldrh.w	sl, [r3]
 8008014:	f1ba 0f00 	cmp.w	sl, #0
 8008018:	d020      	beq.n	800805c <__multiply+0xe4>
 800801a:	f105 0e14 	add.w	lr, r5, #20
 800801e:	46b1      	mov	r9, r6
 8008020:	2200      	movs	r2, #0
 8008022:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008026:	f8d9 b000 	ldr.w	fp, [r9]
 800802a:	b2a1      	uxth	r1, r4
 800802c:	fa1f fb8b 	uxth.w	fp, fp
 8008030:	fb0a b101 	mla	r1, sl, r1, fp
 8008034:	4411      	add	r1, r2
 8008036:	f8d9 2000 	ldr.w	r2, [r9]
 800803a:	0c24      	lsrs	r4, r4, #16
 800803c:	0c12      	lsrs	r2, r2, #16
 800803e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008042:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008046:	b289      	uxth	r1, r1
 8008048:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800804c:	45f4      	cmp	ip, lr
 800804e:	f849 1b04 	str.w	r1, [r9], #4
 8008052:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008056:	d8e4      	bhi.n	8008022 <__multiply+0xaa>
 8008058:	9901      	ldr	r1, [sp, #4]
 800805a:	5072      	str	r2, [r6, r1]
 800805c:	9a03      	ldr	r2, [sp, #12]
 800805e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008062:	3304      	adds	r3, #4
 8008064:	f1b9 0f00 	cmp.w	r9, #0
 8008068:	d01f      	beq.n	80080aa <__multiply+0x132>
 800806a:	6834      	ldr	r4, [r6, #0]
 800806c:	f105 0114 	add.w	r1, r5, #20
 8008070:	46b6      	mov	lr, r6
 8008072:	f04f 0a00 	mov.w	sl, #0
 8008076:	880a      	ldrh	r2, [r1, #0]
 8008078:	f8be b002 	ldrh.w	fp, [lr, #2]
 800807c:	fb09 b202 	mla	r2, r9, r2, fp
 8008080:	4492      	add	sl, r2
 8008082:	b2a4      	uxth	r4, r4
 8008084:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008088:	f84e 4b04 	str.w	r4, [lr], #4
 800808c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008090:	f8be 2000 	ldrh.w	r2, [lr]
 8008094:	0c24      	lsrs	r4, r4, #16
 8008096:	fb09 2404 	mla	r4, r9, r4, r2
 800809a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800809e:	458c      	cmp	ip, r1
 80080a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80080a4:	d8e7      	bhi.n	8008076 <__multiply+0xfe>
 80080a6:	9a01      	ldr	r2, [sp, #4]
 80080a8:	50b4      	str	r4, [r6, r2]
 80080aa:	3604      	adds	r6, #4
 80080ac:	e7a3      	b.n	8007ff6 <__multiply+0x7e>
 80080ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1a5      	bne.n	8008002 <__multiply+0x8a>
 80080b6:	3f01      	subs	r7, #1
 80080b8:	e7a1      	b.n	8007ffe <__multiply+0x86>
 80080ba:	bf00      	nop
 80080bc:	080099fb 	.word	0x080099fb
 80080c0:	08009a0c 	.word	0x08009a0c

080080c4 <__pow5mult>:
 80080c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c8:	4615      	mov	r5, r2
 80080ca:	f012 0203 	ands.w	r2, r2, #3
 80080ce:	4606      	mov	r6, r0
 80080d0:	460f      	mov	r7, r1
 80080d2:	d007      	beq.n	80080e4 <__pow5mult+0x20>
 80080d4:	4c25      	ldr	r4, [pc, #148]	; (800816c <__pow5mult+0xa8>)
 80080d6:	3a01      	subs	r2, #1
 80080d8:	2300      	movs	r3, #0
 80080da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080de:	f7ff fe9b 	bl	8007e18 <__multadd>
 80080e2:	4607      	mov	r7, r0
 80080e4:	10ad      	asrs	r5, r5, #2
 80080e6:	d03d      	beq.n	8008164 <__pow5mult+0xa0>
 80080e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080ea:	b97c      	cbnz	r4, 800810c <__pow5mult+0x48>
 80080ec:	2010      	movs	r0, #16
 80080ee:	f7fe fa29 	bl	8006544 <malloc>
 80080f2:	4602      	mov	r2, r0
 80080f4:	6270      	str	r0, [r6, #36]	; 0x24
 80080f6:	b928      	cbnz	r0, 8008104 <__pow5mult+0x40>
 80080f8:	4b1d      	ldr	r3, [pc, #116]	; (8008170 <__pow5mult+0xac>)
 80080fa:	481e      	ldr	r0, [pc, #120]	; (8008174 <__pow5mult+0xb0>)
 80080fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008100:	f000 fb10 	bl	8008724 <__assert_func>
 8008104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008108:	6004      	str	r4, [r0, #0]
 800810a:	60c4      	str	r4, [r0, #12]
 800810c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008114:	b94c      	cbnz	r4, 800812a <__pow5mult+0x66>
 8008116:	f240 2171 	movw	r1, #625	; 0x271
 800811a:	4630      	mov	r0, r6
 800811c:	f7ff ff16 	bl	8007f4c <__i2b>
 8008120:	2300      	movs	r3, #0
 8008122:	f8c8 0008 	str.w	r0, [r8, #8]
 8008126:	4604      	mov	r4, r0
 8008128:	6003      	str	r3, [r0, #0]
 800812a:	f04f 0900 	mov.w	r9, #0
 800812e:	07eb      	lsls	r3, r5, #31
 8008130:	d50a      	bpl.n	8008148 <__pow5mult+0x84>
 8008132:	4639      	mov	r1, r7
 8008134:	4622      	mov	r2, r4
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ff1e 	bl	8007f78 <__multiply>
 800813c:	4639      	mov	r1, r7
 800813e:	4680      	mov	r8, r0
 8008140:	4630      	mov	r0, r6
 8008142:	f7ff fe47 	bl	8007dd4 <_Bfree>
 8008146:	4647      	mov	r7, r8
 8008148:	106d      	asrs	r5, r5, #1
 800814a:	d00b      	beq.n	8008164 <__pow5mult+0xa0>
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	b938      	cbnz	r0, 8008160 <__pow5mult+0x9c>
 8008150:	4622      	mov	r2, r4
 8008152:	4621      	mov	r1, r4
 8008154:	4630      	mov	r0, r6
 8008156:	f7ff ff0f 	bl	8007f78 <__multiply>
 800815a:	6020      	str	r0, [r4, #0]
 800815c:	f8c0 9000 	str.w	r9, [r0]
 8008160:	4604      	mov	r4, r0
 8008162:	e7e4      	b.n	800812e <__pow5mult+0x6a>
 8008164:	4638      	mov	r0, r7
 8008166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816a:	bf00      	nop
 800816c:	08009b60 	.word	0x08009b60
 8008170:	08009985 	.word	0x08009985
 8008174:	08009a0c 	.word	0x08009a0c

08008178 <__lshift>:
 8008178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800817c:	460c      	mov	r4, r1
 800817e:	6849      	ldr	r1, [r1, #4]
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	4607      	mov	r7, r0
 800818a:	4691      	mov	r9, r2
 800818c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008190:	f108 0601 	add.w	r6, r8, #1
 8008194:	42b3      	cmp	r3, r6
 8008196:	db0b      	blt.n	80081b0 <__lshift+0x38>
 8008198:	4638      	mov	r0, r7
 800819a:	f7ff fddb 	bl	8007d54 <_Balloc>
 800819e:	4605      	mov	r5, r0
 80081a0:	b948      	cbnz	r0, 80081b6 <__lshift+0x3e>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b28      	ldr	r3, [pc, #160]	; (8008248 <__lshift+0xd0>)
 80081a6:	4829      	ldr	r0, [pc, #164]	; (800824c <__lshift+0xd4>)
 80081a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80081ac:	f000 faba 	bl	8008724 <__assert_func>
 80081b0:	3101      	adds	r1, #1
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	e7ee      	b.n	8008194 <__lshift+0x1c>
 80081b6:	2300      	movs	r3, #0
 80081b8:	f100 0114 	add.w	r1, r0, #20
 80081bc:	f100 0210 	add.w	r2, r0, #16
 80081c0:	4618      	mov	r0, r3
 80081c2:	4553      	cmp	r3, sl
 80081c4:	db33      	blt.n	800822e <__lshift+0xb6>
 80081c6:	6920      	ldr	r0, [r4, #16]
 80081c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081cc:	f104 0314 	add.w	r3, r4, #20
 80081d0:	f019 091f 	ands.w	r9, r9, #31
 80081d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081dc:	d02b      	beq.n	8008236 <__lshift+0xbe>
 80081de:	f1c9 0e20 	rsb	lr, r9, #32
 80081e2:	468a      	mov	sl, r1
 80081e4:	2200      	movs	r2, #0
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	fa00 f009 	lsl.w	r0, r0, r9
 80081ec:	4302      	orrs	r2, r0
 80081ee:	f84a 2b04 	str.w	r2, [sl], #4
 80081f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f6:	459c      	cmp	ip, r3
 80081f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80081fc:	d8f3      	bhi.n	80081e6 <__lshift+0x6e>
 80081fe:	ebac 0304 	sub.w	r3, ip, r4
 8008202:	3b15      	subs	r3, #21
 8008204:	f023 0303 	bic.w	r3, r3, #3
 8008208:	3304      	adds	r3, #4
 800820a:	f104 0015 	add.w	r0, r4, #21
 800820e:	4584      	cmp	ip, r0
 8008210:	bf38      	it	cc
 8008212:	2304      	movcc	r3, #4
 8008214:	50ca      	str	r2, [r1, r3]
 8008216:	b10a      	cbz	r2, 800821c <__lshift+0xa4>
 8008218:	f108 0602 	add.w	r6, r8, #2
 800821c:	3e01      	subs	r6, #1
 800821e:	4638      	mov	r0, r7
 8008220:	612e      	str	r6, [r5, #16]
 8008222:	4621      	mov	r1, r4
 8008224:	f7ff fdd6 	bl	8007dd4 <_Bfree>
 8008228:	4628      	mov	r0, r5
 800822a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008232:	3301      	adds	r3, #1
 8008234:	e7c5      	b.n	80081c2 <__lshift+0x4a>
 8008236:	3904      	subs	r1, #4
 8008238:	f853 2b04 	ldr.w	r2, [r3], #4
 800823c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008240:	459c      	cmp	ip, r3
 8008242:	d8f9      	bhi.n	8008238 <__lshift+0xc0>
 8008244:	e7ea      	b.n	800821c <__lshift+0xa4>
 8008246:	bf00      	nop
 8008248:	080099fb 	.word	0x080099fb
 800824c:	08009a0c 	.word	0x08009a0c

08008250 <__mcmp>:
 8008250:	b530      	push	{r4, r5, lr}
 8008252:	6902      	ldr	r2, [r0, #16]
 8008254:	690c      	ldr	r4, [r1, #16]
 8008256:	1b12      	subs	r2, r2, r4
 8008258:	d10e      	bne.n	8008278 <__mcmp+0x28>
 800825a:	f100 0314 	add.w	r3, r0, #20
 800825e:	3114      	adds	r1, #20
 8008260:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008264:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008268:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800826c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008270:	42a5      	cmp	r5, r4
 8008272:	d003      	beq.n	800827c <__mcmp+0x2c>
 8008274:	d305      	bcc.n	8008282 <__mcmp+0x32>
 8008276:	2201      	movs	r2, #1
 8008278:	4610      	mov	r0, r2
 800827a:	bd30      	pop	{r4, r5, pc}
 800827c:	4283      	cmp	r3, r0
 800827e:	d3f3      	bcc.n	8008268 <__mcmp+0x18>
 8008280:	e7fa      	b.n	8008278 <__mcmp+0x28>
 8008282:	f04f 32ff 	mov.w	r2, #4294967295
 8008286:	e7f7      	b.n	8008278 <__mcmp+0x28>

08008288 <__mdiff>:
 8008288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	460c      	mov	r4, r1
 800828e:	4606      	mov	r6, r0
 8008290:	4611      	mov	r1, r2
 8008292:	4620      	mov	r0, r4
 8008294:	4617      	mov	r7, r2
 8008296:	f7ff ffdb 	bl	8008250 <__mcmp>
 800829a:	1e05      	subs	r5, r0, #0
 800829c:	d110      	bne.n	80082c0 <__mdiff+0x38>
 800829e:	4629      	mov	r1, r5
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7ff fd57 	bl	8007d54 <_Balloc>
 80082a6:	b930      	cbnz	r0, 80082b6 <__mdiff+0x2e>
 80082a8:	4b39      	ldr	r3, [pc, #228]	; (8008390 <__mdiff+0x108>)
 80082aa:	4602      	mov	r2, r0
 80082ac:	f240 2132 	movw	r1, #562	; 0x232
 80082b0:	4838      	ldr	r0, [pc, #224]	; (8008394 <__mdiff+0x10c>)
 80082b2:	f000 fa37 	bl	8008724 <__assert_func>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c0:	bfa4      	itt	ge
 80082c2:	463b      	movge	r3, r7
 80082c4:	4627      	movge	r7, r4
 80082c6:	4630      	mov	r0, r6
 80082c8:	6879      	ldr	r1, [r7, #4]
 80082ca:	bfa6      	itte	ge
 80082cc:	461c      	movge	r4, r3
 80082ce:	2500      	movge	r5, #0
 80082d0:	2501      	movlt	r5, #1
 80082d2:	f7ff fd3f 	bl	8007d54 <_Balloc>
 80082d6:	b920      	cbnz	r0, 80082e2 <__mdiff+0x5a>
 80082d8:	4b2d      	ldr	r3, [pc, #180]	; (8008390 <__mdiff+0x108>)
 80082da:	4602      	mov	r2, r0
 80082dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80082e0:	e7e6      	b.n	80082b0 <__mdiff+0x28>
 80082e2:	693e      	ldr	r6, [r7, #16]
 80082e4:	60c5      	str	r5, [r0, #12]
 80082e6:	6925      	ldr	r5, [r4, #16]
 80082e8:	f107 0114 	add.w	r1, r7, #20
 80082ec:	f104 0914 	add.w	r9, r4, #20
 80082f0:	f100 0e14 	add.w	lr, r0, #20
 80082f4:	f107 0210 	add.w	r2, r7, #16
 80082f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80082fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008300:	46f2      	mov	sl, lr
 8008302:	2700      	movs	r7, #0
 8008304:	f859 3b04 	ldr.w	r3, [r9], #4
 8008308:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800830c:	fa1f f883 	uxth.w	r8, r3
 8008310:	fa17 f78b 	uxtah	r7, r7, fp
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	eba7 0808 	sub.w	r8, r7, r8
 800831a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800831e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008322:	fa1f f888 	uxth.w	r8, r8
 8008326:	141f      	asrs	r7, r3, #16
 8008328:	454d      	cmp	r5, r9
 800832a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800832e:	f84a 3b04 	str.w	r3, [sl], #4
 8008332:	d8e7      	bhi.n	8008304 <__mdiff+0x7c>
 8008334:	1b2b      	subs	r3, r5, r4
 8008336:	3b15      	subs	r3, #21
 8008338:	f023 0303 	bic.w	r3, r3, #3
 800833c:	3304      	adds	r3, #4
 800833e:	3415      	adds	r4, #21
 8008340:	42a5      	cmp	r5, r4
 8008342:	bf38      	it	cc
 8008344:	2304      	movcc	r3, #4
 8008346:	4419      	add	r1, r3
 8008348:	4473      	add	r3, lr
 800834a:	469e      	mov	lr, r3
 800834c:	460d      	mov	r5, r1
 800834e:	4565      	cmp	r5, ip
 8008350:	d30e      	bcc.n	8008370 <__mdiff+0xe8>
 8008352:	f10c 0203 	add.w	r2, ip, #3
 8008356:	1a52      	subs	r2, r2, r1
 8008358:	f022 0203 	bic.w	r2, r2, #3
 800835c:	3903      	subs	r1, #3
 800835e:	458c      	cmp	ip, r1
 8008360:	bf38      	it	cc
 8008362:	2200      	movcc	r2, #0
 8008364:	441a      	add	r2, r3
 8008366:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800836a:	b17b      	cbz	r3, 800838c <__mdiff+0x104>
 800836c:	6106      	str	r6, [r0, #16]
 800836e:	e7a5      	b.n	80082bc <__mdiff+0x34>
 8008370:	f855 8b04 	ldr.w	r8, [r5], #4
 8008374:	fa17 f488 	uxtah	r4, r7, r8
 8008378:	1422      	asrs	r2, r4, #16
 800837a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800837e:	b2a4      	uxth	r4, r4
 8008380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008384:	f84e 4b04 	str.w	r4, [lr], #4
 8008388:	1417      	asrs	r7, r2, #16
 800838a:	e7e0      	b.n	800834e <__mdiff+0xc6>
 800838c:	3e01      	subs	r6, #1
 800838e:	e7ea      	b.n	8008366 <__mdiff+0xde>
 8008390:	080099fb 	.word	0x080099fb
 8008394:	08009a0c 	.word	0x08009a0c

08008398 <__d2b>:
 8008398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800839c:	4689      	mov	r9, r1
 800839e:	2101      	movs	r1, #1
 80083a0:	ec57 6b10 	vmov	r6, r7, d0
 80083a4:	4690      	mov	r8, r2
 80083a6:	f7ff fcd5 	bl	8007d54 <_Balloc>
 80083aa:	4604      	mov	r4, r0
 80083ac:	b930      	cbnz	r0, 80083bc <__d2b+0x24>
 80083ae:	4602      	mov	r2, r0
 80083b0:	4b25      	ldr	r3, [pc, #148]	; (8008448 <__d2b+0xb0>)
 80083b2:	4826      	ldr	r0, [pc, #152]	; (800844c <__d2b+0xb4>)
 80083b4:	f240 310a 	movw	r1, #778	; 0x30a
 80083b8:	f000 f9b4 	bl	8008724 <__assert_func>
 80083bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083c4:	bb35      	cbnz	r5, 8008414 <__d2b+0x7c>
 80083c6:	2e00      	cmp	r6, #0
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	d028      	beq.n	800841e <__d2b+0x86>
 80083cc:	4668      	mov	r0, sp
 80083ce:	9600      	str	r6, [sp, #0]
 80083d0:	f7ff fd8c 	bl	8007eec <__lo0bits>
 80083d4:	9900      	ldr	r1, [sp, #0]
 80083d6:	b300      	cbz	r0, 800841a <__d2b+0x82>
 80083d8:	9a01      	ldr	r2, [sp, #4]
 80083da:	f1c0 0320 	rsb	r3, r0, #32
 80083de:	fa02 f303 	lsl.w	r3, r2, r3
 80083e2:	430b      	orrs	r3, r1
 80083e4:	40c2      	lsrs	r2, r0
 80083e6:	6163      	str	r3, [r4, #20]
 80083e8:	9201      	str	r2, [sp, #4]
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	61a3      	str	r3, [r4, #24]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bf14      	ite	ne
 80083f2:	2202      	movne	r2, #2
 80083f4:	2201      	moveq	r2, #1
 80083f6:	6122      	str	r2, [r4, #16]
 80083f8:	b1d5      	cbz	r5, 8008430 <__d2b+0x98>
 80083fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083fe:	4405      	add	r5, r0
 8008400:	f8c9 5000 	str.w	r5, [r9]
 8008404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008408:	f8c8 0000 	str.w	r0, [r8]
 800840c:	4620      	mov	r0, r4
 800840e:	b003      	add	sp, #12
 8008410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008418:	e7d5      	b.n	80083c6 <__d2b+0x2e>
 800841a:	6161      	str	r1, [r4, #20]
 800841c:	e7e5      	b.n	80083ea <__d2b+0x52>
 800841e:	a801      	add	r0, sp, #4
 8008420:	f7ff fd64 	bl	8007eec <__lo0bits>
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	6163      	str	r3, [r4, #20]
 8008428:	2201      	movs	r2, #1
 800842a:	6122      	str	r2, [r4, #16]
 800842c:	3020      	adds	r0, #32
 800842e:	e7e3      	b.n	80083f8 <__d2b+0x60>
 8008430:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008438:	f8c9 0000 	str.w	r0, [r9]
 800843c:	6918      	ldr	r0, [r3, #16]
 800843e:	f7ff fd35 	bl	8007eac <__hi0bits>
 8008442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008446:	e7df      	b.n	8008408 <__d2b+0x70>
 8008448:	080099fb 	.word	0x080099fb
 800844c:	08009a0c 	.word	0x08009a0c

08008450 <_calloc_r>:
 8008450:	b513      	push	{r0, r1, r4, lr}
 8008452:	434a      	muls	r2, r1
 8008454:	4611      	mov	r1, r2
 8008456:	9201      	str	r2, [sp, #4]
 8008458:	f7fe f8dc 	bl	8006614 <_malloc_r>
 800845c:	4604      	mov	r4, r0
 800845e:	b118      	cbz	r0, 8008468 <_calloc_r+0x18>
 8008460:	9a01      	ldr	r2, [sp, #4]
 8008462:	2100      	movs	r1, #0
 8008464:	f7fe f87e 	bl	8006564 <memset>
 8008468:	4620      	mov	r0, r4
 800846a:	b002      	add	sp, #8
 800846c:	bd10      	pop	{r4, pc}

0800846e <__ssputs_r>:
 800846e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008472:	688e      	ldr	r6, [r1, #8]
 8008474:	429e      	cmp	r6, r3
 8008476:	4682      	mov	sl, r0
 8008478:	460c      	mov	r4, r1
 800847a:	4690      	mov	r8, r2
 800847c:	461f      	mov	r7, r3
 800847e:	d838      	bhi.n	80084f2 <__ssputs_r+0x84>
 8008480:	898a      	ldrh	r2, [r1, #12]
 8008482:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008486:	d032      	beq.n	80084ee <__ssputs_r+0x80>
 8008488:	6825      	ldr	r5, [r4, #0]
 800848a:	6909      	ldr	r1, [r1, #16]
 800848c:	eba5 0901 	sub.w	r9, r5, r1
 8008490:	6965      	ldr	r5, [r4, #20]
 8008492:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008496:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800849a:	3301      	adds	r3, #1
 800849c:	444b      	add	r3, r9
 800849e:	106d      	asrs	r5, r5, #1
 80084a0:	429d      	cmp	r5, r3
 80084a2:	bf38      	it	cc
 80084a4:	461d      	movcc	r5, r3
 80084a6:	0553      	lsls	r3, r2, #21
 80084a8:	d531      	bpl.n	800850e <__ssputs_r+0xa0>
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7fe f8b2 	bl	8006614 <_malloc_r>
 80084b0:	4606      	mov	r6, r0
 80084b2:	b950      	cbnz	r0, 80084ca <__ssputs_r+0x5c>
 80084b4:	230c      	movs	r3, #12
 80084b6:	f8ca 3000 	str.w	r3, [sl]
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	6921      	ldr	r1, [r4, #16]
 80084cc:	464a      	mov	r2, r9
 80084ce:	f7ff fc27 	bl	8007d20 <memcpy>
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	6126      	str	r6, [r4, #16]
 80084e0:	6165      	str	r5, [r4, #20]
 80084e2:	444e      	add	r6, r9
 80084e4:	eba5 0509 	sub.w	r5, r5, r9
 80084e8:	6026      	str	r6, [r4, #0]
 80084ea:	60a5      	str	r5, [r4, #8]
 80084ec:	463e      	mov	r6, r7
 80084ee:	42be      	cmp	r6, r7
 80084f0:	d900      	bls.n	80084f4 <__ssputs_r+0x86>
 80084f2:	463e      	mov	r6, r7
 80084f4:	4632      	mov	r2, r6
 80084f6:	6820      	ldr	r0, [r4, #0]
 80084f8:	4641      	mov	r1, r8
 80084fa:	f000 f958 	bl	80087ae <memmove>
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	6822      	ldr	r2, [r4, #0]
 8008502:	1b9b      	subs	r3, r3, r6
 8008504:	4432      	add	r2, r6
 8008506:	60a3      	str	r3, [r4, #8]
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	2000      	movs	r0, #0
 800850c:	e7db      	b.n	80084c6 <__ssputs_r+0x58>
 800850e:	462a      	mov	r2, r5
 8008510:	f000 f967 	bl	80087e2 <_realloc_r>
 8008514:	4606      	mov	r6, r0
 8008516:	2800      	cmp	r0, #0
 8008518:	d1e1      	bne.n	80084de <__ssputs_r+0x70>
 800851a:	6921      	ldr	r1, [r4, #16]
 800851c:	4650      	mov	r0, sl
 800851e:	f7fe f829 	bl	8006574 <_free_r>
 8008522:	e7c7      	b.n	80084b4 <__ssputs_r+0x46>

08008524 <_svfiprintf_r>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	4698      	mov	r8, r3
 800852a:	898b      	ldrh	r3, [r1, #12]
 800852c:	061b      	lsls	r3, r3, #24
 800852e:	b09d      	sub	sp, #116	; 0x74
 8008530:	4607      	mov	r7, r0
 8008532:	460d      	mov	r5, r1
 8008534:	4614      	mov	r4, r2
 8008536:	d50e      	bpl.n	8008556 <_svfiprintf_r+0x32>
 8008538:	690b      	ldr	r3, [r1, #16]
 800853a:	b963      	cbnz	r3, 8008556 <_svfiprintf_r+0x32>
 800853c:	2140      	movs	r1, #64	; 0x40
 800853e:	f7fe f869 	bl	8006614 <_malloc_r>
 8008542:	6028      	str	r0, [r5, #0]
 8008544:	6128      	str	r0, [r5, #16]
 8008546:	b920      	cbnz	r0, 8008552 <_svfiprintf_r+0x2e>
 8008548:	230c      	movs	r3, #12
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	e0d1      	b.n	80086f6 <_svfiprintf_r+0x1d2>
 8008552:	2340      	movs	r3, #64	; 0x40
 8008554:	616b      	str	r3, [r5, #20]
 8008556:	2300      	movs	r3, #0
 8008558:	9309      	str	r3, [sp, #36]	; 0x24
 800855a:	2320      	movs	r3, #32
 800855c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008560:	f8cd 800c 	str.w	r8, [sp, #12]
 8008564:	2330      	movs	r3, #48	; 0x30
 8008566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008710 <_svfiprintf_r+0x1ec>
 800856a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800856e:	f04f 0901 	mov.w	r9, #1
 8008572:	4623      	mov	r3, r4
 8008574:	469a      	mov	sl, r3
 8008576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800857a:	b10a      	cbz	r2, 8008580 <_svfiprintf_r+0x5c>
 800857c:	2a25      	cmp	r2, #37	; 0x25
 800857e:	d1f9      	bne.n	8008574 <_svfiprintf_r+0x50>
 8008580:	ebba 0b04 	subs.w	fp, sl, r4
 8008584:	d00b      	beq.n	800859e <_svfiprintf_r+0x7a>
 8008586:	465b      	mov	r3, fp
 8008588:	4622      	mov	r2, r4
 800858a:	4629      	mov	r1, r5
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff ff6e 	bl	800846e <__ssputs_r>
 8008592:	3001      	adds	r0, #1
 8008594:	f000 80aa 	beq.w	80086ec <_svfiprintf_r+0x1c8>
 8008598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800859a:	445a      	add	r2, fp
 800859c:	9209      	str	r2, [sp, #36]	; 0x24
 800859e:	f89a 3000 	ldrb.w	r3, [sl]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80a2 	beq.w	80086ec <_svfiprintf_r+0x1c8>
 80085a8:	2300      	movs	r3, #0
 80085aa:	f04f 32ff 	mov.w	r2, #4294967295
 80085ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b2:	f10a 0a01 	add.w	sl, sl, #1
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	9307      	str	r3, [sp, #28]
 80085ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085be:	931a      	str	r3, [sp, #104]	; 0x68
 80085c0:	4654      	mov	r4, sl
 80085c2:	2205      	movs	r2, #5
 80085c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c8:	4851      	ldr	r0, [pc, #324]	; (8008710 <_svfiprintf_r+0x1ec>)
 80085ca:	f7f7 fe29 	bl	8000220 <memchr>
 80085ce:	9a04      	ldr	r2, [sp, #16]
 80085d0:	b9d8      	cbnz	r0, 800860a <_svfiprintf_r+0xe6>
 80085d2:	06d0      	lsls	r0, r2, #27
 80085d4:	bf44      	itt	mi
 80085d6:	2320      	movmi	r3, #32
 80085d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085dc:	0711      	lsls	r1, r2, #28
 80085de:	bf44      	itt	mi
 80085e0:	232b      	movmi	r3, #43	; 0x2b
 80085e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085e6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ea:	2b2a      	cmp	r3, #42	; 0x2a
 80085ec:	d015      	beq.n	800861a <_svfiprintf_r+0xf6>
 80085ee:	9a07      	ldr	r2, [sp, #28]
 80085f0:	4654      	mov	r4, sl
 80085f2:	2000      	movs	r0, #0
 80085f4:	f04f 0c0a 	mov.w	ip, #10
 80085f8:	4621      	mov	r1, r4
 80085fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085fe:	3b30      	subs	r3, #48	; 0x30
 8008600:	2b09      	cmp	r3, #9
 8008602:	d94e      	bls.n	80086a2 <_svfiprintf_r+0x17e>
 8008604:	b1b0      	cbz	r0, 8008634 <_svfiprintf_r+0x110>
 8008606:	9207      	str	r2, [sp, #28]
 8008608:	e014      	b.n	8008634 <_svfiprintf_r+0x110>
 800860a:	eba0 0308 	sub.w	r3, r0, r8
 800860e:	fa09 f303 	lsl.w	r3, r9, r3
 8008612:	4313      	orrs	r3, r2
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	46a2      	mov	sl, r4
 8008618:	e7d2      	b.n	80085c0 <_svfiprintf_r+0x9c>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	1d19      	adds	r1, r3, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	9103      	str	r1, [sp, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	bfbb      	ittet	lt
 8008626:	425b      	neglt	r3, r3
 8008628:	f042 0202 	orrlt.w	r2, r2, #2
 800862c:	9307      	strge	r3, [sp, #28]
 800862e:	9307      	strlt	r3, [sp, #28]
 8008630:	bfb8      	it	lt
 8008632:	9204      	strlt	r2, [sp, #16]
 8008634:	7823      	ldrb	r3, [r4, #0]
 8008636:	2b2e      	cmp	r3, #46	; 0x2e
 8008638:	d10c      	bne.n	8008654 <_svfiprintf_r+0x130>
 800863a:	7863      	ldrb	r3, [r4, #1]
 800863c:	2b2a      	cmp	r3, #42	; 0x2a
 800863e:	d135      	bne.n	80086ac <_svfiprintf_r+0x188>
 8008640:	9b03      	ldr	r3, [sp, #12]
 8008642:	1d1a      	adds	r2, r3, #4
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	9203      	str	r2, [sp, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	bfb8      	it	lt
 800864c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008650:	3402      	adds	r4, #2
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008720 <_svfiprintf_r+0x1fc>
 8008658:	7821      	ldrb	r1, [r4, #0]
 800865a:	2203      	movs	r2, #3
 800865c:	4650      	mov	r0, sl
 800865e:	f7f7 fddf 	bl	8000220 <memchr>
 8008662:	b140      	cbz	r0, 8008676 <_svfiprintf_r+0x152>
 8008664:	2340      	movs	r3, #64	; 0x40
 8008666:	eba0 000a 	sub.w	r0, r0, sl
 800866a:	fa03 f000 	lsl.w	r0, r3, r0
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	4303      	orrs	r3, r0
 8008672:	3401      	adds	r4, #1
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867a:	4826      	ldr	r0, [pc, #152]	; (8008714 <_svfiprintf_r+0x1f0>)
 800867c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008680:	2206      	movs	r2, #6
 8008682:	f7f7 fdcd 	bl	8000220 <memchr>
 8008686:	2800      	cmp	r0, #0
 8008688:	d038      	beq.n	80086fc <_svfiprintf_r+0x1d8>
 800868a:	4b23      	ldr	r3, [pc, #140]	; (8008718 <_svfiprintf_r+0x1f4>)
 800868c:	bb1b      	cbnz	r3, 80086d6 <_svfiprintf_r+0x1b2>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	3307      	adds	r3, #7
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	3308      	adds	r3, #8
 8008698:	9303      	str	r3, [sp, #12]
 800869a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869c:	4433      	add	r3, r6
 800869e:	9309      	str	r3, [sp, #36]	; 0x24
 80086a0:	e767      	b.n	8008572 <_svfiprintf_r+0x4e>
 80086a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086a6:	460c      	mov	r4, r1
 80086a8:	2001      	movs	r0, #1
 80086aa:	e7a5      	b.n	80085f8 <_svfiprintf_r+0xd4>
 80086ac:	2300      	movs	r3, #0
 80086ae:	3401      	adds	r4, #1
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	4619      	mov	r1, r3
 80086b4:	f04f 0c0a 	mov.w	ip, #10
 80086b8:	4620      	mov	r0, r4
 80086ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086be:	3a30      	subs	r2, #48	; 0x30
 80086c0:	2a09      	cmp	r2, #9
 80086c2:	d903      	bls.n	80086cc <_svfiprintf_r+0x1a8>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0c5      	beq.n	8008654 <_svfiprintf_r+0x130>
 80086c8:	9105      	str	r1, [sp, #20]
 80086ca:	e7c3      	b.n	8008654 <_svfiprintf_r+0x130>
 80086cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80086d0:	4604      	mov	r4, r0
 80086d2:	2301      	movs	r3, #1
 80086d4:	e7f0      	b.n	80086b8 <_svfiprintf_r+0x194>
 80086d6:	ab03      	add	r3, sp, #12
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	462a      	mov	r2, r5
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <_svfiprintf_r+0x1f8>)
 80086de:	a904      	add	r1, sp, #16
 80086e0:	4638      	mov	r0, r7
 80086e2:	f7fe f891 	bl	8006808 <_printf_float>
 80086e6:	1c42      	adds	r2, r0, #1
 80086e8:	4606      	mov	r6, r0
 80086ea:	d1d6      	bne.n	800869a <_svfiprintf_r+0x176>
 80086ec:	89ab      	ldrh	r3, [r5, #12]
 80086ee:	065b      	lsls	r3, r3, #25
 80086f0:	f53f af2c 	bmi.w	800854c <_svfiprintf_r+0x28>
 80086f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086f6:	b01d      	add	sp, #116	; 0x74
 80086f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fc:	ab03      	add	r3, sp, #12
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	462a      	mov	r2, r5
 8008702:	4b06      	ldr	r3, [pc, #24]	; (800871c <_svfiprintf_r+0x1f8>)
 8008704:	a904      	add	r1, sp, #16
 8008706:	4638      	mov	r0, r7
 8008708:	f7fe fb22 	bl	8006d50 <_printf_i>
 800870c:	e7eb      	b.n	80086e6 <_svfiprintf_r+0x1c2>
 800870e:	bf00      	nop
 8008710:	08009b6c 	.word	0x08009b6c
 8008714:	08009b76 	.word	0x08009b76
 8008718:	08006809 	.word	0x08006809
 800871c:	0800846f 	.word	0x0800846f
 8008720:	08009b72 	.word	0x08009b72

08008724 <__assert_func>:
 8008724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008726:	4614      	mov	r4, r2
 8008728:	461a      	mov	r2, r3
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <__assert_func+0x2c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4605      	mov	r5, r0
 8008730:	68d8      	ldr	r0, [r3, #12]
 8008732:	b14c      	cbz	r4, 8008748 <__assert_func+0x24>
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <__assert_func+0x30>)
 8008736:	9100      	str	r1, [sp, #0]
 8008738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800873c:	4906      	ldr	r1, [pc, #24]	; (8008758 <__assert_func+0x34>)
 800873e:	462b      	mov	r3, r5
 8008740:	f000 f80e 	bl	8008760 <fiprintf>
 8008744:	f000 fa9a 	bl	8008c7c <abort>
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <__assert_func+0x38>)
 800874a:	461c      	mov	r4, r3
 800874c:	e7f3      	b.n	8008736 <__assert_func+0x12>
 800874e:	bf00      	nop
 8008750:	20000018 	.word	0x20000018
 8008754:	08009b7d 	.word	0x08009b7d
 8008758:	08009b8a 	.word	0x08009b8a
 800875c:	08009bb8 	.word	0x08009bb8

08008760 <fiprintf>:
 8008760:	b40e      	push	{r1, r2, r3}
 8008762:	b503      	push	{r0, r1, lr}
 8008764:	4601      	mov	r1, r0
 8008766:	ab03      	add	r3, sp, #12
 8008768:	4805      	ldr	r0, [pc, #20]	; (8008780 <fiprintf+0x20>)
 800876a:	f853 2b04 	ldr.w	r2, [r3], #4
 800876e:	6800      	ldr	r0, [r0, #0]
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	f000 f885 	bl	8008880 <_vfiprintf_r>
 8008776:	b002      	add	sp, #8
 8008778:	f85d eb04 	ldr.w	lr, [sp], #4
 800877c:	b003      	add	sp, #12
 800877e:	4770      	bx	lr
 8008780:	20000018 	.word	0x20000018

08008784 <__retarget_lock_init_recursive>:
 8008784:	4770      	bx	lr

08008786 <__retarget_lock_acquire_recursive>:
 8008786:	4770      	bx	lr

08008788 <__retarget_lock_release_recursive>:
 8008788:	4770      	bx	lr

0800878a <__ascii_mbtowc>:
 800878a:	b082      	sub	sp, #8
 800878c:	b901      	cbnz	r1, 8008790 <__ascii_mbtowc+0x6>
 800878e:	a901      	add	r1, sp, #4
 8008790:	b142      	cbz	r2, 80087a4 <__ascii_mbtowc+0x1a>
 8008792:	b14b      	cbz	r3, 80087a8 <__ascii_mbtowc+0x1e>
 8008794:	7813      	ldrb	r3, [r2, #0]
 8008796:	600b      	str	r3, [r1, #0]
 8008798:	7812      	ldrb	r2, [r2, #0]
 800879a:	1e10      	subs	r0, r2, #0
 800879c:	bf18      	it	ne
 800879e:	2001      	movne	r0, #1
 80087a0:	b002      	add	sp, #8
 80087a2:	4770      	bx	lr
 80087a4:	4610      	mov	r0, r2
 80087a6:	e7fb      	b.n	80087a0 <__ascii_mbtowc+0x16>
 80087a8:	f06f 0001 	mvn.w	r0, #1
 80087ac:	e7f8      	b.n	80087a0 <__ascii_mbtowc+0x16>

080087ae <memmove>:
 80087ae:	4288      	cmp	r0, r1
 80087b0:	b510      	push	{r4, lr}
 80087b2:	eb01 0402 	add.w	r4, r1, r2
 80087b6:	d902      	bls.n	80087be <memmove+0x10>
 80087b8:	4284      	cmp	r4, r0
 80087ba:	4623      	mov	r3, r4
 80087bc:	d807      	bhi.n	80087ce <memmove+0x20>
 80087be:	1e43      	subs	r3, r0, #1
 80087c0:	42a1      	cmp	r1, r4
 80087c2:	d008      	beq.n	80087d6 <memmove+0x28>
 80087c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087cc:	e7f8      	b.n	80087c0 <memmove+0x12>
 80087ce:	4402      	add	r2, r0
 80087d0:	4601      	mov	r1, r0
 80087d2:	428a      	cmp	r2, r1
 80087d4:	d100      	bne.n	80087d8 <memmove+0x2a>
 80087d6:	bd10      	pop	{r4, pc}
 80087d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087e0:	e7f7      	b.n	80087d2 <memmove+0x24>

080087e2 <_realloc_r>:
 80087e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e4:	4607      	mov	r7, r0
 80087e6:	4614      	mov	r4, r2
 80087e8:	460e      	mov	r6, r1
 80087ea:	b921      	cbnz	r1, 80087f6 <_realloc_r+0x14>
 80087ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087f0:	4611      	mov	r1, r2
 80087f2:	f7fd bf0f 	b.w	8006614 <_malloc_r>
 80087f6:	b922      	cbnz	r2, 8008802 <_realloc_r+0x20>
 80087f8:	f7fd febc 	bl	8006574 <_free_r>
 80087fc:	4625      	mov	r5, r4
 80087fe:	4628      	mov	r0, r5
 8008800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008802:	f000 fc5f 	bl	80090c4 <_malloc_usable_size_r>
 8008806:	42a0      	cmp	r0, r4
 8008808:	d20f      	bcs.n	800882a <_realloc_r+0x48>
 800880a:	4621      	mov	r1, r4
 800880c:	4638      	mov	r0, r7
 800880e:	f7fd ff01 	bl	8006614 <_malloc_r>
 8008812:	4605      	mov	r5, r0
 8008814:	2800      	cmp	r0, #0
 8008816:	d0f2      	beq.n	80087fe <_realloc_r+0x1c>
 8008818:	4631      	mov	r1, r6
 800881a:	4622      	mov	r2, r4
 800881c:	f7ff fa80 	bl	8007d20 <memcpy>
 8008820:	4631      	mov	r1, r6
 8008822:	4638      	mov	r0, r7
 8008824:	f7fd fea6 	bl	8006574 <_free_r>
 8008828:	e7e9      	b.n	80087fe <_realloc_r+0x1c>
 800882a:	4635      	mov	r5, r6
 800882c:	e7e7      	b.n	80087fe <_realloc_r+0x1c>

0800882e <__sfputc_r>:
 800882e:	6893      	ldr	r3, [r2, #8]
 8008830:	3b01      	subs	r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	b410      	push	{r4}
 8008836:	6093      	str	r3, [r2, #8]
 8008838:	da08      	bge.n	800884c <__sfputc_r+0x1e>
 800883a:	6994      	ldr	r4, [r2, #24]
 800883c:	42a3      	cmp	r3, r4
 800883e:	db01      	blt.n	8008844 <__sfputc_r+0x16>
 8008840:	290a      	cmp	r1, #10
 8008842:	d103      	bne.n	800884c <__sfputc_r+0x1e>
 8008844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008848:	f000 b94a 	b.w	8008ae0 <__swbuf_r>
 800884c:	6813      	ldr	r3, [r2, #0]
 800884e:	1c58      	adds	r0, r3, #1
 8008850:	6010      	str	r0, [r2, #0]
 8008852:	7019      	strb	r1, [r3, #0]
 8008854:	4608      	mov	r0, r1
 8008856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800885a:	4770      	bx	lr

0800885c <__sfputs_r>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	4614      	mov	r4, r2
 8008864:	18d5      	adds	r5, r2, r3
 8008866:	42ac      	cmp	r4, r5
 8008868:	d101      	bne.n	800886e <__sfputs_r+0x12>
 800886a:	2000      	movs	r0, #0
 800886c:	e007      	b.n	800887e <__sfputs_r+0x22>
 800886e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008872:	463a      	mov	r2, r7
 8008874:	4630      	mov	r0, r6
 8008876:	f7ff ffda 	bl	800882e <__sfputc_r>
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	d1f3      	bne.n	8008866 <__sfputs_r+0xa>
 800887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008880 <_vfiprintf_r>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	460d      	mov	r5, r1
 8008886:	b09d      	sub	sp, #116	; 0x74
 8008888:	4614      	mov	r4, r2
 800888a:	4698      	mov	r8, r3
 800888c:	4606      	mov	r6, r0
 800888e:	b118      	cbz	r0, 8008898 <_vfiprintf_r+0x18>
 8008890:	6983      	ldr	r3, [r0, #24]
 8008892:	b90b      	cbnz	r3, 8008898 <_vfiprintf_r+0x18>
 8008894:	f000 fb14 	bl	8008ec0 <__sinit>
 8008898:	4b89      	ldr	r3, [pc, #548]	; (8008ac0 <_vfiprintf_r+0x240>)
 800889a:	429d      	cmp	r5, r3
 800889c:	d11b      	bne.n	80088d6 <_vfiprintf_r+0x56>
 800889e:	6875      	ldr	r5, [r6, #4]
 80088a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088a2:	07d9      	lsls	r1, r3, #31
 80088a4:	d405      	bmi.n	80088b2 <_vfiprintf_r+0x32>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	059a      	lsls	r2, r3, #22
 80088aa:	d402      	bmi.n	80088b2 <_vfiprintf_r+0x32>
 80088ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ae:	f7ff ff6a 	bl	8008786 <__retarget_lock_acquire_recursive>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	071b      	lsls	r3, r3, #28
 80088b6:	d501      	bpl.n	80088bc <_vfiprintf_r+0x3c>
 80088b8:	692b      	ldr	r3, [r5, #16]
 80088ba:	b9eb      	cbnz	r3, 80088f8 <_vfiprintf_r+0x78>
 80088bc:	4629      	mov	r1, r5
 80088be:	4630      	mov	r0, r6
 80088c0:	f000 f96e 	bl	8008ba0 <__swsetup_r>
 80088c4:	b1c0      	cbz	r0, 80088f8 <_vfiprintf_r+0x78>
 80088c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088c8:	07dc      	lsls	r4, r3, #31
 80088ca:	d50e      	bpl.n	80088ea <_vfiprintf_r+0x6a>
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	b01d      	add	sp, #116	; 0x74
 80088d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	4b7b      	ldr	r3, [pc, #492]	; (8008ac4 <_vfiprintf_r+0x244>)
 80088d8:	429d      	cmp	r5, r3
 80088da:	d101      	bne.n	80088e0 <_vfiprintf_r+0x60>
 80088dc:	68b5      	ldr	r5, [r6, #8]
 80088de:	e7df      	b.n	80088a0 <_vfiprintf_r+0x20>
 80088e0:	4b79      	ldr	r3, [pc, #484]	; (8008ac8 <_vfiprintf_r+0x248>)
 80088e2:	429d      	cmp	r5, r3
 80088e4:	bf08      	it	eq
 80088e6:	68f5      	ldreq	r5, [r6, #12]
 80088e8:	e7da      	b.n	80088a0 <_vfiprintf_r+0x20>
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	0598      	lsls	r0, r3, #22
 80088ee:	d4ed      	bmi.n	80088cc <_vfiprintf_r+0x4c>
 80088f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088f2:	f7ff ff49 	bl	8008788 <__retarget_lock_release_recursive>
 80088f6:	e7e9      	b.n	80088cc <_vfiprintf_r+0x4c>
 80088f8:	2300      	movs	r3, #0
 80088fa:	9309      	str	r3, [sp, #36]	; 0x24
 80088fc:	2320      	movs	r3, #32
 80088fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008902:	f8cd 800c 	str.w	r8, [sp, #12]
 8008906:	2330      	movs	r3, #48	; 0x30
 8008908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008acc <_vfiprintf_r+0x24c>
 800890c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008910:	f04f 0901 	mov.w	r9, #1
 8008914:	4623      	mov	r3, r4
 8008916:	469a      	mov	sl, r3
 8008918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800891c:	b10a      	cbz	r2, 8008922 <_vfiprintf_r+0xa2>
 800891e:	2a25      	cmp	r2, #37	; 0x25
 8008920:	d1f9      	bne.n	8008916 <_vfiprintf_r+0x96>
 8008922:	ebba 0b04 	subs.w	fp, sl, r4
 8008926:	d00b      	beq.n	8008940 <_vfiprintf_r+0xc0>
 8008928:	465b      	mov	r3, fp
 800892a:	4622      	mov	r2, r4
 800892c:	4629      	mov	r1, r5
 800892e:	4630      	mov	r0, r6
 8008930:	f7ff ff94 	bl	800885c <__sfputs_r>
 8008934:	3001      	adds	r0, #1
 8008936:	f000 80aa 	beq.w	8008a8e <_vfiprintf_r+0x20e>
 800893a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800893c:	445a      	add	r2, fp
 800893e:	9209      	str	r2, [sp, #36]	; 0x24
 8008940:	f89a 3000 	ldrb.w	r3, [sl]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 80a2 	beq.w	8008a8e <_vfiprintf_r+0x20e>
 800894a:	2300      	movs	r3, #0
 800894c:	f04f 32ff 	mov.w	r2, #4294967295
 8008950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008954:	f10a 0a01 	add.w	sl, sl, #1
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	9307      	str	r3, [sp, #28]
 800895c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008960:	931a      	str	r3, [sp, #104]	; 0x68
 8008962:	4654      	mov	r4, sl
 8008964:	2205      	movs	r2, #5
 8008966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896a:	4858      	ldr	r0, [pc, #352]	; (8008acc <_vfiprintf_r+0x24c>)
 800896c:	f7f7 fc58 	bl	8000220 <memchr>
 8008970:	9a04      	ldr	r2, [sp, #16]
 8008972:	b9d8      	cbnz	r0, 80089ac <_vfiprintf_r+0x12c>
 8008974:	06d1      	lsls	r1, r2, #27
 8008976:	bf44      	itt	mi
 8008978:	2320      	movmi	r3, #32
 800897a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800897e:	0713      	lsls	r3, r2, #28
 8008980:	bf44      	itt	mi
 8008982:	232b      	movmi	r3, #43	; 0x2b
 8008984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008988:	f89a 3000 	ldrb.w	r3, [sl]
 800898c:	2b2a      	cmp	r3, #42	; 0x2a
 800898e:	d015      	beq.n	80089bc <_vfiprintf_r+0x13c>
 8008990:	9a07      	ldr	r2, [sp, #28]
 8008992:	4654      	mov	r4, sl
 8008994:	2000      	movs	r0, #0
 8008996:	f04f 0c0a 	mov.w	ip, #10
 800899a:	4621      	mov	r1, r4
 800899c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089a0:	3b30      	subs	r3, #48	; 0x30
 80089a2:	2b09      	cmp	r3, #9
 80089a4:	d94e      	bls.n	8008a44 <_vfiprintf_r+0x1c4>
 80089a6:	b1b0      	cbz	r0, 80089d6 <_vfiprintf_r+0x156>
 80089a8:	9207      	str	r2, [sp, #28]
 80089aa:	e014      	b.n	80089d6 <_vfiprintf_r+0x156>
 80089ac:	eba0 0308 	sub.w	r3, r0, r8
 80089b0:	fa09 f303 	lsl.w	r3, r9, r3
 80089b4:	4313      	orrs	r3, r2
 80089b6:	9304      	str	r3, [sp, #16]
 80089b8:	46a2      	mov	sl, r4
 80089ba:	e7d2      	b.n	8008962 <_vfiprintf_r+0xe2>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	1d19      	adds	r1, r3, #4
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	9103      	str	r1, [sp, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	bfbb      	ittet	lt
 80089c8:	425b      	neglt	r3, r3
 80089ca:	f042 0202 	orrlt.w	r2, r2, #2
 80089ce:	9307      	strge	r3, [sp, #28]
 80089d0:	9307      	strlt	r3, [sp, #28]
 80089d2:	bfb8      	it	lt
 80089d4:	9204      	strlt	r2, [sp, #16]
 80089d6:	7823      	ldrb	r3, [r4, #0]
 80089d8:	2b2e      	cmp	r3, #46	; 0x2e
 80089da:	d10c      	bne.n	80089f6 <_vfiprintf_r+0x176>
 80089dc:	7863      	ldrb	r3, [r4, #1]
 80089de:	2b2a      	cmp	r3, #42	; 0x2a
 80089e0:	d135      	bne.n	8008a4e <_vfiprintf_r+0x1ce>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	1d1a      	adds	r2, r3, #4
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	9203      	str	r2, [sp, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bfb8      	it	lt
 80089ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80089f2:	3402      	adds	r4, #2
 80089f4:	9305      	str	r3, [sp, #20]
 80089f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008adc <_vfiprintf_r+0x25c>
 80089fa:	7821      	ldrb	r1, [r4, #0]
 80089fc:	2203      	movs	r2, #3
 80089fe:	4650      	mov	r0, sl
 8008a00:	f7f7 fc0e 	bl	8000220 <memchr>
 8008a04:	b140      	cbz	r0, 8008a18 <_vfiprintf_r+0x198>
 8008a06:	2340      	movs	r3, #64	; 0x40
 8008a08:	eba0 000a 	sub.w	r0, r0, sl
 8008a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	4303      	orrs	r3, r0
 8008a14:	3401      	adds	r4, #1
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1c:	482c      	ldr	r0, [pc, #176]	; (8008ad0 <_vfiprintf_r+0x250>)
 8008a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a22:	2206      	movs	r2, #6
 8008a24:	f7f7 fbfc 	bl	8000220 <memchr>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d03f      	beq.n	8008aac <_vfiprintf_r+0x22c>
 8008a2c:	4b29      	ldr	r3, [pc, #164]	; (8008ad4 <_vfiprintf_r+0x254>)
 8008a2e:	bb1b      	cbnz	r3, 8008a78 <_vfiprintf_r+0x1f8>
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	3307      	adds	r3, #7
 8008a34:	f023 0307 	bic.w	r3, r3, #7
 8008a38:	3308      	adds	r3, #8
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3e:	443b      	add	r3, r7
 8008a40:	9309      	str	r3, [sp, #36]	; 0x24
 8008a42:	e767      	b.n	8008914 <_vfiprintf_r+0x94>
 8008a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a48:	460c      	mov	r4, r1
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	e7a5      	b.n	800899a <_vfiprintf_r+0x11a>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	3401      	adds	r4, #1
 8008a52:	9305      	str	r3, [sp, #20]
 8008a54:	4619      	mov	r1, r3
 8008a56:	f04f 0c0a 	mov.w	ip, #10
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a60:	3a30      	subs	r2, #48	; 0x30
 8008a62:	2a09      	cmp	r2, #9
 8008a64:	d903      	bls.n	8008a6e <_vfiprintf_r+0x1ee>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0c5      	beq.n	80089f6 <_vfiprintf_r+0x176>
 8008a6a:	9105      	str	r1, [sp, #20]
 8008a6c:	e7c3      	b.n	80089f6 <_vfiprintf_r+0x176>
 8008a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a72:	4604      	mov	r4, r0
 8008a74:	2301      	movs	r3, #1
 8008a76:	e7f0      	b.n	8008a5a <_vfiprintf_r+0x1da>
 8008a78:	ab03      	add	r3, sp, #12
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	462a      	mov	r2, r5
 8008a7e:	4b16      	ldr	r3, [pc, #88]	; (8008ad8 <_vfiprintf_r+0x258>)
 8008a80:	a904      	add	r1, sp, #16
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7fd fec0 	bl	8006808 <_printf_float>
 8008a88:	4607      	mov	r7, r0
 8008a8a:	1c78      	adds	r0, r7, #1
 8008a8c:	d1d6      	bne.n	8008a3c <_vfiprintf_r+0x1bc>
 8008a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a90:	07d9      	lsls	r1, r3, #31
 8008a92:	d405      	bmi.n	8008aa0 <_vfiprintf_r+0x220>
 8008a94:	89ab      	ldrh	r3, [r5, #12]
 8008a96:	059a      	lsls	r2, r3, #22
 8008a98:	d402      	bmi.n	8008aa0 <_vfiprintf_r+0x220>
 8008a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a9c:	f7ff fe74 	bl	8008788 <__retarget_lock_release_recursive>
 8008aa0:	89ab      	ldrh	r3, [r5, #12]
 8008aa2:	065b      	lsls	r3, r3, #25
 8008aa4:	f53f af12 	bmi.w	80088cc <_vfiprintf_r+0x4c>
 8008aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aaa:	e711      	b.n	80088d0 <_vfiprintf_r+0x50>
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <_vfiprintf_r+0x258>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7fe f94a 	bl	8006d50 <_printf_i>
 8008abc:	e7e4      	b.n	8008a88 <_vfiprintf_r+0x208>
 8008abe:	bf00      	nop
 8008ac0:	08009ce4 	.word	0x08009ce4
 8008ac4:	08009d04 	.word	0x08009d04
 8008ac8:	08009cc4 	.word	0x08009cc4
 8008acc:	08009b6c 	.word	0x08009b6c
 8008ad0:	08009b76 	.word	0x08009b76
 8008ad4:	08006809 	.word	0x08006809
 8008ad8:	0800885d 	.word	0x0800885d
 8008adc:	08009b72 	.word	0x08009b72

08008ae0 <__swbuf_r>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	460e      	mov	r6, r1
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	b118      	cbz	r0, 8008af2 <__swbuf_r+0x12>
 8008aea:	6983      	ldr	r3, [r0, #24]
 8008aec:	b90b      	cbnz	r3, 8008af2 <__swbuf_r+0x12>
 8008aee:	f000 f9e7 	bl	8008ec0 <__sinit>
 8008af2:	4b21      	ldr	r3, [pc, #132]	; (8008b78 <__swbuf_r+0x98>)
 8008af4:	429c      	cmp	r4, r3
 8008af6:	d12b      	bne.n	8008b50 <__swbuf_r+0x70>
 8008af8:	686c      	ldr	r4, [r5, #4]
 8008afa:	69a3      	ldr	r3, [r4, #24]
 8008afc:	60a3      	str	r3, [r4, #8]
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	071a      	lsls	r2, r3, #28
 8008b02:	d52f      	bpl.n	8008b64 <__swbuf_r+0x84>
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	b36b      	cbz	r3, 8008b64 <__swbuf_r+0x84>
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	1ac0      	subs	r0, r0, r3
 8008b0e:	6963      	ldr	r3, [r4, #20]
 8008b10:	b2f6      	uxtb	r6, r6
 8008b12:	4283      	cmp	r3, r0
 8008b14:	4637      	mov	r7, r6
 8008b16:	dc04      	bgt.n	8008b22 <__swbuf_r+0x42>
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 f93c 	bl	8008d98 <_fflush_r>
 8008b20:	bb30      	cbnz	r0, 8008b70 <__swbuf_r+0x90>
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	60a3      	str	r3, [r4, #8]
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	6022      	str	r2, [r4, #0]
 8008b2e:	701e      	strb	r6, [r3, #0]
 8008b30:	6963      	ldr	r3, [r4, #20]
 8008b32:	3001      	adds	r0, #1
 8008b34:	4283      	cmp	r3, r0
 8008b36:	d004      	beq.n	8008b42 <__swbuf_r+0x62>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	07db      	lsls	r3, r3, #31
 8008b3c:	d506      	bpl.n	8008b4c <__swbuf_r+0x6c>
 8008b3e:	2e0a      	cmp	r6, #10
 8008b40:	d104      	bne.n	8008b4c <__swbuf_r+0x6c>
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 f927 	bl	8008d98 <_fflush_r>
 8008b4a:	b988      	cbnz	r0, 8008b70 <__swbuf_r+0x90>
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b50:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <__swbuf_r+0x9c>)
 8008b52:	429c      	cmp	r4, r3
 8008b54:	d101      	bne.n	8008b5a <__swbuf_r+0x7a>
 8008b56:	68ac      	ldr	r4, [r5, #8]
 8008b58:	e7cf      	b.n	8008afa <__swbuf_r+0x1a>
 8008b5a:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <__swbuf_r+0xa0>)
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	bf08      	it	eq
 8008b60:	68ec      	ldreq	r4, [r5, #12]
 8008b62:	e7ca      	b.n	8008afa <__swbuf_r+0x1a>
 8008b64:	4621      	mov	r1, r4
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 f81a 	bl	8008ba0 <__swsetup_r>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d0cb      	beq.n	8008b08 <__swbuf_r+0x28>
 8008b70:	f04f 37ff 	mov.w	r7, #4294967295
 8008b74:	e7ea      	b.n	8008b4c <__swbuf_r+0x6c>
 8008b76:	bf00      	nop
 8008b78:	08009ce4 	.word	0x08009ce4
 8008b7c:	08009d04 	.word	0x08009d04
 8008b80:	08009cc4 	.word	0x08009cc4

08008b84 <__ascii_wctomb>:
 8008b84:	b149      	cbz	r1, 8008b9a <__ascii_wctomb+0x16>
 8008b86:	2aff      	cmp	r2, #255	; 0xff
 8008b88:	bf85      	ittet	hi
 8008b8a:	238a      	movhi	r3, #138	; 0x8a
 8008b8c:	6003      	strhi	r3, [r0, #0]
 8008b8e:	700a      	strbls	r2, [r1, #0]
 8008b90:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b94:	bf98      	it	ls
 8008b96:	2001      	movls	r0, #1
 8008b98:	4770      	bx	lr
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4770      	bx	lr
	...

08008ba0 <__swsetup_r>:
 8008ba0:	4b32      	ldr	r3, [pc, #200]	; (8008c6c <__swsetup_r+0xcc>)
 8008ba2:	b570      	push	{r4, r5, r6, lr}
 8008ba4:	681d      	ldr	r5, [r3, #0]
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	460c      	mov	r4, r1
 8008baa:	b125      	cbz	r5, 8008bb6 <__swsetup_r+0x16>
 8008bac:	69ab      	ldr	r3, [r5, #24]
 8008bae:	b913      	cbnz	r3, 8008bb6 <__swsetup_r+0x16>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f000 f985 	bl	8008ec0 <__sinit>
 8008bb6:	4b2e      	ldr	r3, [pc, #184]	; (8008c70 <__swsetup_r+0xd0>)
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	d10f      	bne.n	8008bdc <__swsetup_r+0x3c>
 8008bbc:	686c      	ldr	r4, [r5, #4]
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bc4:	0719      	lsls	r1, r3, #28
 8008bc6:	d42c      	bmi.n	8008c22 <__swsetup_r+0x82>
 8008bc8:	06dd      	lsls	r5, r3, #27
 8008bca:	d411      	bmi.n	8008bf0 <__swsetup_r+0x50>
 8008bcc:	2309      	movs	r3, #9
 8008bce:	6033      	str	r3, [r6, #0]
 8008bd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bd4:	81a3      	strh	r3, [r4, #12]
 8008bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bda:	e03e      	b.n	8008c5a <__swsetup_r+0xba>
 8008bdc:	4b25      	ldr	r3, [pc, #148]	; (8008c74 <__swsetup_r+0xd4>)
 8008bde:	429c      	cmp	r4, r3
 8008be0:	d101      	bne.n	8008be6 <__swsetup_r+0x46>
 8008be2:	68ac      	ldr	r4, [r5, #8]
 8008be4:	e7eb      	b.n	8008bbe <__swsetup_r+0x1e>
 8008be6:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <__swsetup_r+0xd8>)
 8008be8:	429c      	cmp	r4, r3
 8008bea:	bf08      	it	eq
 8008bec:	68ec      	ldreq	r4, [r5, #12]
 8008bee:	e7e6      	b.n	8008bbe <__swsetup_r+0x1e>
 8008bf0:	0758      	lsls	r0, r3, #29
 8008bf2:	d512      	bpl.n	8008c1a <__swsetup_r+0x7a>
 8008bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bf6:	b141      	cbz	r1, 8008c0a <__swsetup_r+0x6a>
 8008bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bfc:	4299      	cmp	r1, r3
 8008bfe:	d002      	beq.n	8008c06 <__swsetup_r+0x66>
 8008c00:	4630      	mov	r0, r6
 8008c02:	f7fd fcb7 	bl	8006574 <_free_r>
 8008c06:	2300      	movs	r3, #0
 8008c08:	6363      	str	r3, [r4, #52]	; 0x34
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c10:	81a3      	strh	r3, [r4, #12]
 8008c12:	2300      	movs	r3, #0
 8008c14:	6063      	str	r3, [r4, #4]
 8008c16:	6923      	ldr	r3, [r4, #16]
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f043 0308 	orr.w	r3, r3, #8
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	6923      	ldr	r3, [r4, #16]
 8008c24:	b94b      	cbnz	r3, 8008c3a <__swsetup_r+0x9a>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c30:	d003      	beq.n	8008c3a <__swsetup_r+0x9a>
 8008c32:	4621      	mov	r1, r4
 8008c34:	4630      	mov	r0, r6
 8008c36:	f000 fa05 	bl	8009044 <__smakebuf_r>
 8008c3a:	89a0      	ldrh	r0, [r4, #12]
 8008c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c40:	f010 0301 	ands.w	r3, r0, #1
 8008c44:	d00a      	beq.n	8008c5c <__swsetup_r+0xbc>
 8008c46:	2300      	movs	r3, #0
 8008c48:	60a3      	str	r3, [r4, #8]
 8008c4a:	6963      	ldr	r3, [r4, #20]
 8008c4c:	425b      	negs	r3, r3
 8008c4e:	61a3      	str	r3, [r4, #24]
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	b943      	cbnz	r3, 8008c66 <__swsetup_r+0xc6>
 8008c54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c58:	d1ba      	bne.n	8008bd0 <__swsetup_r+0x30>
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}
 8008c5c:	0781      	lsls	r1, r0, #30
 8008c5e:	bf58      	it	pl
 8008c60:	6963      	ldrpl	r3, [r4, #20]
 8008c62:	60a3      	str	r3, [r4, #8]
 8008c64:	e7f4      	b.n	8008c50 <__swsetup_r+0xb0>
 8008c66:	2000      	movs	r0, #0
 8008c68:	e7f7      	b.n	8008c5a <__swsetup_r+0xba>
 8008c6a:	bf00      	nop
 8008c6c:	20000018 	.word	0x20000018
 8008c70:	08009ce4 	.word	0x08009ce4
 8008c74:	08009d04 	.word	0x08009d04
 8008c78:	08009cc4 	.word	0x08009cc4

08008c7c <abort>:
 8008c7c:	b508      	push	{r3, lr}
 8008c7e:	2006      	movs	r0, #6
 8008c80:	f000 fa50 	bl	8009124 <raise>
 8008c84:	2001      	movs	r0, #1
 8008c86:	f7f8 fe13 	bl	80018b0 <_exit>
	...

08008c8c <__sflush_r>:
 8008c8c:	898a      	ldrh	r2, [r1, #12]
 8008c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c92:	4605      	mov	r5, r0
 8008c94:	0710      	lsls	r0, r2, #28
 8008c96:	460c      	mov	r4, r1
 8008c98:	d458      	bmi.n	8008d4c <__sflush_r+0xc0>
 8008c9a:	684b      	ldr	r3, [r1, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dc05      	bgt.n	8008cac <__sflush_r+0x20>
 8008ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dc02      	bgt.n	8008cac <__sflush_r+0x20>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cae:	2e00      	cmp	r6, #0
 8008cb0:	d0f9      	beq.n	8008ca6 <__sflush_r+0x1a>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cb8:	682f      	ldr	r7, [r5, #0]
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	d032      	beq.n	8008d24 <__sflush_r+0x98>
 8008cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	075a      	lsls	r2, r3, #29
 8008cc4:	d505      	bpl.n	8008cd2 <__sflush_r+0x46>
 8008cc6:	6863      	ldr	r3, [r4, #4]
 8008cc8:	1ac0      	subs	r0, r0, r3
 8008cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ccc:	b10b      	cbz	r3, 8008cd2 <__sflush_r+0x46>
 8008cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cd0:	1ac0      	subs	r0, r0, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cd8:	6a21      	ldr	r1, [r4, #32]
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b0      	blx	r6
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	d106      	bne.n	8008cf2 <__sflush_r+0x66>
 8008ce4:	6829      	ldr	r1, [r5, #0]
 8008ce6:	291d      	cmp	r1, #29
 8008ce8:	d82c      	bhi.n	8008d44 <__sflush_r+0xb8>
 8008cea:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <__sflush_r+0x108>)
 8008cec:	40ca      	lsrs	r2, r1
 8008cee:	07d6      	lsls	r6, r2, #31
 8008cf0:	d528      	bpl.n	8008d44 <__sflush_r+0xb8>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	6062      	str	r2, [r4, #4]
 8008cf6:	04d9      	lsls	r1, r3, #19
 8008cf8:	6922      	ldr	r2, [r4, #16]
 8008cfa:	6022      	str	r2, [r4, #0]
 8008cfc:	d504      	bpl.n	8008d08 <__sflush_r+0x7c>
 8008cfe:	1c42      	adds	r2, r0, #1
 8008d00:	d101      	bne.n	8008d06 <__sflush_r+0x7a>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	b903      	cbnz	r3, 8008d08 <__sflush_r+0x7c>
 8008d06:	6560      	str	r0, [r4, #84]	; 0x54
 8008d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0a:	602f      	str	r7, [r5, #0]
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	d0ca      	beq.n	8008ca6 <__sflush_r+0x1a>
 8008d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d14:	4299      	cmp	r1, r3
 8008d16:	d002      	beq.n	8008d1e <__sflush_r+0x92>
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f7fd fc2b 	bl	8006574 <_free_r>
 8008d1e:	2000      	movs	r0, #0
 8008d20:	6360      	str	r0, [r4, #52]	; 0x34
 8008d22:	e7c1      	b.n	8008ca8 <__sflush_r+0x1c>
 8008d24:	6a21      	ldr	r1, [r4, #32]
 8008d26:	2301      	movs	r3, #1
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b0      	blx	r6
 8008d2c:	1c41      	adds	r1, r0, #1
 8008d2e:	d1c7      	bne.n	8008cc0 <__sflush_r+0x34>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0c4      	beq.n	8008cc0 <__sflush_r+0x34>
 8008d36:	2b1d      	cmp	r3, #29
 8008d38:	d001      	beq.n	8008d3e <__sflush_r+0xb2>
 8008d3a:	2b16      	cmp	r3, #22
 8008d3c:	d101      	bne.n	8008d42 <__sflush_r+0xb6>
 8008d3e:	602f      	str	r7, [r5, #0]
 8008d40:	e7b1      	b.n	8008ca6 <__sflush_r+0x1a>
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d48:	81a3      	strh	r3, [r4, #12]
 8008d4a:	e7ad      	b.n	8008ca8 <__sflush_r+0x1c>
 8008d4c:	690f      	ldr	r7, [r1, #16]
 8008d4e:	2f00      	cmp	r7, #0
 8008d50:	d0a9      	beq.n	8008ca6 <__sflush_r+0x1a>
 8008d52:	0793      	lsls	r3, r2, #30
 8008d54:	680e      	ldr	r6, [r1, #0]
 8008d56:	bf08      	it	eq
 8008d58:	694b      	ldreq	r3, [r1, #20]
 8008d5a:	600f      	str	r7, [r1, #0]
 8008d5c:	bf18      	it	ne
 8008d5e:	2300      	movne	r3, #0
 8008d60:	eba6 0807 	sub.w	r8, r6, r7
 8008d64:	608b      	str	r3, [r1, #8]
 8008d66:	f1b8 0f00 	cmp.w	r8, #0
 8008d6a:	dd9c      	ble.n	8008ca6 <__sflush_r+0x1a>
 8008d6c:	6a21      	ldr	r1, [r4, #32]
 8008d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d70:	4643      	mov	r3, r8
 8008d72:	463a      	mov	r2, r7
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b0      	blx	r6
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	dc06      	bgt.n	8008d8a <__sflush_r+0xfe>
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d82:	81a3      	strh	r3, [r4, #12]
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	e78e      	b.n	8008ca8 <__sflush_r+0x1c>
 8008d8a:	4407      	add	r7, r0
 8008d8c:	eba8 0800 	sub.w	r8, r8, r0
 8008d90:	e7e9      	b.n	8008d66 <__sflush_r+0xda>
 8008d92:	bf00      	nop
 8008d94:	20400001 	.word	0x20400001

08008d98 <_fflush_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	690b      	ldr	r3, [r1, #16]
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	b913      	cbnz	r3, 8008da8 <_fflush_r+0x10>
 8008da2:	2500      	movs	r5, #0
 8008da4:	4628      	mov	r0, r5
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	b118      	cbz	r0, 8008db2 <_fflush_r+0x1a>
 8008daa:	6983      	ldr	r3, [r0, #24]
 8008dac:	b90b      	cbnz	r3, 8008db2 <_fflush_r+0x1a>
 8008dae:	f000 f887 	bl	8008ec0 <__sinit>
 8008db2:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <_fflush_r+0x6c>)
 8008db4:	429c      	cmp	r4, r3
 8008db6:	d11b      	bne.n	8008df0 <_fflush_r+0x58>
 8008db8:	686c      	ldr	r4, [r5, #4]
 8008dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0ef      	beq.n	8008da2 <_fflush_r+0xa>
 8008dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008dc4:	07d0      	lsls	r0, r2, #31
 8008dc6:	d404      	bmi.n	8008dd2 <_fflush_r+0x3a>
 8008dc8:	0599      	lsls	r1, r3, #22
 8008dca:	d402      	bmi.n	8008dd2 <_fflush_r+0x3a>
 8008dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dce:	f7ff fcda 	bl	8008786 <__retarget_lock_acquire_recursive>
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7ff ff59 	bl	8008c8c <__sflush_r>
 8008dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ddc:	07da      	lsls	r2, r3, #31
 8008dde:	4605      	mov	r5, r0
 8008de0:	d4e0      	bmi.n	8008da4 <_fflush_r+0xc>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	059b      	lsls	r3, r3, #22
 8008de6:	d4dd      	bmi.n	8008da4 <_fflush_r+0xc>
 8008de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dea:	f7ff fccd 	bl	8008788 <__retarget_lock_release_recursive>
 8008dee:	e7d9      	b.n	8008da4 <_fflush_r+0xc>
 8008df0:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <_fflush_r+0x70>)
 8008df2:	429c      	cmp	r4, r3
 8008df4:	d101      	bne.n	8008dfa <_fflush_r+0x62>
 8008df6:	68ac      	ldr	r4, [r5, #8]
 8008df8:	e7df      	b.n	8008dba <_fflush_r+0x22>
 8008dfa:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <_fflush_r+0x74>)
 8008dfc:	429c      	cmp	r4, r3
 8008dfe:	bf08      	it	eq
 8008e00:	68ec      	ldreq	r4, [r5, #12]
 8008e02:	e7da      	b.n	8008dba <_fflush_r+0x22>
 8008e04:	08009ce4 	.word	0x08009ce4
 8008e08:	08009d04 	.word	0x08009d04
 8008e0c:	08009cc4 	.word	0x08009cc4

08008e10 <std>:
 8008e10:	2300      	movs	r3, #0
 8008e12:	b510      	push	{r4, lr}
 8008e14:	4604      	mov	r4, r0
 8008e16:	e9c0 3300 	strd	r3, r3, [r0]
 8008e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e1e:	6083      	str	r3, [r0, #8]
 8008e20:	8181      	strh	r1, [r0, #12]
 8008e22:	6643      	str	r3, [r0, #100]	; 0x64
 8008e24:	81c2      	strh	r2, [r0, #14]
 8008e26:	6183      	str	r3, [r0, #24]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	305c      	adds	r0, #92	; 0x5c
 8008e2e:	f7fd fb99 	bl	8006564 <memset>
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <std+0x38>)
 8008e34:	6263      	str	r3, [r4, #36]	; 0x24
 8008e36:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <std+0x3c>)
 8008e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <std+0x40>)
 8008e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <std+0x44>)
 8008e40:	6224      	str	r4, [r4, #32]
 8008e42:	6323      	str	r3, [r4, #48]	; 0x30
 8008e44:	bd10      	pop	{r4, pc}
 8008e46:	bf00      	nop
 8008e48:	0800915d 	.word	0x0800915d
 8008e4c:	0800917f 	.word	0x0800917f
 8008e50:	080091b7 	.word	0x080091b7
 8008e54:	080091db 	.word	0x080091db

08008e58 <_cleanup_r>:
 8008e58:	4901      	ldr	r1, [pc, #4]	; (8008e60 <_cleanup_r+0x8>)
 8008e5a:	f000 b8af 	b.w	8008fbc <_fwalk_reent>
 8008e5e:	bf00      	nop
 8008e60:	08008d99 	.word	0x08008d99

08008e64 <__sfmoreglue>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	1e4a      	subs	r2, r1, #1
 8008e68:	2568      	movs	r5, #104	; 0x68
 8008e6a:	4355      	muls	r5, r2
 8008e6c:	460e      	mov	r6, r1
 8008e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e72:	f7fd fbcf 	bl	8006614 <_malloc_r>
 8008e76:	4604      	mov	r4, r0
 8008e78:	b140      	cbz	r0, 8008e8c <__sfmoreglue+0x28>
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e80:	300c      	adds	r0, #12
 8008e82:	60a0      	str	r0, [r4, #8]
 8008e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e88:	f7fd fb6c 	bl	8006564 <memset>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}

08008e90 <__sfp_lock_acquire>:
 8008e90:	4801      	ldr	r0, [pc, #4]	; (8008e98 <__sfp_lock_acquire+0x8>)
 8008e92:	f7ff bc78 	b.w	8008786 <__retarget_lock_acquire_recursive>
 8008e96:	bf00      	nop
 8008e98:	2000062c 	.word	0x2000062c

08008e9c <__sfp_lock_release>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	; (8008ea4 <__sfp_lock_release+0x8>)
 8008e9e:	f7ff bc73 	b.w	8008788 <__retarget_lock_release_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	2000062c 	.word	0x2000062c

08008ea8 <__sinit_lock_acquire>:
 8008ea8:	4801      	ldr	r0, [pc, #4]	; (8008eb0 <__sinit_lock_acquire+0x8>)
 8008eaa:	f7ff bc6c 	b.w	8008786 <__retarget_lock_acquire_recursive>
 8008eae:	bf00      	nop
 8008eb0:	20000627 	.word	0x20000627

08008eb4 <__sinit_lock_release>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	; (8008ebc <__sinit_lock_release+0x8>)
 8008eb6:	f7ff bc67 	b.w	8008788 <__retarget_lock_release_recursive>
 8008eba:	bf00      	nop
 8008ebc:	20000627 	.word	0x20000627

08008ec0 <__sinit>:
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	f7ff fff0 	bl	8008ea8 <__sinit_lock_acquire>
 8008ec8:	69a3      	ldr	r3, [r4, #24]
 8008eca:	b11b      	cbz	r3, 8008ed4 <__sinit+0x14>
 8008ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed0:	f7ff bff0 	b.w	8008eb4 <__sinit_lock_release>
 8008ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8008eda:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <__sinit+0x68>)
 8008edc:	4a13      	ldr	r2, [pc, #76]	; (8008f2c <__sinit+0x6c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	bf04      	itt	eq
 8008ee6:	2301      	moveq	r3, #1
 8008ee8:	61a3      	streq	r3, [r4, #24]
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 f820 	bl	8008f30 <__sfp>
 8008ef0:	6060      	str	r0, [r4, #4]
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 f81c 	bl	8008f30 <__sfp>
 8008ef8:	60a0      	str	r0, [r4, #8]
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 f818 	bl	8008f30 <__sfp>
 8008f00:	2200      	movs	r2, #0
 8008f02:	60e0      	str	r0, [r4, #12]
 8008f04:	2104      	movs	r1, #4
 8008f06:	6860      	ldr	r0, [r4, #4]
 8008f08:	f7ff ff82 	bl	8008e10 <std>
 8008f0c:	68a0      	ldr	r0, [r4, #8]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	2109      	movs	r1, #9
 8008f12:	f7ff ff7d 	bl	8008e10 <std>
 8008f16:	68e0      	ldr	r0, [r4, #12]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	2112      	movs	r1, #18
 8008f1c:	f7ff ff78 	bl	8008e10 <std>
 8008f20:	2301      	movs	r3, #1
 8008f22:	61a3      	str	r3, [r4, #24]
 8008f24:	e7d2      	b.n	8008ecc <__sinit+0xc>
 8008f26:	bf00      	nop
 8008f28:	08009940 	.word	0x08009940
 8008f2c:	08008e59 	.word	0x08008e59

08008f30 <__sfp>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	4607      	mov	r7, r0
 8008f34:	f7ff ffac 	bl	8008e90 <__sfp_lock_acquire>
 8008f38:	4b1e      	ldr	r3, [pc, #120]	; (8008fb4 <__sfp+0x84>)
 8008f3a:	681e      	ldr	r6, [r3, #0]
 8008f3c:	69b3      	ldr	r3, [r6, #24]
 8008f3e:	b913      	cbnz	r3, 8008f46 <__sfp+0x16>
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7ff ffbd 	bl	8008ec0 <__sinit>
 8008f46:	3648      	adds	r6, #72	; 0x48
 8008f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	d503      	bpl.n	8008f58 <__sfp+0x28>
 8008f50:	6833      	ldr	r3, [r6, #0]
 8008f52:	b30b      	cbz	r3, 8008f98 <__sfp+0x68>
 8008f54:	6836      	ldr	r6, [r6, #0]
 8008f56:	e7f7      	b.n	8008f48 <__sfp+0x18>
 8008f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f5c:	b9d5      	cbnz	r5, 8008f94 <__sfp+0x64>
 8008f5e:	4b16      	ldr	r3, [pc, #88]	; (8008fb8 <__sfp+0x88>)
 8008f60:	60e3      	str	r3, [r4, #12]
 8008f62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f66:	6665      	str	r5, [r4, #100]	; 0x64
 8008f68:	f7ff fc0c 	bl	8008784 <__retarget_lock_init_recursive>
 8008f6c:	f7ff ff96 	bl	8008e9c <__sfp_lock_release>
 8008f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f78:	6025      	str	r5, [r4, #0]
 8008f7a:	61a5      	str	r5, [r4, #24]
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f84:	f7fd faee 	bl	8006564 <memset>
 8008f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f90:	4620      	mov	r0, r4
 8008f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f94:	3468      	adds	r4, #104	; 0x68
 8008f96:	e7d9      	b.n	8008f4c <__sfp+0x1c>
 8008f98:	2104      	movs	r1, #4
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	f7ff ff62 	bl	8008e64 <__sfmoreglue>
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	6030      	str	r0, [r6, #0]
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d1d5      	bne.n	8008f54 <__sfp+0x24>
 8008fa8:	f7ff ff78 	bl	8008e9c <__sfp_lock_release>
 8008fac:	230c      	movs	r3, #12
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	e7ee      	b.n	8008f90 <__sfp+0x60>
 8008fb2:	bf00      	nop
 8008fb4:	08009940 	.word	0x08009940
 8008fb8:	ffff0001 	.word	0xffff0001

08008fbc <_fwalk_reent>:
 8008fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	4688      	mov	r8, r1
 8008fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fc8:	2700      	movs	r7, #0
 8008fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fce:	f1b9 0901 	subs.w	r9, r9, #1
 8008fd2:	d505      	bpl.n	8008fe0 <_fwalk_reent+0x24>
 8008fd4:	6824      	ldr	r4, [r4, #0]
 8008fd6:	2c00      	cmp	r4, #0
 8008fd8:	d1f7      	bne.n	8008fca <_fwalk_reent+0xe>
 8008fda:	4638      	mov	r0, r7
 8008fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe0:	89ab      	ldrh	r3, [r5, #12]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d907      	bls.n	8008ff6 <_fwalk_reent+0x3a>
 8008fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fea:	3301      	adds	r3, #1
 8008fec:	d003      	beq.n	8008ff6 <_fwalk_reent+0x3a>
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	47c0      	blx	r8
 8008ff4:	4307      	orrs	r7, r0
 8008ff6:	3568      	adds	r5, #104	; 0x68
 8008ff8:	e7e9      	b.n	8008fce <_fwalk_reent+0x12>

08008ffa <__swhatbuf_r>:
 8008ffa:	b570      	push	{r4, r5, r6, lr}
 8008ffc:	460e      	mov	r6, r1
 8008ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009002:	2900      	cmp	r1, #0
 8009004:	b096      	sub	sp, #88	; 0x58
 8009006:	4614      	mov	r4, r2
 8009008:	461d      	mov	r5, r3
 800900a:	da07      	bge.n	800901c <__swhatbuf_r+0x22>
 800900c:	2300      	movs	r3, #0
 800900e:	602b      	str	r3, [r5, #0]
 8009010:	89b3      	ldrh	r3, [r6, #12]
 8009012:	061a      	lsls	r2, r3, #24
 8009014:	d410      	bmi.n	8009038 <__swhatbuf_r+0x3e>
 8009016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800901a:	e00e      	b.n	800903a <__swhatbuf_r+0x40>
 800901c:	466a      	mov	r2, sp
 800901e:	f000 f903 	bl	8009228 <_fstat_r>
 8009022:	2800      	cmp	r0, #0
 8009024:	dbf2      	blt.n	800900c <__swhatbuf_r+0x12>
 8009026:	9a01      	ldr	r2, [sp, #4]
 8009028:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800902c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009030:	425a      	negs	r2, r3
 8009032:	415a      	adcs	r2, r3
 8009034:	602a      	str	r2, [r5, #0]
 8009036:	e7ee      	b.n	8009016 <__swhatbuf_r+0x1c>
 8009038:	2340      	movs	r3, #64	; 0x40
 800903a:	2000      	movs	r0, #0
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	b016      	add	sp, #88	; 0x58
 8009040:	bd70      	pop	{r4, r5, r6, pc}
	...

08009044 <__smakebuf_r>:
 8009044:	898b      	ldrh	r3, [r1, #12]
 8009046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009048:	079d      	lsls	r5, r3, #30
 800904a:	4606      	mov	r6, r0
 800904c:	460c      	mov	r4, r1
 800904e:	d507      	bpl.n	8009060 <__smakebuf_r+0x1c>
 8009050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	2301      	movs	r3, #1
 800905a:	6163      	str	r3, [r4, #20]
 800905c:	b002      	add	sp, #8
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	ab01      	add	r3, sp, #4
 8009062:	466a      	mov	r2, sp
 8009064:	f7ff ffc9 	bl	8008ffa <__swhatbuf_r>
 8009068:	9900      	ldr	r1, [sp, #0]
 800906a:	4605      	mov	r5, r0
 800906c:	4630      	mov	r0, r6
 800906e:	f7fd fad1 	bl	8006614 <_malloc_r>
 8009072:	b948      	cbnz	r0, 8009088 <__smakebuf_r+0x44>
 8009074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009078:	059a      	lsls	r2, r3, #22
 800907a:	d4ef      	bmi.n	800905c <__smakebuf_r+0x18>
 800907c:	f023 0303 	bic.w	r3, r3, #3
 8009080:	f043 0302 	orr.w	r3, r3, #2
 8009084:	81a3      	strh	r3, [r4, #12]
 8009086:	e7e3      	b.n	8009050 <__smakebuf_r+0xc>
 8009088:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <__smakebuf_r+0x7c>)
 800908a:	62b3      	str	r3, [r6, #40]	; 0x28
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	6020      	str	r0, [r4, #0]
 8009090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009094:	81a3      	strh	r3, [r4, #12]
 8009096:	9b00      	ldr	r3, [sp, #0]
 8009098:	6163      	str	r3, [r4, #20]
 800909a:	9b01      	ldr	r3, [sp, #4]
 800909c:	6120      	str	r0, [r4, #16]
 800909e:	b15b      	cbz	r3, 80090b8 <__smakebuf_r+0x74>
 80090a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a4:	4630      	mov	r0, r6
 80090a6:	f000 f8d1 	bl	800924c <_isatty_r>
 80090aa:	b128      	cbz	r0, 80090b8 <__smakebuf_r+0x74>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	89a0      	ldrh	r0, [r4, #12]
 80090ba:	4305      	orrs	r5, r0
 80090bc:	81a5      	strh	r5, [r4, #12]
 80090be:	e7cd      	b.n	800905c <__smakebuf_r+0x18>
 80090c0:	08008e59 	.word	0x08008e59

080090c4 <_malloc_usable_size_r>:
 80090c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090c8:	1f18      	subs	r0, r3, #4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfbc      	itt	lt
 80090ce:	580b      	ldrlt	r3, [r1, r0]
 80090d0:	18c0      	addlt	r0, r0, r3
 80090d2:	4770      	bx	lr

080090d4 <_raise_r>:
 80090d4:	291f      	cmp	r1, #31
 80090d6:	b538      	push	{r3, r4, r5, lr}
 80090d8:	4604      	mov	r4, r0
 80090da:	460d      	mov	r5, r1
 80090dc:	d904      	bls.n	80090e8 <_raise_r+0x14>
 80090de:	2316      	movs	r3, #22
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	f04f 30ff 	mov.w	r0, #4294967295
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090ea:	b112      	cbz	r2, 80090f2 <_raise_r+0x1e>
 80090ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090f0:	b94b      	cbnz	r3, 8009106 <_raise_r+0x32>
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 f830 	bl	8009158 <_getpid_r>
 80090f8:	462a      	mov	r2, r5
 80090fa:	4601      	mov	r1, r0
 80090fc:	4620      	mov	r0, r4
 80090fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009102:	f000 b817 	b.w	8009134 <_kill_r>
 8009106:	2b01      	cmp	r3, #1
 8009108:	d00a      	beq.n	8009120 <_raise_r+0x4c>
 800910a:	1c59      	adds	r1, r3, #1
 800910c:	d103      	bne.n	8009116 <_raise_r+0x42>
 800910e:	2316      	movs	r3, #22
 8009110:	6003      	str	r3, [r0, #0]
 8009112:	2001      	movs	r0, #1
 8009114:	e7e7      	b.n	80090e6 <_raise_r+0x12>
 8009116:	2400      	movs	r4, #0
 8009118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800911c:	4628      	mov	r0, r5
 800911e:	4798      	blx	r3
 8009120:	2000      	movs	r0, #0
 8009122:	e7e0      	b.n	80090e6 <_raise_r+0x12>

08009124 <raise>:
 8009124:	4b02      	ldr	r3, [pc, #8]	; (8009130 <raise+0xc>)
 8009126:	4601      	mov	r1, r0
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	f7ff bfd3 	b.w	80090d4 <_raise_r>
 800912e:	bf00      	nop
 8009130:	20000018 	.word	0x20000018

08009134 <_kill_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	; (8009154 <_kill_r+0x20>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f7f8 fba5 	bl	8001890 <_kill>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d102      	bne.n	8009150 <_kill_r+0x1c>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	b103      	cbz	r3, 8009150 <_kill_r+0x1c>
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	bf00      	nop
 8009154:	20000620 	.word	0x20000620

08009158 <_getpid_r>:
 8009158:	f7f8 bb92 	b.w	8001880 <_getpid>

0800915c <__sread>:
 800915c:	b510      	push	{r4, lr}
 800915e:	460c      	mov	r4, r1
 8009160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009164:	f000 f894 	bl	8009290 <_read_r>
 8009168:	2800      	cmp	r0, #0
 800916a:	bfab      	itete	ge
 800916c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800916e:	89a3      	ldrhlt	r3, [r4, #12]
 8009170:	181b      	addge	r3, r3, r0
 8009172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009176:	bfac      	ite	ge
 8009178:	6563      	strge	r3, [r4, #84]	; 0x54
 800917a:	81a3      	strhlt	r3, [r4, #12]
 800917c:	bd10      	pop	{r4, pc}

0800917e <__swrite>:
 800917e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009182:	461f      	mov	r7, r3
 8009184:	898b      	ldrh	r3, [r1, #12]
 8009186:	05db      	lsls	r3, r3, #23
 8009188:	4605      	mov	r5, r0
 800918a:	460c      	mov	r4, r1
 800918c:	4616      	mov	r6, r2
 800918e:	d505      	bpl.n	800919c <__swrite+0x1e>
 8009190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009194:	2302      	movs	r3, #2
 8009196:	2200      	movs	r2, #0
 8009198:	f000 f868 	bl	800926c <_lseek_r>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	4632      	mov	r2, r6
 80091aa:	463b      	mov	r3, r7
 80091ac:	4628      	mov	r0, r5
 80091ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091b2:	f000 b817 	b.w	80091e4 <_write_r>

080091b6 <__sseek>:
 80091b6:	b510      	push	{r4, lr}
 80091b8:	460c      	mov	r4, r1
 80091ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091be:	f000 f855 	bl	800926c <_lseek_r>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	bf15      	itete	ne
 80091c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80091ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091d2:	81a3      	strheq	r3, [r4, #12]
 80091d4:	bf18      	it	ne
 80091d6:	81a3      	strhne	r3, [r4, #12]
 80091d8:	bd10      	pop	{r4, pc}

080091da <__sclose>:
 80091da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091de:	f000 b813 	b.w	8009208 <_close_r>
	...

080091e4 <_write_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4d07      	ldr	r5, [pc, #28]	; (8009204 <_write_r+0x20>)
 80091e8:	4604      	mov	r4, r0
 80091ea:	4608      	mov	r0, r1
 80091ec:	4611      	mov	r1, r2
 80091ee:	2200      	movs	r2, #0
 80091f0:	602a      	str	r2, [r5, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	f7f8 fa16 	bl	8001624 <_write>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d102      	bne.n	8009202 <_write_r+0x1e>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	b103      	cbz	r3, 8009202 <_write_r+0x1e>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	20000620 	.word	0x20000620

08009208 <_close_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4d06      	ldr	r5, [pc, #24]	; (8009224 <_close_r+0x1c>)
 800920c:	2300      	movs	r3, #0
 800920e:	4604      	mov	r4, r0
 8009210:	4608      	mov	r0, r1
 8009212:	602b      	str	r3, [r5, #0]
 8009214:	f7f8 fb73 	bl	80018fe <_close>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_close_r+0x1a>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	b103      	cbz	r3, 8009222 <_close_r+0x1a>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	20000620 	.word	0x20000620

08009228 <_fstat_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	; (8009248 <_fstat_r+0x20>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	4611      	mov	r1, r2
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	f7f8 fb6e 	bl	8001916 <_fstat>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	d102      	bne.n	8009244 <_fstat_r+0x1c>
 800923e:	682b      	ldr	r3, [r5, #0]
 8009240:	b103      	cbz	r3, 8009244 <_fstat_r+0x1c>
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	bd38      	pop	{r3, r4, r5, pc}
 8009246:	bf00      	nop
 8009248:	20000620 	.word	0x20000620

0800924c <_isatty_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d06      	ldr	r5, [pc, #24]	; (8009268 <_isatty_r+0x1c>)
 8009250:	2300      	movs	r3, #0
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	f7f8 fb6d 	bl	8001936 <_isatty>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_isatty_r+0x1a>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_isatty_r+0x1a>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20000620 	.word	0x20000620

0800926c <_lseek_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d07      	ldr	r5, [pc, #28]	; (800928c <_lseek_r+0x20>)
 8009270:	4604      	mov	r4, r0
 8009272:	4608      	mov	r0, r1
 8009274:	4611      	mov	r1, r2
 8009276:	2200      	movs	r2, #0
 8009278:	602a      	str	r2, [r5, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	f7f8 fb66 	bl	800194c <_lseek>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_lseek_r+0x1e>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_lseek_r+0x1e>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	20000620 	.word	0x20000620

08009290 <_read_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	; (80092b0 <_read_r+0x20>)
 8009294:	4604      	mov	r4, r0
 8009296:	4608      	mov	r0, r1
 8009298:	4611      	mov	r1, r2
 800929a:	2200      	movs	r2, #0
 800929c:	602a      	str	r2, [r5, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	f7f8 fb10 	bl	80018c4 <_read>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_read_r+0x1e>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_read_r+0x1e>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	20000620 	.word	0x20000620

080092b4 <_init>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr

080092c0 <_fini>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr
