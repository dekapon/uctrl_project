
franziska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  08007f08  08007f08  00017f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f4  080088f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088fc  080088fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088fc  080088fc  000188fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200001e0  08008ae4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08008ae4  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001809a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ca  00000000  00000000  000382aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0003b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025edb  00000000  00000000  0003d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001684f  00000000  00000000  000635db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e17c8  00000000  00000000  00079e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b5f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  0015b648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007eec 	.word	0x08007eec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08007eec 	.word	0x08007eec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000ef4:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <MX_ADC1_Init+0xb4>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <MX_ADC1_Init+0xb8>)
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3e:	4814      	ldr	r0, [pc, #80]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f40:	f000 fd7c 	bl	8001a3c <HAL_ADC_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 f9f1 	bl	8001330 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f60:	f000 fec2 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f6a:	f000 f9e1 	bl	8001330 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <MX_ADC1_Init+0xb0>)
 8000f78:	f000 feb6 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f82:	f000 f9d5 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000040c 	.word	0x2000040c
 8000f94:	40012000 	.word	0x40012000
 8000f98:	0f000001 	.word	0x0f000001

08000f9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_ADC_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d127      	bne.n	800100e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_ADC_MspInit+0x80>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_ADC_MspInit+0x84>)
 800100a:	f001 f9ad 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012000 	.word	0x40012000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <MX_GPIO_Init+0xd0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <MX_GPIO_Init+0xd0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a25      	ldr	r2, [pc, #148]	; (80010f4 <MX_GPIO_Init+0xd0>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <MX_GPIO_Init+0xd4>)
 800107a:	f001 fb21 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	481e      	ldr	r0, [pc, #120]	; (80010fc <MX_GPIO_Init+0xd8>)
 8001084:	f001 fb1c 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 8001088:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800108c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	4815      	ldr	r0, [pc, #84]	; (80010f8 <MX_GPIO_Init+0xd4>)
 80010a2:	f001 f961 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = joystick_Pin;
 80010a6:	2320      	movs	r3, #32
 80010a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(joystick_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <MX_GPIO_Init+0xd8>)
 80010bc:	f001 f954 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4619      	mov	r1, r3
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <MX_GPIO_Init+0xd8>)
 80010d8:	f001 f946 	bl	8002368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2017      	movs	r0, #23
 80010e2:	f001 f90a 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010e6:	2017      	movs	r0, #23
 80010e8:	f001 f923 	bl	8002332 <HAL_NVIC_EnableIRQ>

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001104:	f000 fc04 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001108:	f000 f856 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110c:	f7ff ff8a 	bl	8001024 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001110:	f7ff fee6 	bl	8000ee0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001114:	f000 fb60 	bl	80017d8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001118:	f000 f910 	bl	800133c <MX_SPI1_Init>
  MX_TIM1_Init();
 800111c:	f000 facc 	bl	80016b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001120:	f003 faf1 	bl	8004706 <lcd_init>
  lcd_clear();
 8001124:	f003 fb4a 	bl	80047bc <lcd_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //displayWelcome();
  welcome_display();
 8001128:	f003 fd86 	bl	8004c38 <welcome_display>

  while (1)
  {
		status = potiRead(&rawValue);
 800112c:	481f      	ldr	r0, [pc, #124]	; (80011ac <main+0xac>)
 800112e:	f003 fe1d 	bl	8004d6c <potiRead>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <main+0xb0>)
 8001138:	701a      	strb	r2, [r3, #0]

		if(status == HAL_OK){
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <main+0xb0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d131      	bne.n	80011a6 <main+0xa6>
			if(step == 0)
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <main+0xb4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <main+0x50>
				menu1_display();
 800114a:	f003 fd8d 	bl	8004c68 <menu1_display>
 800114e:	e7ed      	b.n	800112c <main+0x2c>
			else if(step == 1)
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <main+0xb4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d102      	bne.n	800115e <main+0x5e>
				menu2_display();
 8001158:	f003 fda4 	bl	8004ca4 <menu2_display>
 800115c:	e7e6      	b.n	800112c <main+0x2c>
			else if (step == 2)
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <main+0xb4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d102      	bne.n	800116c <main+0x6c>
				getWeight();
 8001166:	f003 fff1 	bl	800514c <getWeight>
 800116a:	e7df      	b.n	800112c <main+0x2c>
			else if(step == 3)
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <main+0xb4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d102      	bne.n	800117a <main+0x7a>
				menu3_display();
 8001174:	f003 fdb4 	bl	8004ce0 <menu3_display>
 8001178:	e7d8      	b.n	800112c <main+0x2c>
			else if(step == 4)
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <main+0xb4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d103      	bne.n	800118a <main+0x8a>
				potiPrint(&rawValue);
 8001182:	480a      	ldr	r0, [pc, #40]	; (80011ac <main+0xac>)
 8001184:	f003 fe0c 	bl	8004da0 <potiPrint>
 8001188:	e7d0      	b.n	800112c <main+0x2c>
			else if(step == 5){
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <main+0xb4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b05      	cmp	r3, #5
 8001190:	d1cc      	bne.n	800112c <main+0x2c>
				status = potiDeInit();
 8001192:	f003 ffd1 	bl	8005138 <potiDeInit>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <main+0xb0>)
 800119c:	701a      	strb	r2, [r3, #0]
				menu4_display(&rawValue);
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <main+0xac>)
 80011a0:	f003 fdb2 	bl	8004d08 <menu4_display>
 80011a4:	e7c2      	b.n	800112c <main+0x2c>
			}
		}
		else
			Error_Handler();
 80011a6:	f000 f8c3 	bl	8001330 <Error_Handler>
		status = potiRead(&rawValue);
 80011aa:	e7bf      	b.n	800112c <main+0x2c>
 80011ac:	20000454 	.word	0x20000454
 80011b0:	20000456 	.word	0x20000456
 80011b4:	200001fc 	.word	0x200001fc

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2234      	movs	r2, #52	; 0x34
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 fff2 	bl	80051b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <SystemClock_Config+0xb8>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <SystemClock_Config+0xb8>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <SystemClock_Config+0xb8>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <SystemClock_Config+0xbc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <SystemClock_Config+0xbc>)
 8001206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <SystemClock_Config+0xbc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001220:	2310      	movs	r3, #16
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fcef 	bl	8002c10 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001238:	f000 f87a 	bl	8001330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fa64 	bl	8002724 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001262:	f000 f865 	bl	8001330 <Error_Handler>
  }
}
 8001266:	bf00      	nop
 8001268:	3750      	adds	r7, #80	; 0x50
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == joystick_Pin && button_state == true){ // Check pin
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	2b20      	cmp	r3, #32
 8001286:	d10a      	bne.n	800129e <HAL_GPIO_EXTI_Callback+0x26>
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_GPIO_EXTI_Callback+0x34>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_EXTI_Callback+0x26>
		HAL_TIM_Base_Start_IT(&htim1);
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001292:	f002 fa3b 	bl	800370c <HAL_TIM_Base_Start_IT>
		button_state = false;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_GPIO_EXTI_Callback+0x34>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e001      	b.n	80012a2 <HAL_GPIO_EXTI_Callback+0x2a>
	}
	else{
		__NOP();
 800129e:	bf00      	nop
	}
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000000 	.word	0x20000000
 80012b0:	200004b0 	.word	0x200004b0

080012b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	UNUSED(htim);		// Prevent unused argument(s) compilation warning

	if(HAL_GPIO_ReadPin(joystick_GPIO_Port, joystick_Pin) == GPIO_PIN_RESET){
 80012bc:	2120      	movs	r1, #32
 80012be:	480a      	ldr	r0, [pc, #40]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012c0:	f001 f9e6 	bl	8002690 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10a      	bne.n	80012e0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		step ++;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012d2:	6013      	str	r3, [r2, #0]
		button_state = true;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012dc:	f002 fa86 	bl	80037ec <HAL_TIM_Base_Stop_IT>
	}
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40020400 	.word	0x40020400
 80012ec:	200001fc 	.word	0x200001fc
 80012f0:	20000000 	.word	0x20000000
 80012f4:	200004b0 	.word	0x200004b0

080012f8 <_write>:


int _write(int fd, char* ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY)== HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	b29a      	uxth	r2, r3
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <_write+0x34>)
 8001310:	f002 fea9 	bl	8004066 <HAL_UART_Transmit>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <_write+0x26>
		return len;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	e001      	b.n	8001322 <_write+0x2a>
	else
		return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200004f8 	.word	0x200004f8

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>
	...

0800133c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001342:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <MX_SPI1_Init+0x6c>)
 8001344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800134c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001354:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_SPI1_Init+0x68>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_SPI1_Init+0x68>)
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_SPI1_Init+0x68>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_SPI1_Init+0x68>)
 800138a:	220a      	movs	r2, #10
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_SPI1_Init+0x68>)
 8001390:	f001 fedc 	bl	800314c <HAL_SPI_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800139a:	f7ff ffc9 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000458 	.word	0x20000458
 80013a8:	40013000 	.word	0x40013000

080013ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_SPI_MspInit+0x84>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d12b      	bne.n	8001426 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_SPI_MspInit+0x88>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_SPI_MspInit+0x88>)
 80013d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_SPI_MspInit+0x88>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_SPI_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_SPI_MspInit+0x88>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_SPI_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001406:	23a0      	movs	r3, #160	; 0xa0
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001416:	2305      	movs	r3, #5
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 8001422:	f000 ffa1 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40013000 	.word	0x40013000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_MspInit+0x4c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 fa6c 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80014e4:	2020      	movs	r0, #32
 80014e6:	f001 f905 	bl	80026f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80014f6:	f002 f9a8 	bl	800384a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200004b0 	.word	0x200004b0

08001504 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800150a:	f002 f99e 	bl	800384a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200004b0 	.word	0x200004b0

08001518 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800151e:	f002 f994 	bl	800384a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200004b0 	.word	0x200004b0

0800152c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM1_CC_IRQHandler+0x10>)
 8001532:	f002 f98a 	bl	800384a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200004b0 	.word	0x200004b0

08001540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_kill>:

int _kill(int pid, int sig)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800155a:	f003 fdff 	bl	800515c <__errno>
 800155e:	4603      	mov	r3, r0
 8001560:	2216      	movs	r2, #22
 8001562:	601a      	str	r2, [r3, #0]
	return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_exit>:

void _exit (int status)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ffe7 	bl	8001550 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001582:	e7fe      	b.n	8001582 <_exit+0x12>

08001584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00a      	b.n	80015ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	4601      	mov	r1, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf0      	blt.n	8001596 <_read+0x12>
	}

return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_close>:
	}
	return len;
}

int _close(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e6:	605a      	str	r2, [r3, #4]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_isatty>:

int _isatty(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
	return 1;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f003 fd80 	bl	800515c <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20020000 	.word	0x20020000
 8001688:	00000400 	.word	0x00000400
 800168c:	20000200 	.word	0x20000200
 8001690:	20000570 	.word	0x20000570

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	463b      	mov	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_TIM1_Init+0x98>)
 80016d6:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <MX_TIM1_Init+0x9c>)
 80016d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_TIM1_Init+0x98>)
 80016dc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80016e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_TIM1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_TIM1_Init+0x98>)
 80016ea:	2231      	movs	r2, #49	; 0x31
 80016ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_TIM1_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_TIM1_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_TIM1_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <MX_TIM1_Init+0x98>)
 8001702:	f001 ffb3 	bl	800366c <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800170c:	f7ff fe10 	bl	8001330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_TIM1_Init+0x98>)
 800171e:	f002 f99c 	bl	8003a5a <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001728:	f7ff fe02 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_TIM1_Init+0x98>)
 800173a:	f002 fbb7 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001744:	f7ff fdf4 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200004b0 	.word	0x200004b0
 8001754:	40010000 	.word	0x40010000

08001758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <HAL_TIM_Base_MspInit+0x78>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12d      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_TIM_Base_MspInit+0x7c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_TIM_Base_MspInit+0x7c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_TIM_Base_MspInit+0x7c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2018      	movs	r0, #24
 800178c:	f000 fdb5 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001790:	2018      	movs	r0, #24
 8001792:	f000 fdce 	bl	8002332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2019      	movs	r0, #25
 800179c:	f000 fdad 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017a0:	2019      	movs	r0, #25
 80017a2:	f000 fdc6 	bl	8002332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	201a      	movs	r0, #26
 80017ac:	f000 fda5 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017b0:	201a      	movs	r0, #26
 80017b2:	f000 fdbe 	bl	8002332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	201b      	movs	r0, #27
 80017bc:	f000 fd9d 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017c0:	201b      	movs	r0, #27
 80017c2:	f000 fdb6 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40023800 	.word	0x40023800

080017d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <MX_USART2_UART_Init+0x50>)
 80017e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 8001810:	f002 fbdc 	bl	8003fcc <HAL_UART_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800181a:	f7ff fd89 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200004f8 	.word	0x200004f8
 8001828:	40004400 	.word	0x40004400

0800182c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_UART_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12b      	bne.n	80018a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_UART_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001886:	230c      	movs	r3, #12
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001896:	2307      	movs	r3, #7
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_UART_MspInit+0x8c>)
 80018a2:	f000 fd61 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40004400 	.word	0x40004400
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018c2:	490e      	ldr	r1, [pc, #56]	; (80018fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d8:	4c0b      	ldr	r4, [pc, #44]	; (8001908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018e6:	f7ff fed5 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f003 fc3d 	bl	8005168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff fc07 	bl	8001100 <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001900:	08008904 	.word	0x08008904
  ldr r2, =_sbss
 8001904:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001908:	2000056c 	.word	0x2000056c

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 fcd3 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fd7a 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fceb 	bl	800234e <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 fcb3 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000004 	.word	0x20000004
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	20000008 	.word	0x20000008

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	2000053c 	.word	0x2000053c

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000053c 	.word	0x2000053c

080019f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000000c 	.word	0x2000000c

08001a3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e033      	b.n	8001aba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fa9e 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d118      	bne.n	8001aac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a82:	f023 0302 	bic.w	r3, r3, #2
 8001a86:	f043 0202 	orr.w	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fa5c 	bl	8001f4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8001aaa:	e001      	b.n	8001ab0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Start+0x1a>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e0b2      	b.n	8001c44 <HAL_ADC_Start+0x180>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d018      	beq.n	8001b26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b04:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <HAL_ADC_Start+0x18c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_ADC_Start+0x190>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0c9a      	lsrs	r2, r3, #18
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b18:	e002      	b.n	8001b20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f9      	bne.n	8001b1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d17a      	bne.n	8001c2a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b72:	d106      	bne.n	8001b82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	f023 0206 	bic.w	r2, r3, #6
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b90:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_ADC_Start+0x194>)
 8001b92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d12a      	bne.n	8001c00 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2b      	ldr	r2, [pc, #172]	; (8001c5c <HAL_ADC_Start+0x198>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d015      	beq.n	8001be0 <HAL_ADC_Start+0x11c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <HAL_ADC_Start+0x19c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d105      	bne.n	8001bca <HAL_ADC_Start+0x106>
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_ADC_Start+0x194>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <HAL_ADC_Start+0x1a0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d136      	bne.n	8001c42 <HAL_ADC_Start+0x17e>
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_ADC_Start+0x194>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d130      	bne.n	8001c42 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d129      	bne.n	8001c42 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	e020      	b.n	8001c42 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <HAL_ADC_Start+0x198>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11b      	bne.n	8001c42 <HAL_ADC_Start+0x17e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d114      	bne.n	8001c42 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	e00b      	b.n	8001c42 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	20000004 	.word	0x20000004
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	40012100 	.word	0x40012100
 8001c64:	40012200 	.word	0x40012200

08001c68 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_Stop+0x16>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e021      	b.n	8001cc2 <HAL_ADC_Stop+0x5a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e113      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x244>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d925      	bls.n	8001d60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4403      	add	r3, r0
 8001d52:	3b1e      	subs	r3, #30
 8001d54:	409a      	lsls	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e022      	b.n	8001da6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	2207      	movs	r2, #7
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4403      	add	r3, r0
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d824      	bhi.n	8001df8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b05      	subs	r3, #5
 8001dc0:	221f      	movs	r2, #31
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	400a      	ands	r2, r1
 8001dce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b05      	subs	r3, #5
 8001dea:	fa00 f203 	lsl.w	r2, r0, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
 8001df6:	e04c      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d824      	bhi.n	8001e4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b23      	subs	r3, #35	; 0x23
 8001e12:	221f      	movs	r2, #31
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	400a      	ands	r2, r1
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b23      	subs	r3, #35	; 0x23
 8001e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
 8001e48:	e023      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b41      	subs	r3, #65	; 0x41
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b41      	subs	r3, #65	; 0x41
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <HAL_ADC_ConfigChannel+0x250>)
 8001e94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <HAL_ADC_ConfigChannel+0x254>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1d8>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_ADC_ConfigChannel+0x254>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d12b      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x23a>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_ADC_ConfigChannel+0x258>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <HAL_ADC_ConfigChannel+0x1f4>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b11      	cmp	r3, #17
 8001eda:	d122      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <HAL_ADC_ConfigChannel+0x258>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d111      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_ADC_ConfigChannel+0x25c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <HAL_ADC_ConfigChannel+0x260>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9a      	lsrs	r2, r3, #18
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40012300 	.word	0x40012300
 8001f3c:	40012000 	.word	0x40012000
 8001f40:	10000012 	.word	0x10000012
 8001f44:	20000004 	.word	0x20000004
 8001f48:	431bde83 	.word	0x431bde83

08001f4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f54:	4b79      	ldr	r3, [pc, #484]	; (800213c <ADC_Init+0x1f0>)
 8001f56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	021a      	lsls	r2, r3, #8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	4a58      	ldr	r2, [pc, #352]	; (8002140 <ADC_Init+0x1f4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d022      	beq.n	800202a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6899      	ldr	r1, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	e00f      	b.n	800204a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002048:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0202 	bic.w	r2, r2, #2
 8002058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6899      	ldr	r1, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7e1b      	ldrb	r3, [r3, #24]
 8002064:	005a      	lsls	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002086:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	3b01      	subs	r3, #1
 80020a4:	035a      	lsls	r2, r3, #13
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e007      	b.n	80020c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	3b01      	subs	r3, #1
 80020dc:	051a      	lsls	r2, r3, #20
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002102:	025a      	lsls	r2, r3, #9
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	029a      	lsls	r2, r3, #10
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40012300 	.word	0x40012300
 8002140:	0f000001 	.word	0x0f000001

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff29 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff3e 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff8e 	bl	8002238 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff5d 	bl	80021e4 <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff31 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffa2 	bl	80022a0 <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	e165      	b.n	8002650 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002384:	2201      	movs	r2, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	429a      	cmp	r2, r3
 800239e:	f040 8154 	bne.w	800264a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d005      	beq.n	80023ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d130      	bne.n	800241c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b03      	cmp	r3, #3
 8002426:	d017      	beq.n	8002458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d123      	bne.n	80024ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	220f      	movs	r2, #15
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	08da      	lsrs	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80ae 	beq.w	800264a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_GPIO_Init+0x300>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4a5c      	ldr	r2, [pc, #368]	; (8002668 <HAL_GPIO_Init+0x300>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
 80024fe:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <HAL_GPIO_Init+0x300>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250a:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_GPIO_Init+0x304>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	220f      	movs	r2, #15
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4f      	ldr	r2, [pc, #316]	; (8002670 <HAL_GPIO_Init+0x308>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d025      	beq.n	8002582 <HAL_GPIO_Init+0x21a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4e      	ldr	r2, [pc, #312]	; (8002674 <HAL_GPIO_Init+0x30c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01f      	beq.n	800257e <HAL_GPIO_Init+0x216>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <HAL_GPIO_Init+0x310>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d019      	beq.n	800257a <HAL_GPIO_Init+0x212>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_GPIO_Init+0x314>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_GPIO_Init+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4b      	ldr	r2, [pc, #300]	; (8002680 <HAL_GPIO_Init+0x318>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00d      	beq.n	8002572 <HAL_GPIO_Init+0x20a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4a      	ldr	r2, [pc, #296]	; (8002684 <HAL_GPIO_Init+0x31c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0x206>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a49      	ldr	r2, [pc, #292]	; (8002688 <HAL_GPIO_Init+0x320>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_GPIO_Init+0x202>
 8002566:	2306      	movs	r3, #6
 8002568:	e00c      	b.n	8002584 <HAL_GPIO_Init+0x21c>
 800256a:	2307      	movs	r3, #7
 800256c:	e00a      	b.n	8002584 <HAL_GPIO_Init+0x21c>
 800256e:	2305      	movs	r3, #5
 8002570:	e008      	b.n	8002584 <HAL_GPIO_Init+0x21c>
 8002572:	2304      	movs	r3, #4
 8002574:	e006      	b.n	8002584 <HAL_GPIO_Init+0x21c>
 8002576:	2303      	movs	r3, #3
 8002578:	e004      	b.n	8002584 <HAL_GPIO_Init+0x21c>
 800257a:	2302      	movs	r3, #2
 800257c:	e002      	b.n	8002584 <HAL_GPIO_Init+0x21c>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_GPIO_Init+0x21c>
 8002582:	2300      	movs	r3, #0
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f002 0203 	and.w	r2, r2, #3
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	4093      	lsls	r3, r2
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002594:	4935      	ldr	r1, [pc, #212]	; (800266c <HAL_GPIO_Init+0x304>)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	3302      	adds	r3, #2
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <HAL_GPIO_Init+0x324>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c6:	4a31      	ldr	r2, [pc, #196]	; (800268c <HAL_GPIO_Init+0x324>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_GPIO_Init+0x324>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_GPIO_Init+0x324>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f6:	4b25      	ldr	r3, [pc, #148]	; (800268c <HAL_GPIO_Init+0x324>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_GPIO_Init+0x324>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <HAL_GPIO_Init+0x324>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_GPIO_Init+0x324>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3301      	adds	r3, #1
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	f67f ae96 	bls.w	8002384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	40013800 	.word	0x40013800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40021000 	.word	0x40021000
 8002684:	40021400 	.word	0x40021400
 8002688:	40021800 	.word	0x40021800
 800268c:	40013c00 	.word	0x40013c00

08002690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e001      	b.n	80026b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026dc:	e003      	b.n	80026e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fdb0 	bl	8001278 <HAL_GPIO_EXTI_Callback>
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0cc      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002738:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d90c      	bls.n	8002760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b65      	ldr	r3, [pc, #404]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b63      	ldr	r3, [pc, #396]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0b8      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002778:	4b59      	ldr	r3, [pc, #356]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a58      	ldr	r2, [pc, #352]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4a52      	ldr	r2, [pc, #328]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	494d      	ldr	r1, [pc, #308]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d044      	beq.n	8002844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d119      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e07f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e2:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e067      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4934      	ldr	r1, [pc, #208]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002814:	f7ff f8e2 	bl	80019dc <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7ff f8de 	bl	80019dc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e04f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 020c 	and.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	429a      	cmp	r2, r3
 8002842:	d1eb      	bne.n	800281c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d20c      	bcs.n	800286c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e032      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4916      	ldr	r1, [pc, #88]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028aa:	f000 f855 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	490a      	ldr	r1, [pc, #40]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	5ccb      	ldrb	r3, [r1, r3]
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f842 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023c00 	.word	0x40023c00
 80028e0:	40023800 	.word	0x40023800
 80028e4:	08008174 	.word	0x08008174
 80028e8:	20000004 	.word	0x20000004
 80028ec:	20000008 	.word	0x20000008

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000004 	.word	0x20000004

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800290c:	f7ff fff0 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	08008184 	.word	0x08008184

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002934:	f7ff ffdc 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08008184 	.word	0x08008184

08002958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800295c:	b087      	sub	sp, #28
 800295e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002960:	2600      	movs	r6, #0
 8002962:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002964:	2600      	movs	r6, #0
 8002966:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002968:	2600      	movs	r6, #0
 800296a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 800296c:	2600      	movs	r6, #0
 800296e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002970:	2600      	movs	r6, #0
 8002972:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002974:	4ea3      	ldr	r6, [pc, #652]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002976:	68b6      	ldr	r6, [r6, #8]
 8002978:	f006 060c 	and.w	r6, r6, #12
 800297c:	2e0c      	cmp	r6, #12
 800297e:	f200 8137 	bhi.w	8002bf0 <HAL_RCC_GetSysClockFreq+0x298>
 8002982:	f20f 0c08 	addw	ip, pc, #8
 8002986:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800298a:	bf00      	nop
 800298c:	080029c1 	.word	0x080029c1
 8002990:	08002bf1 	.word	0x08002bf1
 8002994:	08002bf1 	.word	0x08002bf1
 8002998:	08002bf1 	.word	0x08002bf1
 800299c:	080029c7 	.word	0x080029c7
 80029a0:	08002bf1 	.word	0x08002bf1
 80029a4:	08002bf1 	.word	0x08002bf1
 80029a8:	08002bf1 	.word	0x08002bf1
 80029ac:	080029cd 	.word	0x080029cd
 80029b0:	08002bf1 	.word	0x08002bf1
 80029b4:	08002bf1 	.word	0x08002bf1
 80029b8:	08002bf1 	.word	0x08002bf1
 80029bc:	08002ae3 	.word	0x08002ae3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b91      	ldr	r3, [pc, #580]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80029c2:	613b      	str	r3, [r7, #16]
       break;
 80029c4:	e117      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029c6:	4b91      	ldr	r3, [pc, #580]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x2b4>)
 80029c8:	613b      	str	r3, [r7, #16]
      break;
 80029ca:	e114      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029cc:	4b8d      	ldr	r3, [pc, #564]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d6:	4b8b      	ldr	r3, [pc, #556]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d024      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	461a      	mov	r2, r3
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029f2:	f04f 0500 	mov.w	r5, #0
 80029f6:	ea02 0004 	and.w	r0, r2, r4
 80029fa:	ea03 0105 	and.w	r1, r3, r5
 80029fe:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002a00:	fb03 f201 	mul.w	r2, r3, r1
 8002a04:	2300      	movs	r3, #0
 8002a06:	fb03 f300 	mul.w	r3, r3, r0
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a7f      	ldr	r2, [pc, #508]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002a0e:	fba0 0102 	umull	r0, r1, r0, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	4619      	mov	r1, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	f7fe f8e3 	bl	8000be8 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4613      	mov	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e04c      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2c:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	461a      	mov	r2, r3
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	ea02 0800 	and.w	r8, r2, r0
 8002a44:	ea03 0901 	and.w	r9, r3, r1
 8002a48:	4640      	mov	r0, r8
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	014b      	lsls	r3, r1, #5
 8002a56:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a5a:	0142      	lsls	r2, r0, #5
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	ebb0 0008 	subs.w	r0, r0, r8
 8002a64:	eb61 0109 	sbc.w	r1, r1, r9
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	018b      	lsls	r3, r1, #6
 8002a72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a76:	0182      	lsls	r2, r0, #6
 8002a78:	1a12      	subs	r2, r2, r0
 8002a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a7e:	f04f 0000 	mov.w	r0, #0
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	00d9      	lsls	r1, r3, #3
 8002a88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a8c:	00d0      	lsls	r0, r2, #3
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	eb12 0208 	adds.w	r2, r2, r8
 8002a96:	eb43 0309 	adc.w	r3, r3, r9
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0299      	lsls	r1, r3, #10
 8002aa4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aa8:	0290      	lsls	r0, r2, #10
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	f7fe f895 	bl	8000be8 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	0c1b      	lsrs	r3, r3, #16
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	613b      	str	r3, [r7, #16]
      break;
 8002ae0:	e089      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae2:	4948      	ldr	r1, [pc, #288]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ae4:	6849      	ldr	r1, [r1, #4]
 8002ae6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002aea:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aec:	4945      	ldr	r1, [pc, #276]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002aee:	6849      	ldr	r1, [r1, #4]
 8002af0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002af4:	2900      	cmp	r1, #0
 8002af6:	d024      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af8:	4942      	ldr	r1, [pc, #264]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002afa:	6849      	ldr	r1, [r1, #4]
 8002afc:	0989      	lsrs	r1, r1, #6
 8002afe:	4608      	mov	r0, r1
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b08:	f04f 0500 	mov.w	r5, #0
 8002b0c:	ea00 0204 	and.w	r2, r0, r4
 8002b10:	ea01 0305 	and.w	r3, r1, r5
 8002b14:	493d      	ldr	r1, [pc, #244]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002b16:	fb01 f003 	mul.w	r0, r1, r3
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	fb01 f102 	mul.w	r1, r1, r2
 8002b20:	1844      	adds	r4, r0, r1
 8002b22:	493a      	ldr	r1, [pc, #232]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002b24:	fba2 0101 	umull	r0, r1, r2, r1
 8002b28:	1863      	adds	r3, r4, r1
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f7fe f858 	bl	8000be8 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e04a      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	ea02 0400 	and.w	r4, r2, r0
 8002b5a:	ea03 0501 	and.w	r5, r3, r1
 8002b5e:	4620      	mov	r0, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	014b      	lsls	r3, r1, #5
 8002b6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b70:	0142      	lsls	r2, r0, #5
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	1b00      	subs	r0, r0, r4
 8002b78:	eb61 0105 	sbc.w	r1, r1, r5
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	018b      	lsls	r3, r1, #6
 8002b86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b8a:	0182      	lsls	r2, r0, #6
 8002b8c:	1a12      	subs	r2, r2, r0
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	f04f 0000 	mov.w	r0, #0
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	00d9      	lsls	r1, r3, #3
 8002b9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ba0:	00d0      	lsls	r0, r2, #3
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	1912      	adds	r2, r2, r4
 8002ba8:	eb45 0303 	adc.w	r3, r5, r3
 8002bac:	f04f 0000 	mov.w	r0, #0
 8002bb0:	f04f 0100 	mov.w	r1, #0
 8002bb4:	0299      	lsls	r1, r3, #10
 8002bb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bba:	0290      	lsls	r0, r2, #10
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	f7fe f80c 	bl	8000be8 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	0f1b      	lsrs	r3, r3, #28
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	613b      	str	r3, [r7, #16]
      break;
 8002bee:	e002      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002bf2:	613b      	str	r3, [r7, #16]
      break;
 8002bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf6:	693b      	ldr	r3, [r7, #16]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	017d7840 	.word	0x017d7840

08002c10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e28d      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8083 	beq.w	8002d36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c30:	4b94      	ldr	r3, [pc, #592]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d019      	beq.n	8002c70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c3c:	4b91      	ldr	r3, [pc, #580]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c48:	4b8e      	ldr	r3, [pc, #568]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c54:	d00c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c56:	4b8b      	ldr	r3, [pc, #556]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d112      	bne.n	8002c88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c62:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6e:	d10b      	bne.n	8002c88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	4b84      	ldr	r3, [pc, #528]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x124>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d157      	bne.n	8002d34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e25a      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x90>
 8002c92:	4b7c      	ldr	r3, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7b      	ldr	r2, [pc, #492]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xcc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xb4>
 8002caa:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a75      	ldr	r2, [pc, #468]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a72      	ldr	r2, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xcc>
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b6c      	ldr	r3, [pc, #432]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6b      	ldr	r2, [pc, #428]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fe7a 	bl	80019dc <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fe76 	bl	80019dc <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e21f      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xdc>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fe66 	bl	80019dc <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fe62 	bl	80019dc <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e20b      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x104>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d06f      	beq.n	8002e22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d42:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d4e:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x186>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1d3      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4937      	ldr	r1, [pc, #220]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b34      	ldr	r3, [pc, #208]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe fe0f 	bl	80019dc <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fe0b 	bl	80019dc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1b4      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4925      	ldr	r1, [pc, #148]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fdee 	bl	80019dc <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe fdea 	bl	80019dc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e193      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d036      	beq.n	8002e9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fdce 	bl	80019dc <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe fdca 	bl	80019dc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e173      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x234>
 8002e62:	e01b      	b.n	8002e9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fdb7 	bl	80019dc <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	e00e      	b.n	8002e90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e72:	f7fe fdb3 	bl	80019dc <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d907      	bls.n	8002e90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e15c      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	42470000 	.word	0x42470000
 8002e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b8a      	ldr	r3, [pc, #552]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ea      	bne.n	8002e72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8097 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b83      	ldr	r3, [pc, #524]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a7e      	ldr	r2, [pc, #504]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b7c      	ldr	r3, [pc, #496]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b79      	ldr	r3, [pc, #484]	; (80030c0 <HAL_RCC_OscConfig+0x4b0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x4b0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	; (80030c0 <HAL_RCC_OscConfig+0x4b0>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fd73 	bl	80019dc <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe fd6f 	bl	80019dc <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e118      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b6c      	ldr	r3, [pc, #432]	; (80030c0 <HAL_RCC_OscConfig+0x4b0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x31e>
 8002f20:	4b66      	ldr	r3, [pc, #408]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a65      	ldr	r2, [pc, #404]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	e01c      	b.n	8002f68 <HAL_RCC_OscConfig+0x358>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x340>
 8002f36:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a60      	ldr	r2, [pc, #384]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0x358>
 8002f50:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a59      	ldr	r2, [pc, #356]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	4b57      	ldr	r3, [pc, #348]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a56      	ldr	r2, [pc, #344]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f62:	f023 0304 	bic.w	r3, r3, #4
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fd34 	bl	80019dc <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fe fd30 	bl	80019dc <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0d7      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0ee      	beq.n	8002f78 <HAL_RCC_OscConfig+0x368>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fd1e 	bl	80019dc <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fd1a 	bl	80019dc <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0c1      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	4b40      	ldr	r3, [pc, #256]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ee      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	4a3a      	ldr	r2, [pc, #232]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80ad 	beq.w	800313c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d060      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d145      	bne.n	8003082 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCC_OscConfig+0x4b4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fcee 	bl	80019dc <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fcea 	bl	80019dc <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e093      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	019b      	lsls	r3, r3, #6
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	491b      	ldr	r1, [pc, #108]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x4b4>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fcbf 	bl	80019dc <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003062:	f7fe fcbb 	bl	80019dc <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e064      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x452>
 8003080:	e05c      	b.n	800313c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_RCC_OscConfig+0x4b4>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fca8 	bl	80019dc <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fca4 	bl	80019dc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e04d      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_OscConfig+0x4ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x480>
 80030ae:	e045      	b.n	800313c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e040      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <HAL_RCC_OscConfig+0x538>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d030      	beq.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d129      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d122      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f8:	4013      	ands	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003100:	4293      	cmp	r3, r2
 8003102:	d119      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	3b01      	subs	r3, #1
 8003112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d10f      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e07b      	b.n	8003256 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316e:	d009      	beq.n	8003184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
 8003176:	e005      	b.n	8003184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe f904 	bl	80013ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0104 	and.w	r1, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f003 0210 	and.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003244:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b088      	sub	sp, #32
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_SPI_Transmit+0x22>
 800327c:	2302      	movs	r3, #2
 800327e:	e126      	b.n	80034ce <HAL_SPI_Transmit+0x270>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003288:	f7fe fba8 	bl	80019dc <HAL_GetTick>
 800328c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d002      	beq.n	80032a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800329e:	2302      	movs	r3, #2
 80032a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a2:	e10b      	b.n	80034bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0x52>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032b4:	e102      	b.n	80034bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2203      	movs	r2, #3
 80032ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	88fa      	ldrh	r2, [r7, #6]
 80032ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032fc:	d10f      	bne.n	800331e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800331c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d007      	beq.n	800333c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003344:	d14b      	bne.n	80033de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_SPI_Transmit+0xf6>
 800334e:	8afb      	ldrh	r3, [r7, #22]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d13e      	bne.n	80033d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003378:	e02b      	b.n	80033d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d112      	bne.n	80033ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80033ac:	e011      	b.n	80033d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ae:	f7fe fb15 	bl	80019dc <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d803      	bhi.n	80033c6 <HAL_SPI_Transmit+0x168>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d102      	bne.n	80033cc <HAL_SPI_Transmit+0x16e>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033d0:	e074      	b.n	80034bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ce      	bne.n	800337a <HAL_SPI_Transmit+0x11c>
 80033dc:	e04c      	b.n	8003478 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_Transmit+0x18e>
 80033e6:	8afb      	ldrh	r3, [r7, #22]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d140      	bne.n	800346e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	7812      	ldrb	r2, [r2, #0]
 80033f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003412:	e02c      	b.n	800346e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d113      	bne.n	800344a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	330c      	adds	r3, #12
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	86da      	strh	r2, [r3, #54]	; 0x36
 8003448:	e011      	b.n	800346e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800344a:	f7fe fac7 	bl	80019dc <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d803      	bhi.n	8003462 <HAL_SPI_Transmit+0x204>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d102      	bne.n	8003468 <HAL_SPI_Transmit+0x20a>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800346c:	e026      	b.n	80034bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1cd      	bne.n	8003414 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	6839      	ldr	r1, [r7, #0]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f8b3 	bl	80035e8 <SPI_EndRxTxTransaction>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e000      	b.n	80034bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80034ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034e8:	f7fe fa78 	bl	80019dc <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	4413      	add	r3, r2
 80034f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034f8:	f7fe fa70 	bl	80019dc <HAL_GetTick>
 80034fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	015b      	lsls	r3, r3, #5
 8003504:	0d1b      	lsrs	r3, r3, #20
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	fb02 f303 	mul.w	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800350e:	e054      	b.n	80035ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d050      	beq.n	80035ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003518:	f7fe fa60 	bl	80019dc <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	429a      	cmp	r2, r3
 8003526:	d902      	bls.n	800352e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d13d      	bne.n	80035aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800353c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003546:	d111      	bne.n	800356c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003550:	d004      	beq.n	800355c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355a:	d107      	bne.n	800356c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003574:	d10f      	bne.n	8003596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003594:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e017      	b.n	80035da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d19b      	bne.n	8003510 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000004 	.word	0x20000004

080035e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <SPI_EndRxTxTransaction+0x7c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <SPI_EndRxTxTransaction+0x80>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0d5b      	lsrs	r3, r3, #21
 8003600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003604:	fb02 f303 	mul.w	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003612:	d112      	bne.n	800363a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff ff5a 	bl	80034d8 <SPI_WaitFlagStateUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e00f      	b.n	800365a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3b01      	subs	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d0f2      	beq.n	800363a <SPI_EndRxTxTransaction+0x52>
 8003654:	e000      	b.n	8003658 <SPI_EndRxTxTransaction+0x70>
        break;
 8003656:	bf00      	nop
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000004 	.word	0x20000004
 8003668:	165e9f81 	.word	0x165e9f81

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e041      	b.n	8003702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fe f860 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 fac4 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e04e      	b.n	80037c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a23      	ldr	r2, [pc, #140]	; (80037d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d022      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x80>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374e:	d01d      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x80>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d018      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x80>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x80>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_TIM_Base_Start_IT+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x80>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x80>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x80>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d111      	bne.n	80037b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b06      	cmp	r3, #6
 800379c:	d010      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	e007      	b.n	80037c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40010000 	.word	0x40010000
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800
 80037dc:	40000c00 	.word	0x40000c00
 80037e0:	40010400 	.word	0x40010400
 80037e4:	40014000 	.word	0x40014000
 80037e8:	40001800 	.word	0x40001800

080037ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a1a      	ldr	r2, [r3, #32]
 800380a:	f241 1311 	movw	r3, #4369	; 0x1111
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10f      	bne.n	8003834 <HAL_TIM_Base_Stop_IT+0x48>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	f240 4344 	movw	r3, #1092	; 0x444
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <HAL_TIM_Base_Stop_IT+0x48>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b02      	cmp	r3, #2
 800385e:	d122      	bne.n	80038a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d11b      	bne.n	80038a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f06f 0202 	mvn.w	r2, #2
 8003876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f9b5 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003892:	e005      	b.n	80038a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f9a7 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f9b8 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d122      	bne.n	80038fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d11b      	bne.n	80038fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f06f 0204 	mvn.w	r2, #4
 80038ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f98b 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 80038e6:	e005      	b.n	80038f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f97d 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f98e 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d122      	bne.n	800394e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b08      	cmp	r3, #8
 8003914:	d11b      	bne.n	800394e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0208 	mvn.w	r2, #8
 800391e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2204      	movs	r2, #4
 8003924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f961 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 800393a:	e005      	b.n	8003948 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f953 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f964 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b10      	cmp	r3, #16
 800395a:	d122      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b10      	cmp	r3, #16
 8003968:	d11b      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f06f 0210 	mvn.w	r2, #16
 8003972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2208      	movs	r2, #8
 8003978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f937 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 800398e:	e005      	b.n	800399c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f929 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f93a 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10e      	bne.n	80039ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d107      	bne.n	80039ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f06f 0201 	mvn.w	r2, #1
 80039c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fd fc73 	bl	80012b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d10e      	bne.n	80039fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d107      	bne.n	80039fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fadf 	bl	8003fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d10e      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	d107      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f8ff 	bl	8003c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d10e      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d107      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f06f 0220 	mvn.w	r2, #32
 8003a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 faa9 	bl	8003fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_TIM_ConfigClockSource+0x1c>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0b4      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x186>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	d03e      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xd4>
 8003ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab4:	f200 8087 	bhi.w	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abc:	f000 8086 	beq.w	8003bcc <HAL_TIM_ConfigClockSource+0x172>
 8003ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac4:	d87f      	bhi.n	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac6:	2b70      	cmp	r3, #112	; 0x70
 8003ac8:	d01a      	beq.n	8003b00 <HAL_TIM_ConfigClockSource+0xa6>
 8003aca:	2b70      	cmp	r3, #112	; 0x70
 8003acc:	d87b      	bhi.n	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ace:	2b60      	cmp	r3, #96	; 0x60
 8003ad0:	d050      	beq.n	8003b74 <HAL_TIM_ConfigClockSource+0x11a>
 8003ad2:	2b60      	cmp	r3, #96	; 0x60
 8003ad4:	d877      	bhi.n	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad6:	2b50      	cmp	r3, #80	; 0x50
 8003ad8:	d03c      	beq.n	8003b54 <HAL_TIM_ConfigClockSource+0xfa>
 8003ada:	2b50      	cmp	r3, #80	; 0x50
 8003adc:	d873      	bhi.n	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d058      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0x13a>
 8003ae2:	2b40      	cmp	r3, #64	; 0x40
 8003ae4:	d86f      	bhi.n	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae6:	2b30      	cmp	r3, #48	; 0x30
 8003ae8:	d064      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0x15a>
 8003aea:	2b30      	cmp	r3, #48	; 0x30
 8003aec:	d86b      	bhi.n	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d060      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0x15a>
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d867      	bhi.n	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d05c      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0x15a>
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d05a      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0x15a>
 8003afe:	e062      	b.n	8003bc6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f000 f9ac 	bl	8003e6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]
      break;
 8003b2c:	e04f      	b.n	8003bce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f000 f995 	bl	8003e6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b50:	609a      	str	r2, [r3, #8]
      break;
 8003b52:	e03c      	b.n	8003bce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	461a      	mov	r2, r3
 8003b62:	f000 f909 	bl	8003d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2150      	movs	r1, #80	; 0x50
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 f962 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003b72:	e02c      	b.n	8003bce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	461a      	mov	r2, r3
 8003b82:	f000 f928 	bl	8003dd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2160      	movs	r1, #96	; 0x60
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 f952 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003b92:	e01c      	b.n	8003bce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f000 f8e9 	bl	8003d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2140      	movs	r1, #64	; 0x40
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f942 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003bb2:	e00c      	b.n	8003bce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 f939 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e003      	b.n	8003bce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bca:	e000      	b.n	8003bce <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a40      	ldr	r2, [pc, #256]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d00f      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3d      	ldr	r2, [pc, #244]	; (8003d50 <TIM_Base_SetConfig+0x118>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a3c      	ldr	r2, [pc, #240]	; (8003d54 <TIM_Base_SetConfig+0x11c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a3b      	ldr	r2, [pc, #236]	; (8003d58 <TIM_Base_SetConfig+0x120>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2f      	ldr	r2, [pc, #188]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d027      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2c      	ldr	r2, [pc, #176]	; (8003d50 <TIM_Base_SetConfig+0x118>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d023      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a2b      	ldr	r2, [pc, #172]	; (8003d54 <TIM_Base_SetConfig+0x11c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01f      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <TIM_Base_SetConfig+0x120>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d017      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <TIM_Base_SetConfig+0x128>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <TIM_Base_SetConfig+0x12c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00f      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <TIM_Base_SetConfig+0x130>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <TIM_Base_SetConfig+0x134>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <TIM_Base_SetConfig+0x138>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <TIM_Base_SetConfig+0x13c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d108      	bne.n	8003cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0xf8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d103      	bne.n	8003d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800
 8003d6c:	40001800 	.word	0x40001800
 8003d70:	40001c00 	.word	0x40001c00
 8003d74:	40002000 	.word	0x40002000

08003d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 030a 	bic.w	r3, r3, #10
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	031b      	lsls	r3, r3, #12
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f043 0307 	orr.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e05a      	b.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d01d      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10c      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40001800 	.word	0x40001800

08003fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e03f      	b.n	800405e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fc1a 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f929 	bl	8004268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b08a      	sub	sp, #40	; 0x28
 800406a:	af02      	add	r7, sp, #8
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b20      	cmp	r3, #32
 8004084:	d17c      	bne.n	8004180 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_UART_Transmit+0x2c>
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e075      	b.n	8004182 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Transmit+0x3e>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e06e      	b.n	8004182 <HAL_UART_Transmit+0x11c>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2221      	movs	r2, #33	; 0x21
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ba:	f7fd fc8f 	bl	80019dc <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d108      	bne.n	80040e8 <HAL_UART_Transmit+0x82>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e003      	b.n	80040f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040f8:	e02a      	b.n	8004150 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f840 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e036      	b.n	8004182 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004128:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	3302      	adds	r3, #2
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e007      	b.n	8004142 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3301      	adds	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1cf      	bne.n	80040fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2200      	movs	r2, #0
 8004162:	2140      	movs	r1, #64	; 0x40
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f810 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e006      	b.n	8004182 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b090      	sub	sp, #64	; 0x40
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	e050      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d04c      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <UART_WaitOnFlagUntilTimeout+0x30>
 80041aa:	f7fd fc17 	bl	80019dc <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d241      	bcs.n	800423e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041da:	637a      	str	r2, [r7, #52]	; 0x34
 80041dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3314      	adds	r3, #20
 80041f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	613b      	str	r3, [r7, #16]
   return(result);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	63bb      	str	r3, [r7, #56]	; 0x38
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3314      	adds	r3, #20
 800420c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800420e:	623a      	str	r2, [r7, #32]
 8004210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	69f9      	ldr	r1, [r7, #28]
 8004214:	6a3a      	ldr	r2, [r7, #32]
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	61bb      	str	r3, [r7, #24]
   return(result);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e5      	bne.n	80041ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e00f      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	bf0c      	ite	eq
 800424e:	2301      	moveq	r3, #1
 8004250:	2300      	movne	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	429a      	cmp	r2, r3
 800425a:	d09f      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3740      	adds	r7, #64	; 0x40
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	b09f      	sub	sp, #124	; 0x7c
 800426e:	af00      	add	r7, sp, #0
 8004270:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800427c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427e:	68d9      	ldr	r1, [r3, #12]
 8004280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	ea40 0301 	orr.w	r3, r0, r1
 8004288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	431a      	orrs	r2, r3
 8004294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	431a      	orrs	r2, r3
 800429a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4313      	orrs	r3, r2
 80042a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042ac:	f021 010c 	bic.w	r1, r1, #12
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b6:	430b      	orrs	r3, r1
 80042b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	6999      	ldr	r1, [r3, #24]
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	ea40 0301 	orr.w	r3, r0, r1
 80042d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4bc5      	ldr	r3, [pc, #788]	; (80045ec <UART_SetConfig+0x384>)
 80042d8:	429a      	cmp	r2, r3
 80042da:	d004      	beq.n	80042e6 <UART_SetConfig+0x7e>
 80042dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4bc3      	ldr	r3, [pc, #780]	; (80045f0 <UART_SetConfig+0x388>)
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d103      	bne.n	80042ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e6:	f7fe fb23 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 80042ea:	6778      	str	r0, [r7, #116]	; 0x74
 80042ec:	e002      	b.n	80042f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ee:	f7fe fb0b 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 80042f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fc:	f040 80b6 	bne.w	800446c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004302:	461c      	mov	r4, r3
 8004304:	f04f 0500 	mov.w	r5, #0
 8004308:	4622      	mov	r2, r4
 800430a:	462b      	mov	r3, r5
 800430c:	1891      	adds	r1, r2, r2
 800430e:	6439      	str	r1, [r7, #64]	; 0x40
 8004310:	415b      	adcs	r3, r3
 8004312:	647b      	str	r3, [r7, #68]	; 0x44
 8004314:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004318:	1912      	adds	r2, r2, r4
 800431a:	eb45 0303 	adc.w	r3, r5, r3
 800431e:	f04f 0000 	mov.w	r0, #0
 8004322:	f04f 0100 	mov.w	r1, #0
 8004326:	00d9      	lsls	r1, r3, #3
 8004328:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800432c:	00d0      	lsls	r0, r2, #3
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	1911      	adds	r1, r2, r4
 8004334:	6639      	str	r1, [r7, #96]	; 0x60
 8004336:	416b      	adcs	r3, r5
 8004338:	667b      	str	r3, [r7, #100]	; 0x64
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	461a      	mov	r2, r3
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	1891      	adds	r1, r2, r2
 8004346:	63b9      	str	r1, [r7, #56]	; 0x38
 8004348:	415b      	adcs	r3, r3
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004350:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004354:	f7fc fc48 	bl	8000be8 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4ba5      	ldr	r3, [pc, #660]	; (80045f4 <UART_SetConfig+0x38c>)
 800435e:	fba3 2302 	umull	r2, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	011e      	lsls	r6, r3, #4
 8004366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004368:	461c      	mov	r4, r3
 800436a:	f04f 0500 	mov.w	r5, #0
 800436e:	4622      	mov	r2, r4
 8004370:	462b      	mov	r3, r5
 8004372:	1891      	adds	r1, r2, r2
 8004374:	6339      	str	r1, [r7, #48]	; 0x30
 8004376:	415b      	adcs	r3, r3
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
 800437a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800437e:	1912      	adds	r2, r2, r4
 8004380:	eb45 0303 	adc.w	r3, r5, r3
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	00d9      	lsls	r1, r3, #3
 800438e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004392:	00d0      	lsls	r0, r2, #3
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	1911      	adds	r1, r2, r4
 800439a:	65b9      	str	r1, [r7, #88]	; 0x58
 800439c:	416b      	adcs	r3, r5
 800439e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	461a      	mov	r2, r3
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	1891      	adds	r1, r2, r2
 80043ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80043ae:	415b      	adcs	r3, r3
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043ba:	f7fc fc15 	bl	8000be8 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4b8c      	ldr	r3, [pc, #560]	; (80045f4 <UART_SetConfig+0x38c>)
 80043c4:	fba3 1302 	umull	r1, r3, r3, r2
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	2164      	movs	r1, #100	; 0x64
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	3332      	adds	r3, #50	; 0x32
 80043d6:	4a87      	ldr	r2, [pc, #540]	; (80045f4 <UART_SetConfig+0x38c>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e4:	441e      	add	r6, r3
 80043e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e8:	4618      	mov	r0, r3
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	1894      	adds	r4, r2, r2
 80043f4:	623c      	str	r4, [r7, #32]
 80043f6:	415b      	adcs	r3, r3
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
 80043fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043fe:	1812      	adds	r2, r2, r0
 8004400:	eb41 0303 	adc.w	r3, r1, r3
 8004404:	f04f 0400 	mov.w	r4, #0
 8004408:	f04f 0500 	mov.w	r5, #0
 800440c:	00dd      	lsls	r5, r3, #3
 800440e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004412:	00d4      	lsls	r4, r2, #3
 8004414:	4622      	mov	r2, r4
 8004416:	462b      	mov	r3, r5
 8004418:	1814      	adds	r4, r2, r0
 800441a:	653c      	str	r4, [r7, #80]	; 0x50
 800441c:	414b      	adcs	r3, r1
 800441e:	657b      	str	r3, [r7, #84]	; 0x54
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	461a      	mov	r2, r3
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	1891      	adds	r1, r2, r2
 800442c:	61b9      	str	r1, [r7, #24]
 800442e:	415b      	adcs	r3, r3
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004436:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800443a:	f7fc fbd5 	bl	8000be8 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <UART_SetConfig+0x38c>)
 8004444:	fba3 1302 	umull	r1, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	2164      	movs	r1, #100	; 0x64
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	3332      	adds	r3, #50	; 0x32
 8004456:	4a67      	ldr	r2, [pc, #412]	; (80045f4 <UART_SetConfig+0x38c>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f003 0207 	and.w	r2, r3, #7
 8004462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4432      	add	r2, r6
 8004468:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800446a:	e0b9      	b.n	80045e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800446c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800446e:	461c      	mov	r4, r3
 8004470:	f04f 0500 	mov.w	r5, #0
 8004474:	4622      	mov	r2, r4
 8004476:	462b      	mov	r3, r5
 8004478:	1891      	adds	r1, r2, r2
 800447a:	6139      	str	r1, [r7, #16]
 800447c:	415b      	adcs	r3, r3
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004484:	1912      	adds	r2, r2, r4
 8004486:	eb45 0303 	adc.w	r3, r5, r3
 800448a:	f04f 0000 	mov.w	r0, #0
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	00d9      	lsls	r1, r3, #3
 8004494:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004498:	00d0      	lsls	r0, r2, #3
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	eb12 0804 	adds.w	r8, r2, r4
 80044a2:	eb43 0905 	adc.w	r9, r3, r5
 80044a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	008b      	lsls	r3, r1, #2
 80044ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044be:	0082      	lsls	r2, r0, #2
 80044c0:	4640      	mov	r0, r8
 80044c2:	4649      	mov	r1, r9
 80044c4:	f7fc fb90 	bl	8000be8 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4b49      	ldr	r3, [pc, #292]	; (80045f4 <UART_SetConfig+0x38c>)
 80044ce:	fba3 2302 	umull	r2, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	011e      	lsls	r6, r3, #4
 80044d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d8:	4618      	mov	r0, r3
 80044da:	f04f 0100 	mov.w	r1, #0
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	1894      	adds	r4, r2, r2
 80044e4:	60bc      	str	r4, [r7, #8]
 80044e6:	415b      	adcs	r3, r3
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044ee:	1812      	adds	r2, r2, r0
 80044f0:	eb41 0303 	adc.w	r3, r1, r3
 80044f4:	f04f 0400 	mov.w	r4, #0
 80044f8:	f04f 0500 	mov.w	r5, #0
 80044fc:	00dd      	lsls	r5, r3, #3
 80044fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004502:	00d4      	lsls	r4, r2, #3
 8004504:	4622      	mov	r2, r4
 8004506:	462b      	mov	r3, r5
 8004508:	1814      	adds	r4, r2, r0
 800450a:	64bc      	str	r4, [r7, #72]	; 0x48
 800450c:	414b      	adcs	r3, r1
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4618      	mov	r0, r3
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	008b      	lsls	r3, r1, #2
 8004524:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004528:	0082      	lsls	r2, r0, #2
 800452a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800452e:	f7fc fb5b 	bl	8000be8 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <UART_SetConfig+0x38c>)
 8004538:	fba3 1302 	umull	r1, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2164      	movs	r1, #100	; 0x64
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	3332      	adds	r3, #50	; 0x32
 800454a:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <UART_SetConfig+0x38c>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004556:	441e      	add	r6, r3
 8004558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455a:	4618      	mov	r0, r3
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	1894      	adds	r4, r2, r2
 8004566:	603c      	str	r4, [r7, #0]
 8004568:	415b      	adcs	r3, r3
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004570:	1812      	adds	r2, r2, r0
 8004572:	eb41 0303 	adc.w	r3, r1, r3
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	f04f 0500 	mov.w	r5, #0
 800457e:	00dd      	lsls	r5, r3, #3
 8004580:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004584:	00d4      	lsls	r4, r2, #3
 8004586:	4622      	mov	r2, r4
 8004588:	462b      	mov	r3, r5
 800458a:	eb12 0a00 	adds.w	sl, r2, r0
 800458e:	eb43 0b01 	adc.w	fp, r3, r1
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4618      	mov	r0, r3
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	008b      	lsls	r3, r1, #2
 80045a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045aa:	0082      	lsls	r2, r0, #2
 80045ac:	4650      	mov	r0, sl
 80045ae:	4659      	mov	r1, fp
 80045b0:	f7fc fb1a 	bl	8000be8 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <UART_SetConfig+0x38c>)
 80045ba:	fba3 1302 	umull	r1, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2164      	movs	r1, #100	; 0x64
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	3332      	adds	r3, #50	; 0x32
 80045cc:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <UART_SetConfig+0x38c>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	f003 020f 	and.w	r2, r3, #15
 80045d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4432      	add	r2, r6
 80045de:	609a      	str	r2, [r3, #8]
}
 80045e0:	bf00      	nop
 80045e2:	377c      	adds	r7, #124	; 0x7c
 80045e4:	46bd      	mov	sp, r7
 80045e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ea:	bf00      	nop
 80045ec:	40011000 	.word	0x40011000
 80045f0:	40011400 	.word	0x40011400
 80045f4:	51eb851f 	.word	0x51eb851f

080045f8 <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	f083 0301 	eor.w	r3, r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	2140      	movs	r1, #64	; 0x40
 800460e:	4803      	ldr	r0, [pc, #12]	; (800461c <chipSelect+0x24>)
 8004610:	f7fe f856 	bl	80026c0 <HAL_GPIO_WritePin>
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40020400 	.word	0x40020400

08004620 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	461a      	mov	r2, r3
 800462e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004632:	4803      	ldr	r0, [pc, #12]	; (8004640 <registerSelect+0x20>)
 8004634:	f7fe f844 	bl	80026c0 <HAL_GPIO_WritePin>
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40020000 	.word	0x40020000

08004644 <displayReset>:

static void displayReset(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 8004648:	2000      	movs	r0, #0
 800464a:	f7ff ffd5 	bl	80045f8 <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800464e:	2200      	movs	r2, #0
 8004650:	2140      	movs	r1, #64	; 0x40
 8004652:	4808      	ldr	r0, [pc, #32]	; (8004674 <displayReset+0x30>)
 8004654:	f7fe f834 	bl	80026c0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004658:	2001      	movs	r0, #1
 800465a:	f7fd f9cb 	bl	80019f4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800465e:	2201      	movs	r2, #1
 8004660:	2140      	movs	r1, #64	; 0x40
 8004662:	4804      	ldr	r0, [pc, #16]	; (8004674 <displayReset+0x30>)
 8004664:	f7fe f82c 	bl	80026c0 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 8004668:	2001      	movs	r0, #1
 800466a:	f7ff ffc5 	bl	80045f8 <chipSelect>
}
 800466e:	bf00      	nop
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40020000 	.word	0x40020000

08004678 <sendInstruction>:

static void sendInstruction(instruction command)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 8004682:	2000      	movs	r0, #0
 8004684:	f7ff ffcc 	bl	8004620 <registerSelect>
    chipSelect(true);
 8004688:	2001      	movs	r0, #1
 800468a:	f7ff ffb5 	bl	80045f8 <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 800468e:	1df9      	adds	r1, r7, #7
 8004690:	2301      	movs	r3, #1
 8004692:	2201      	movs	r2, #1
 8004694:	4804      	ldr	r0, [pc, #16]	; (80046a8 <sendInstruction+0x30>)
 8004696:	f7fe fde2 	bl	800325e <HAL_SPI_Transmit>
    chipSelect(false);
 800469a:	2000      	movs	r0, #0
 800469c:	f7ff ffac 	bl	80045f8 <chipSelect>
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000458 	.word	0x20000458

080046ac <sendData>:


/*static*/ void sendData(uint8_t data)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7ff ffb2 	bl	8004620 <registerSelect>
    chipSelect(true);
 80046bc:	2001      	movs	r0, #1
 80046be:	f7ff ff9b 	bl	80045f8 <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 80046c2:	1df9      	adds	r1, r7, #7
 80046c4:	2301      	movs	r3, #1
 80046c6:	2201      	movs	r2, #1
 80046c8:	4804      	ldr	r0, [pc, #16]	; (80046dc <sendData+0x30>)
 80046ca:	f7fe fdc8 	bl	800325e <HAL_SPI_Transmit>
    chipSelect(false);
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7ff ff92 	bl	80045f8 <chipSelect>
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000458 	.word	0x20000458

080046e0 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	2b3f      	cmp	r3, #63	; 0x3f
 80046ee:	d806      	bhi.n	80046fe <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 80046f0:	2081      	movs	r0, #129	; 0x81
 80046f2:	f7ff ffc1 	bl	8004678 <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ffbd 	bl	8004678 <sendInstruction>
    }
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <lcd_init>:

void lcd_init(void)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	af00      	add	r7, sp, #0
    lcd_clear();
 800470a:	f000 f857 	bl	80047bc <lcd_clear>
    displayReset();
 800470e:	f7ff ff99 	bl	8004644 <displayReset>

    sendInstruction(ADC_NORMAL);
 8004712:	20a0      	movs	r0, #160	; 0xa0
 8004714:	f7ff ffb0 	bl	8004678 <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8004718:	20ae      	movs	r0, #174	; 0xae
 800471a:	f7ff ffad 	bl	8004678 <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 800471e:	20c8      	movs	r0, #200	; 0xc8
 8004720:	f7ff ffaa 	bl	8004678 <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8004724:	20a2      	movs	r0, #162	; 0xa2
 8004726:	f7ff ffa7 	bl	8004678 <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 800472a:	202f      	movs	r0, #47	; 0x2f
 800472c:	f7ff ffa4 	bl	8004678 <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 8004730:	2021      	movs	r0, #33	; 0x21
 8004732:	f7ff ffa1 	bl	8004678 <sendInstruction>
    lcd_setContrast(40);
 8004736:	2028      	movs	r0, #40	; 0x28
 8004738:	f7ff ffd2 	bl	80046e0 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 800473c:	20af      	movs	r0, #175	; 0xaf
 800473e:	f7ff ff9b 	bl	8004678 <sendInstruction>
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
 8004752:	460b      	mov	r3, r1
 8004754:	71bb      	strb	r3, [r7, #6]
 8004756:	4613      	mov	r3, r2
 8004758:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	2b00      	cmp	r3, #0
 8004760:	db23      	blt.n	80047aa <lcd_setPixel+0x62>
 8004762:	79bb      	ldrb	r3, [r7, #6]
 8004764:	2b1f      	cmp	r3, #31
 8004766:	d820      	bhi.n	80047aa <lcd_setPixel+0x62>
        if (pixelIsSet)
 8004768:	797b      	ldrb	r3, [r7, #5]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00e      	beq.n	800478c <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <lcd_setPixel+0x70>)
 8004772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004776:	79bb      	ldrb	r3, [r7, #6]
 8004778:	2101      	movs	r1, #1
 800477a:	fa01 f303 	lsl.w	r3, r1, r3
 800477e:	4619      	mov	r1, r3
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	430a      	orrs	r2, r1
 8004784:	490c      	ldr	r1, [pc, #48]	; (80047b8 <lcd_setPixel+0x70>)
 8004786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 800478a:	e00e      	b.n	80047aa <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <lcd_setPixel+0x70>)
 8004790:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004794:	79bb      	ldrb	r3, [r7, #6]
 8004796:	2101      	movs	r1, #1
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	4619      	mov	r1, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	400a      	ands	r2, r1
 80047a4:	4904      	ldr	r1, [pc, #16]	; (80047b8 <lcd_setPixel+0x70>)
 80047a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000204 	.word	0x20000204

080047bc <lcd_clear>:

void lcd_clear(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 80047c2:	2300      	movs	r3, #0
 80047c4:	71fb      	strb	r3, [r7, #7]
 80047c6:	e007      	b.n	80047d8 <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <lcd_clear+0x34>)
 80047cc:	2100      	movs	r1, #0
 80047ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	3301      	adds	r3, #1
 80047d6:	71fb      	strb	r3, [r7, #7]
 80047d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	daf3      	bge.n	80047c8 <lcd_clear+0xc>
    }
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000204 	.word	0x20000204

080047f4 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4604      	mov	r4, r0
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4623      	mov	r3, r4
 8004804:	71fb      	strb	r3, [r7, #7]
 8004806:	4603      	mov	r3, r0
 8004808:	71bb      	strb	r3, [r7, #6]
 800480a:	460b      	mov	r3, r1
 800480c:	717b      	strb	r3, [r7, #5]
 800480e:	4613      	mov	r3, r2
 8004810:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8004812:	797b      	ldrb	r3, [r7, #5]
 8004814:	3b20      	subs	r3, #32
 8004816:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e049      	b.n	80048b2 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 800481e:	2300      	movs	r3, #0
 8004820:	73bb      	strb	r3, [r7, #14]
 8004822:	e03b      	b.n	800489c <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8004824:	797b      	ldrb	r3, [r7, #5]
 8004826:	793a      	ldrb	r2, [r7, #4]
 8004828:	4928      	ldr	r1, [pc, #160]	; (80048cc <lcd_setChar+0xd8>)
 800482a:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 800482e:	fb02 f203 	mul.w	r2, r2, r3
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	4413      	add	r3, r2
 8004836:	4a26      	ldr	r2, [pc, #152]	; (80048d0 <lcd_setChar+0xdc>)
 8004838:	5cd3      	ldrb	r3, [r2, r3]
 800483a:	461a      	mov	r2, r3
 800483c:	7bbb      	ldrb	r3, [r7, #14]
 800483e:	fa42 f303 	asr.w	r3, r2, r3
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d018      	beq.n	800487c <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 800484a:	79fa      	ldrb	r2, [r7, #7]
 800484c:	7bbb      	ldrb	r3, [r7, #14]
 800484e:	4413      	add	r3, r2
 8004850:	b2d8      	uxtb	r0, r3
 8004852:	79ba      	ldrb	r2, [r7, #6]
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	4413      	add	r3, r2
 8004858:	b2d9      	uxtb	r1, r3
 800485a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f083 0301 	eor.w	r3, r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	f7ff ff67 	bl	8004748 <lcd_setPixel>
 800487a:	e00c      	b.n	8004896 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 800487c:	79fa      	ldrb	r2, [r7, #7]
 800487e:	7bbb      	ldrb	r3, [r7, #14]
 8004880:	4413      	add	r3, r2
 8004882:	b2d8      	uxtb	r0, r3
 8004884:	79ba      	ldrb	r2, [r7, #6]
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	4413      	add	r3, r2
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004890:	4619      	mov	r1, r3
 8004892:	f7ff ff59 	bl	8004748 <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8004896:	7bbb      	ldrb	r3, [r7, #14]
 8004898:	3301      	adds	r3, #1
 800489a:	73bb      	strb	r3, [r7, #14]
 800489c:	793b      	ldrb	r3, [r7, #4]
 800489e:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <lcd_setChar+0xd8>)
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	785b      	ldrb	r3, [r3, #1]
 80048a6:	7bba      	ldrb	r2, [r7, #14]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d3bb      	bcc.n	8004824 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	3301      	adds	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	793b      	ldrb	r3, [r7, #4]
 80048b4:	4a05      	ldr	r2, [pc, #20]	; (80048cc <lcd_setChar+0xd8>)
 80048b6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3ae      	bcc.n	800481e <lcd_setChar+0x2a>
        }
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}
 80048ca:	bf00      	nop
 80048cc:	0800850c 	.word	0x0800850c
 80048d0:	0800818c 	.word	0x0800818c

080048d4 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af02      	add	r7, sp, #8
 80048da:	603a      	str	r2, [r7, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
 80048e2:	460b      	mov	r3, r1
 80048e4:	71bb      	strb	r3, [r7, #6]
 80048e6:	4613      	mov	r3, r2
 80048e8:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 80048ea:	797b      	ldrb	r3, [r7, #5]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11c      	bne.n	800492a <lcd_setString+0x56>
 80048f0:	797b      	ldrb	r3, [r7, #5]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d819      	bhi.n	800492a <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 80048f6:	e014      	b.n	8004922 <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	797c      	ldrb	r4, [r7, #5]
 80048fe:	79b9      	ldrb	r1, [r7, #6]
 8004900:	79f8      	ldrb	r0, [r7, #7]
 8004902:	7e3b      	ldrb	r3, [r7, #24]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4623      	mov	r3, r4
 8004908:	f7ff ff74 	bl	80047f4 <lcd_setChar>
            xPosition += fontSizes[size].width;
 800490c:	797b      	ldrb	r3, [r7, #5]
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <lcd_setString+0x60>)
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	785a      	ldrb	r2, [r3, #1]
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	4413      	add	r3, r2
 800491a:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	3301      	adds	r3, #1
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e6      	bne.n	80048f8 <lcd_setString+0x24>
        }
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	bf00      	nop
 8004934:	0800850c 	.word	0x0800850c

08004938 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b08b      	sub	sp, #44	; 0x2c
 800493c:	af00      	add	r7, sp, #0
 800493e:	4604      	mov	r4, r0
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4623      	mov	r3, r4
 8004948:	81fb      	strh	r3, [r7, #14]
 800494a:	4603      	mov	r3, r0
 800494c:	81bb      	strh	r3, [r7, #12]
 800494e:	460b      	mov	r3, r1
 8004950:	817b      	strh	r3, [r7, #10]
 8004952:	4613      	mov	r3, r2
 8004954:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 8004956:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004962:	edc7 7a08 	vstr	s15, [r7, #32]
 8004966:	2300      	movs	r3, #0
 8004968:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 800496a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004976:	edc7 7a07 	vstr	s15, [r7, #28]
 800497a:	2300      	movs	r3, #0
 800497c:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 800497e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfb8      	it	lt
 800498c:	425b      	neglt	r3, r3
 800498e:	b21b      	sxth	r3, r3
 8004990:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 8004992:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004996:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	bfb8      	it	lt
 80049a0:	425b      	neglt	r3, r3
 80049a2:	b21b      	sxth	r3, r3
 80049a4:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 80049a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <lcd_setLine+0x8c>
 80049ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80049b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80049bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80049c0:	b21b      	sxth	r3, r3
 80049c2:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 80049c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <lcd_setLine+0xaa>
 80049cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80049d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80049da:	fb93 f3f2 	sdiv	r3, r3, r2
 80049de:	b21b      	sxth	r3, r3
 80049e0:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 80049e2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80049e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	db5f      	blt.n	8004aae <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 80049ee:	2300      	movs	r3, #0
 80049f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049f2:	e055      	b.n	8004aa0 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 80049f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80049f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	db20      	blt.n	8004a44 <lcd_setLine+0x10c>
 8004a02:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0e:	db19      	blt.n	8004a44 <lcd_setLine+0x10c>
 8004a10:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a18:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a1c:	793b      	ldrb	r3, [r7, #4]
 8004a1e:	b2d8      	uxtb	r0, r3
 8004a20:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a28:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a2c:	793b      	ldrb	r3, [r7, #4]
 8004a2e:	b2d9      	uxtb	r1, r3
 8004a30:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f7ff fe82 	bl	8004748 <lcd_setPixel>
			xF += x[1];
 8004a44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004a48:	ee07 3a90 	vmov	s15, r3
 8004a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a50:	ed97 7a08 	vldr	s14, [r7, #32]
 8004a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a58:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8004a5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a68:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a90:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 8004a94:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004aa0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004aa4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	dba3      	blt.n	80049f4 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 8004aac:	e05e      	b.n	8004b6c <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 8004aae:	2300      	movs	r3, #0
 8004ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ab2:	e055      	b.n	8004b60 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8004ab4:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	db20      	blt.n	8004b04 <lcd_setLine+0x1cc>
 8004ac2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ace:	db19      	blt.n	8004b04 <lcd_setLine+0x1cc>
 8004ad0:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad8:	edc7 7a01 	vstr	s15, [r7, #4]
 8004adc:	793b      	ldrb	r3, [r7, #4]
 8004ade:	b2d8      	uxtb	r0, r3
 8004ae0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae8:	edc7 7a01 	vstr	s15, [r7, #4]
 8004aec:	793b      	ldrb	r3, [r7, #4]
 8004aee:	b2d9      	uxtb	r1, r3
 8004af0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	f7ff fe22 	bl	8004748 <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8004b04:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004b10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b20:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004b24:	ee07 3a90 	vmov	s15, r3
 8004b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b30:	ed97 7a08 	vldr	s14, [r7, #32]
 8004b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b38:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8004b3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b48:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b50:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8004b54:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b64:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	dba3      	blt.n	8004ab4 <lcd_setLine+0x17c>
}
 8004b6c:	bf00      	nop
 8004b6e:	372c      	adds	r7, #44	; 0x2c
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd90      	pop	{r4, r7, pc}

08004b74 <lcd_show>:

void lcd_show(void){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	71fb      	strb	r3, [r7, #7]
 8004b7e:	e022      	b.n	8004bc6 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	3b50      	subs	r3, #80	; 0x50
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fd76 	bl	8004678 <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 8004b8c:	2010      	movs	r0, #16
 8004b8e:	f7ff fd73 	bl	8004678 <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7ff fd70 	bl	8004678 <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	71bb      	strb	r3, [r7, #6]
 8004b9c:	e00c      	b.n	8004bb8 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 8004b9e:	79ba      	ldrb	r2, [r7, #6]
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	490d      	ldr	r1, [pc, #52]	; (8004bd8 <lcd_show+0x64>)
 8004ba4:	0092      	lsls	r2, r2, #2
 8004ba6:	440a      	add	r2, r1
 8004ba8:	4413      	add	r3, r2
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fd7d 	bl	80046ac <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8004bb2:	79bb      	ldrb	r3, [r7, #6]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	71bb      	strb	r3, [r7, #6]
 8004bb8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	daee      	bge.n	8004b9e <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	71fb      	strb	r3, [r7, #7]
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d9d9      	bls.n	8004b80 <lcd_show+0xc>
    }
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000204 	.word	0x20000204

08004bdc <lcd_setBar>:
        lcd_setPixel(columnCounter, yPositionUL, true);
    }
}

void lcd_setBar(uint8_t xPositionUL, uint8_t yPositionUL, uint8_t xPositionDR, uint8_t yPositionDR)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4623      	mov	r3, r4
 8004bec:	71fb      	strb	r3, [r7, #7]
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71bb      	strb	r3, [r7, #6]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	717b      	strb	r3, [r7, #5]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	713b      	strb	r3, [r7, #4]
    for (uint8_t rowCounter = yPositionUL; rowCounter <= yPositionDR; rowCounter++)
 8004bfa:	79bb      	ldrb	r3, [r7, #6]
 8004bfc:	73fb      	strb	r3, [r7, #15]
 8004bfe:	e012      	b.n	8004c26 <lcd_setBar+0x4a>
        for (uint8_t columnCounter = xPositionUL; columnCounter <= xPositionDR; columnCounter++)
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	73bb      	strb	r3, [r7, #14]
 8004c04:	e008      	b.n	8004c18 <lcd_setBar+0x3c>
            lcd_setPixel(columnCounter, rowCounter, true);
 8004c06:	7bf9      	ldrb	r1, [r7, #15]
 8004c08:	7bbb      	ldrb	r3, [r7, #14]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fd9b 	bl	8004748 <lcd_setPixel>
        for (uint8_t columnCounter = xPositionUL; columnCounter <= xPositionDR; columnCounter++)
 8004c12:	7bbb      	ldrb	r3, [r7, #14]
 8004c14:	3301      	adds	r3, #1
 8004c16:	73bb      	strb	r3, [r7, #14]
 8004c18:	7bba      	ldrb	r2, [r7, #14]
 8004c1a:	797b      	ldrb	r3, [r7, #5]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d9f2      	bls.n	8004c06 <lcd_setBar+0x2a>
    for (uint8_t rowCounter = yPositionUL; rowCounter <= yPositionDR; rowCounter++)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	3301      	adds	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	7bfa      	ldrb	r2, [r7, #15]
 8004c28:	793b      	ldrb	r3, [r7, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d9e8      	bls.n	8004c00 <lcd_setBar+0x24>

}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd90      	pop	{r4, r7, pc}

08004c38 <welcome_display>:
#include "lcd_driver.h"
#include "main.h"

char msgBuf1[30];

void welcome_display(void){
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af02      	add	r7, sp, #8
	lcd_clear();
 8004c3e:	f7ff fdbd 	bl	80047bc <lcd_clear>
	lcd_setString(4, 4, "WELCOME!", LCD_FONT_8, false);
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	4a06      	ldr	r2, [pc, #24]	; (8004c64 <welcome_display+0x2c>)
 8004c4a:	2104      	movs	r1, #4
 8004c4c:	2004      	movs	r0, #4
 8004c4e:	f7ff fe41 	bl	80048d4 <lcd_setString>
	lcd_show();
 8004c52:	f7ff ff8f 	bl	8004b74 <lcd_show>
	HAL_Delay(3000);
 8004c56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004c5a:	f7fc fecb 	bl	80019f4 <HAL_Delay>
}
 8004c5e:	bf00      	nop
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	08007f08 	.word	0x08007f08

08004c68 <menu1_display>:

void menu1_display(void){
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af02      	add	r7, sp, #8
	lcd_clear();
 8004c6e:	f7ff fda5 	bl	80047bc <lcd_clear>
	lcd_setString(4, 4, "To continue", LCD_FONT_8, false);
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	2300      	movs	r3, #0
 8004c78:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <menu1_display+0x34>)
 8004c7a:	2104      	movs	r1, #4
 8004c7c:	2004      	movs	r0, #4
 8004c7e:	f7ff fe29 	bl	80048d4 <lcd_setString>
	lcd_setString(4, 16, "press joystick!", LCD_FONT_8, false);
 8004c82:	2300      	movs	r3, #0
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <menu1_display+0x38>)
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	2004      	movs	r0, #4
 8004c8e:	f7ff fe21 	bl	80048d4 <lcd_setString>
	lcd_show();
 8004c92:	f7ff ff6f 	bl	8004b74 <lcd_show>
}
 8004c96:	bf00      	nop
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	08007f14 	.word	0x08007f14
 8004ca0:	08007f20 	.word	0x08007f20

08004ca4 <menu2_display>:

void menu2_display(void){
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af02      	add	r7, sp, #8
	lcd_clear();
 8004caa:	f7ff fd87 	bl	80047bc <lcd_clear>
	lcd_setString(4, 4, "Place the glass", LCD_FONT_8, false);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <menu2_display+0x34>)
 8004cb6:	2104      	movs	r1, #4
 8004cb8:	2004      	movs	r0, #4
 8004cba:	f7ff fe0b 	bl	80048d4 <lcd_setString>
	lcd_setString(4, 16, "on the scale", LCD_FONT_8, false);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4a05      	ldr	r2, [pc, #20]	; (8004cdc <menu2_display+0x38>)
 8004cc6:	2110      	movs	r1, #16
 8004cc8:	2004      	movs	r0, #4
 8004cca:	f7ff fe03 	bl	80048d4 <lcd_setString>
	lcd_show();
 8004cce:	f7ff ff51 	bl	8004b74 <lcd_show>
}
 8004cd2:	bf00      	nop
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	08007f30 	.word	0x08007f30
 8004cdc:	08007f40 	.word	0x08007f40

08004ce0 <menu3_display>:

void menu3_display(void){
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af02      	add	r7, sp, #8
	lcd_clear();
 8004ce6:	f7ff fd69 	bl	80047bc <lcd_clear>
	lcd_setString(4, 4, "Chosen glass: small/big", LCD_FONT_8, false);
 8004cea:	2300      	movs	r3, #0
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <menu3_display+0x24>)
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	2004      	movs	r0, #4
 8004cf6:	f7ff fded 	bl	80048d4 <lcd_setString>
	lcd_show();
 8004cfa:	f7ff ff3b 	bl	8004b74 <lcd_show>
}
 8004cfe:	bf00      	nop
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	08007f50 	.word	0x08007f50

08004d08 <menu4_display>:

void menu4_display(uint16_t* value){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
	lcd_clear();
 8004d10:	f7ff fd54 	bl	80047bc <lcd_clear>
	sprintf(msgBuf1,"%i%% sirup chosen", ((int)*value/200)+5); 	// fill message buffer
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <menu4_display+0x44>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	099b      	lsrs	r3, r3, #6
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3305      	adds	r3, #5
 8004d24:	461a      	mov	r2, r3
 8004d26:	490a      	ldr	r1, [pc, #40]	; (8004d50 <menu4_display+0x48>)
 8004d28:	480a      	ldr	r0, [pc, #40]	; (8004d54 <menu4_display+0x4c>)
 8004d2a:	f000 feb3 	bl	8005a94 <siprintf>
	lcd_setString(4, 1, msgBuf1, LCD_FONT_8, false); 		// LCD message
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <menu4_display+0x4c>)
 8004d36:	2101      	movs	r1, #1
 8004d38:	2004      	movs	r0, #4
 8004d3a:	f7ff fdcb 	bl	80048d4 <lcd_setString>
	lcd_show();
 8004d3e:	f7ff ff19 	bl	8004b74 <lcd_show>
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	51eb851f 	.word	0x51eb851f
 8004d50:	08007f68 	.word	0x08007f68
 8004d54:	20000540 	.word	0x20000540

08004d58 <potiInit>:
#include "math.h"
#include "lcd_driver.h"

char msgBuf1[30]; 	// Prepare buffer for message

HAL_StatusTypeDef potiInit(void){
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
	return HAL_ADC_Start(&hadc1);
 8004d5c:	4802      	ldr	r0, [pc, #8]	; (8004d68 <potiInit+0x10>)
 8004d5e:	f7fc feb1 	bl	8001ac4 <HAL_ADC_Start>
 8004d62:	4603      	mov	r3, r0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	2000040c 	.word	0x2000040c

08004d6c <potiRead>:


HAL_StatusTypeDef potiRead(uint16_t* value){
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	if(potiInit() == HAL_OK){
 8004d74:	f7ff fff0 	bl	8004d58 <potiInit>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d108      	bne.n	8004d90 <potiRead+0x24>
		*value = HAL_ADC_GetValue(&hadc1);
 8004d7e:	4807      	ldr	r0, [pc, #28]	; (8004d9c <potiRead+0x30>)
 8004d80:	f7fc ffa5 	bl	8001cce <HAL_ADC_GetValue>
 8004d84:	4603      	mov	r3, r0
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	801a      	strh	r2, [r3, #0]
		//*value = *value/200;
		return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e000      	b.n	8004d92 <potiRead+0x26>
	}
	else
		return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000040c 	.word	0x2000040c

08004da0 <potiPrint>:

char msgBuf1[30]; 	// Prepare buffer for message

void potiPrint(uint16_t* value){
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	6078      	str	r0, [r7, #4]
	lcd_clear();
 8004da8:	f7ff fd08 	bl	80047bc <lcd_clear>
	lcd_setLine(12, 15, 12, 25, 1);
 8004dac:	2301      	movs	r3, #1
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2319      	movs	r3, #25
 8004db2:	220c      	movs	r2, #12
 8004db4:	210f      	movs	r1, #15
 8004db6:	200c      	movs	r0, #12
 8004db8:	f7ff fdbe 	bl	8004938 <lcd_setLine>
	lcd_setLine(12, 15, 115, 15, 1);
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	230f      	movs	r3, #15
 8004dc2:	2273      	movs	r2, #115	; 0x73
 8004dc4:	210f      	movs	r1, #15
 8004dc6:	200c      	movs	r0, #12
 8004dc8:	f7ff fdb6 	bl	8004938 <lcd_setLine>
	lcd_setLine(12, 25, 116, 25, 1);
 8004dcc:	2301      	movs	r3, #1
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2319      	movs	r3, #25
 8004dd2:	2274      	movs	r2, #116	; 0x74
 8004dd4:	2119      	movs	r1, #25
 8004dd6:	200c      	movs	r0, #12
 8004dd8:	f7ff fdae 	bl	8004938 <lcd_setLine>
	lcd_setLine(115, 15, 115, 25, 1);
 8004ddc:	2301      	movs	r3, #1
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	2319      	movs	r3, #25
 8004de2:	2273      	movs	r2, #115	; 0x73
 8004de4:	210f      	movs	r1, #15
 8004de6:	2073      	movs	r0, #115	; 0x73
 8004de8:	f7ff fda6 	bl	8004938 <lcd_setLine>
	switch((int)*value/200){
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	4abb      	ldr	r2, [pc, #748]	; (80050e0 <potiPrint+0x340>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b14      	cmp	r3, #20
 8004dfc:	f200 8169 	bhi.w	80050d2 <potiPrint+0x332>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <potiPrint+0x68>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004e7b 	.word	0x08004e7b
 8004e10:	08004e99 	.word	0x08004e99
 8004e14:	08004eb7 	.word	0x08004eb7
 8004e18:	08004ed5 	.word	0x08004ed5
 8004e1c:	08004ef3 	.word	0x08004ef3
 8004e20:	08004f11 	.word	0x08004f11
 8004e24:	08004f2f 	.word	0x08004f2f
 8004e28:	08004f4d 	.word	0x08004f4d
 8004e2c:	08004f6b 	.word	0x08004f6b
 8004e30:	08004f89 	.word	0x08004f89
 8004e34:	08004fa7 	.word	0x08004fa7
 8004e38:	08004fc5 	.word	0x08004fc5
 8004e3c:	08004fe3 	.word	0x08004fe3
 8004e40:	08005001 	.word	0x08005001
 8004e44:	0800501f 	.word	0x0800501f
 8004e48:	0800503d 	.word	0x0800503d
 8004e4c:	0800505b 	.word	0x0800505b
 8004e50:	08005079 	.word	0x08005079
 8004e54:	08005097 	.word	0x08005097
 8004e58:	080050b5 	.word	0x080050b5
	case 0:
		lcd_setString(4, 4, "Sirup percentage: 5%", LCD_FONT_8, false);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	2300      	movs	r3, #0
 8004e62:	4aa0      	ldr	r2, [pc, #640]	; (80050e4 <potiPrint+0x344>)
 8004e64:	2104      	movs	r1, #4
 8004e66:	2004      	movs	r0, #4
 8004e68:	f7ff fd34 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 18, 24);
 8004e6c:	2318      	movs	r3, #24
 8004e6e:	2212      	movs	r2, #18
 8004e70:	2110      	movs	r1, #16
 8004e72:	200d      	movs	r0, #13
 8004e74:	f7ff feb2 	bl	8004bdc <lcd_setBar>
		break;
 8004e78:	e12c      	b.n	80050d4 <potiPrint+0x334>
	case 1:
		lcd_setString(4, 4, "Sirup percentage: 6%", LCD_FONT_8, false);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	4a99      	ldr	r2, [pc, #612]	; (80050e8 <potiPrint+0x348>)
 8004e82:	2104      	movs	r1, #4
 8004e84:	2004      	movs	r0, #4
 8004e86:	f7ff fd25 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 19, 24);
 8004e8a:	2318      	movs	r3, #24
 8004e8c:	2213      	movs	r2, #19
 8004e8e:	2110      	movs	r1, #16
 8004e90:	200d      	movs	r0, #13
 8004e92:	f7ff fea3 	bl	8004bdc <lcd_setBar>
		break;
 8004e96:	e11d      	b.n	80050d4 <potiPrint+0x334>
	case 2:
		lcd_setString(4, 4, "Sirup percentage: 7%", LCD_FONT_8, false);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4a93      	ldr	r2, [pc, #588]	; (80050ec <potiPrint+0x34c>)
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	2004      	movs	r0, #4
 8004ea4:	f7ff fd16 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 20, 24);
 8004ea8:	2318      	movs	r3, #24
 8004eaa:	2214      	movs	r2, #20
 8004eac:	2110      	movs	r1, #16
 8004eae:	200d      	movs	r0, #13
 8004eb0:	f7ff fe94 	bl	8004bdc <lcd_setBar>
		break;
 8004eb4:	e10e      	b.n	80050d4 <potiPrint+0x334>
	case 3:
		lcd_setString(4, 4, "Sirup percentage: 8%", LCD_FONT_8, false);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	4a8c      	ldr	r2, [pc, #560]	; (80050f0 <potiPrint+0x350>)
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	2004      	movs	r0, #4
 8004ec2:	f7ff fd07 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 21, 24);
 8004ec6:	2318      	movs	r3, #24
 8004ec8:	2215      	movs	r2, #21
 8004eca:	2110      	movs	r1, #16
 8004ecc:	200d      	movs	r0, #13
 8004ece:	f7ff fe85 	bl	8004bdc <lcd_setBar>
		break;
 8004ed2:	e0ff      	b.n	80050d4 <potiPrint+0x334>
	case 4:
		lcd_setString(4, 4, "Sirup percentage: 9%", LCD_FONT_8, false);
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4a86      	ldr	r2, [pc, #536]	; (80050f4 <potiPrint+0x354>)
 8004edc:	2104      	movs	r1, #4
 8004ede:	2004      	movs	r0, #4
 8004ee0:	f7ff fcf8 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 22, 24);
 8004ee4:	2318      	movs	r3, #24
 8004ee6:	2216      	movs	r2, #22
 8004ee8:	2110      	movs	r1, #16
 8004eea:	200d      	movs	r0, #13
 8004eec:	f7ff fe76 	bl	8004bdc <lcd_setBar>
		break;
 8004ef0:	e0f0      	b.n	80050d4 <potiPrint+0x334>
	case 5:
		lcd_setString(4, 4, "Sirup percentage: 10%", LCD_FONT_8, false);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	4a7f      	ldr	r2, [pc, #508]	; (80050f8 <potiPrint+0x358>)
 8004efa:	2104      	movs	r1, #4
 8004efc:	2004      	movs	r0, #4
 8004efe:	f7ff fce9 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 23, 24);
 8004f02:	2318      	movs	r3, #24
 8004f04:	2217      	movs	r2, #23
 8004f06:	2110      	movs	r1, #16
 8004f08:	200d      	movs	r0, #13
 8004f0a:	f7ff fe67 	bl	8004bdc <lcd_setBar>
		break;
 8004f0e:	e0e1      	b.n	80050d4 <potiPrint+0x334>
	case 6:
		lcd_setString(4, 4, "Sirup percentage: 11%", LCD_FONT_8, false);
 8004f10:	2300      	movs	r3, #0
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	2300      	movs	r3, #0
 8004f16:	4a79      	ldr	r2, [pc, #484]	; (80050fc <potiPrint+0x35c>)
 8004f18:	2104      	movs	r1, #4
 8004f1a:	2004      	movs	r0, #4
 8004f1c:	f7ff fcda 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 24, 24);
 8004f20:	2318      	movs	r3, #24
 8004f22:	2218      	movs	r2, #24
 8004f24:	2110      	movs	r1, #16
 8004f26:	200d      	movs	r0, #13
 8004f28:	f7ff fe58 	bl	8004bdc <lcd_setBar>
		break;
 8004f2c:	e0d2      	b.n	80050d4 <potiPrint+0x334>
	case 7:
		lcd_setString(4, 4, "Sirup percentage: 12%", LCD_FONT_8, false);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	4a72      	ldr	r2, [pc, #456]	; (8005100 <potiPrint+0x360>)
 8004f36:	2104      	movs	r1, #4
 8004f38:	2004      	movs	r0, #4
 8004f3a:	f7ff fccb 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 25, 24);
 8004f3e:	2318      	movs	r3, #24
 8004f40:	2219      	movs	r2, #25
 8004f42:	2110      	movs	r1, #16
 8004f44:	200d      	movs	r0, #13
 8004f46:	f7ff fe49 	bl	8004bdc <lcd_setBar>
		break;
 8004f4a:	e0c3      	b.n	80050d4 <potiPrint+0x334>
	case 8:
		lcd_setString(4, 4, "Sirup percentage: 13%", LCD_FONT_8, false);
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2300      	movs	r3, #0
 8004f52:	4a6c      	ldr	r2, [pc, #432]	; (8005104 <potiPrint+0x364>)
 8004f54:	2104      	movs	r1, #4
 8004f56:	2004      	movs	r0, #4
 8004f58:	f7ff fcbc 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 26, 24);
 8004f5c:	2318      	movs	r3, #24
 8004f5e:	221a      	movs	r2, #26
 8004f60:	2110      	movs	r1, #16
 8004f62:	200d      	movs	r0, #13
 8004f64:	f7ff fe3a 	bl	8004bdc <lcd_setBar>
		break;
 8004f68:	e0b4      	b.n	80050d4 <potiPrint+0x334>
	case 9:
		lcd_setString(4, 4, "Sirup percentage: 14%", LCD_FONT_8, false);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	4a65      	ldr	r2, [pc, #404]	; (8005108 <potiPrint+0x368>)
 8004f72:	2104      	movs	r1, #4
 8004f74:	2004      	movs	r0, #4
 8004f76:	f7ff fcad 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 27, 24);
 8004f7a:	2318      	movs	r3, #24
 8004f7c:	221b      	movs	r2, #27
 8004f7e:	2110      	movs	r1, #16
 8004f80:	200d      	movs	r0, #13
 8004f82:	f7ff fe2b 	bl	8004bdc <lcd_setBar>
		break;
 8004f86:	e0a5      	b.n	80050d4 <potiPrint+0x334>
	case 10:
		lcd_setString(4, 4, "Sirup percentage: 15%", LCD_FONT_8, false);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	4a5f      	ldr	r2, [pc, #380]	; (800510c <potiPrint+0x36c>)
 8004f90:	2104      	movs	r1, #4
 8004f92:	2004      	movs	r0, #4
 8004f94:	f7ff fc9e 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 28, 24);
 8004f98:	2318      	movs	r3, #24
 8004f9a:	221c      	movs	r2, #28
 8004f9c:	2110      	movs	r1, #16
 8004f9e:	200d      	movs	r0, #13
 8004fa0:	f7ff fe1c 	bl	8004bdc <lcd_setBar>
		break;
 8004fa4:	e096      	b.n	80050d4 <potiPrint+0x334>
	case 11:
		lcd_setString(4, 4, "Sirup percentage: 16%", LCD_FONT_8, false);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	2300      	movs	r3, #0
 8004fac:	4a58      	ldr	r2, [pc, #352]	; (8005110 <potiPrint+0x370>)
 8004fae:	2104      	movs	r1, #4
 8004fb0:	2004      	movs	r0, #4
 8004fb2:	f7ff fc8f 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 29, 24);
 8004fb6:	2318      	movs	r3, #24
 8004fb8:	221d      	movs	r2, #29
 8004fba:	2110      	movs	r1, #16
 8004fbc:	200d      	movs	r0, #13
 8004fbe:	f7ff fe0d 	bl	8004bdc <lcd_setBar>
		break;
 8004fc2:	e087      	b.n	80050d4 <potiPrint+0x334>
	case 12:
		lcd_setString(4, 4, "Sirup percentage: 17%", LCD_FONT_8, false);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4a52      	ldr	r2, [pc, #328]	; (8005114 <potiPrint+0x374>)
 8004fcc:	2104      	movs	r1, #4
 8004fce:	2004      	movs	r0, #4
 8004fd0:	f7ff fc80 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 30, 24);
 8004fd4:	2318      	movs	r3, #24
 8004fd6:	221e      	movs	r2, #30
 8004fd8:	2110      	movs	r1, #16
 8004fda:	200d      	movs	r0, #13
 8004fdc:	f7ff fdfe 	bl	8004bdc <lcd_setBar>
		break;
 8004fe0:	e078      	b.n	80050d4 <potiPrint+0x334>
	case 13:
		lcd_setString(4, 4, "Sirup percentage: 18%", LCD_FONT_8, false);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4a4b      	ldr	r2, [pc, #300]	; (8005118 <potiPrint+0x378>)
 8004fea:	2104      	movs	r1, #4
 8004fec:	2004      	movs	r0, #4
 8004fee:	f7ff fc71 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 31, 24);
 8004ff2:	2318      	movs	r3, #24
 8004ff4:	221f      	movs	r2, #31
 8004ff6:	2110      	movs	r1, #16
 8004ff8:	200d      	movs	r0, #13
 8004ffa:	f7ff fdef 	bl	8004bdc <lcd_setBar>
		break;
 8004ffe:	e069      	b.n	80050d4 <potiPrint+0x334>
	case 14:
		lcd_setString(4, 4, "Sirup percentage: 19%", LCD_FONT_8, false);
 8005000:	2300      	movs	r3, #0
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	4a45      	ldr	r2, [pc, #276]	; (800511c <potiPrint+0x37c>)
 8005008:	2104      	movs	r1, #4
 800500a:	2004      	movs	r0, #4
 800500c:	f7ff fc62 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 32, 24);
 8005010:	2318      	movs	r3, #24
 8005012:	2220      	movs	r2, #32
 8005014:	2110      	movs	r1, #16
 8005016:	200d      	movs	r0, #13
 8005018:	f7ff fde0 	bl	8004bdc <lcd_setBar>
		break;
 800501c:	e05a      	b.n	80050d4 <potiPrint+0x334>
	case 15:
		lcd_setString(4, 4, "Sirup percentage: 20%", LCD_FONT_8, false);
 800501e:	2300      	movs	r3, #0
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	4a3e      	ldr	r2, [pc, #248]	; (8005120 <potiPrint+0x380>)
 8005026:	2104      	movs	r1, #4
 8005028:	2004      	movs	r0, #4
 800502a:	f7ff fc53 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 33, 24);
 800502e:	2318      	movs	r3, #24
 8005030:	2221      	movs	r2, #33	; 0x21
 8005032:	2110      	movs	r1, #16
 8005034:	200d      	movs	r0, #13
 8005036:	f7ff fdd1 	bl	8004bdc <lcd_setBar>
		break;
 800503a:	e04b      	b.n	80050d4 <potiPrint+0x334>
	case 16:
		lcd_setString(4, 4, "Sirup percentage: 21%", LCD_FONT_8, false);
 800503c:	2300      	movs	r3, #0
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2300      	movs	r3, #0
 8005042:	4a38      	ldr	r2, [pc, #224]	; (8005124 <potiPrint+0x384>)
 8005044:	2104      	movs	r1, #4
 8005046:	2004      	movs	r0, #4
 8005048:	f7ff fc44 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 34, 24);
 800504c:	2318      	movs	r3, #24
 800504e:	2222      	movs	r2, #34	; 0x22
 8005050:	2110      	movs	r1, #16
 8005052:	200d      	movs	r0, #13
 8005054:	f7ff fdc2 	bl	8004bdc <lcd_setBar>
		break;
 8005058:	e03c      	b.n	80050d4 <potiPrint+0x334>
	case 17:
		lcd_setString(4, 4, "Sirup percentage: 22%", LCD_FONT_8, false);
 800505a:	2300      	movs	r3, #0
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	2300      	movs	r3, #0
 8005060:	4a31      	ldr	r2, [pc, #196]	; (8005128 <potiPrint+0x388>)
 8005062:	2104      	movs	r1, #4
 8005064:	2004      	movs	r0, #4
 8005066:	f7ff fc35 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 35, 24);
 800506a:	2318      	movs	r3, #24
 800506c:	2223      	movs	r2, #35	; 0x23
 800506e:	2110      	movs	r1, #16
 8005070:	200d      	movs	r0, #13
 8005072:	f7ff fdb3 	bl	8004bdc <lcd_setBar>
		break;
 8005076:	e02d      	b.n	80050d4 <potiPrint+0x334>
	case 18:
		lcd_setString(4, 4, "Sirup percentage: 23%", LCD_FONT_8, false);
 8005078:	2300      	movs	r3, #0
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	4a2b      	ldr	r2, [pc, #172]	; (800512c <potiPrint+0x38c>)
 8005080:	2104      	movs	r1, #4
 8005082:	2004      	movs	r0, #4
 8005084:	f7ff fc26 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 36, 24);
 8005088:	2318      	movs	r3, #24
 800508a:	2224      	movs	r2, #36	; 0x24
 800508c:	2110      	movs	r1, #16
 800508e:	200d      	movs	r0, #13
 8005090:	f7ff fda4 	bl	8004bdc <lcd_setBar>
		break;
 8005094:	e01e      	b.n	80050d4 <potiPrint+0x334>
	case 19:
		lcd_setString(4, 4, "Sirup percentage: 24%", LCD_FONT_8, false);
 8005096:	2300      	movs	r3, #0
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <potiPrint+0x390>)
 800509e:	2104      	movs	r1, #4
 80050a0:	2004      	movs	r0, #4
 80050a2:	f7ff fc17 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 37, 24);
 80050a6:	2318      	movs	r3, #24
 80050a8:	2225      	movs	r2, #37	; 0x25
 80050aa:	2110      	movs	r1, #16
 80050ac:	200d      	movs	r0, #13
 80050ae:	f7ff fd95 	bl	8004bdc <lcd_setBar>
		break;
 80050b2:	e00f      	b.n	80050d4 <potiPrint+0x334>
	case 20:
		lcd_setString(4, 4, "Sirup percentage: 25%", LCD_FONT_8, false);
 80050b4:	2300      	movs	r3, #0
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <potiPrint+0x394>)
 80050bc:	2104      	movs	r1, #4
 80050be:	2004      	movs	r0, #4
 80050c0:	f7ff fc08 	bl	80048d4 <lcd_setString>
		lcd_setBar(13, 16, 38, 24);
 80050c4:	2318      	movs	r3, #24
 80050c6:	2226      	movs	r2, #38	; 0x26
 80050c8:	2110      	movs	r1, #16
 80050ca:	200d      	movs	r0, #13
 80050cc:	f7ff fd86 	bl	8004bdc <lcd_setBar>
		break;
 80050d0:	e000      	b.n	80050d4 <potiPrint+0x334>
	default:
		break;
 80050d2:	bf00      	nop
	}
	lcd_show();
 80050d4:	f7ff fd4e 	bl	8004b74 <lcd_show>

	//printf("\rPot0: %4d", (int)*value/200);
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	51eb851f 	.word	0x51eb851f
 80050e4:	08007f7c 	.word	0x08007f7c
 80050e8:	08007f94 	.word	0x08007f94
 80050ec:	08007fac 	.word	0x08007fac
 80050f0:	08007fc4 	.word	0x08007fc4
 80050f4:	08007fdc 	.word	0x08007fdc
 80050f8:	08007ff4 	.word	0x08007ff4
 80050fc:	0800800c 	.word	0x0800800c
 8005100:	08008024 	.word	0x08008024
 8005104:	0800803c 	.word	0x0800803c
 8005108:	08008054 	.word	0x08008054
 800510c:	0800806c 	.word	0x0800806c
 8005110:	08008084 	.word	0x08008084
 8005114:	0800809c 	.word	0x0800809c
 8005118:	080080b4 	.word	0x080080b4
 800511c:	080080cc 	.word	0x080080cc
 8005120:	080080e4 	.word	0x080080e4
 8005124:	080080fc 	.word	0x080080fc
 8005128:	08008114 	.word	0x08008114
 800512c:	0800812c 	.word	0x0800812c
 8005130:	08008144 	.word	0x08008144
 8005134:	0800815c 	.word	0x0800815c

08005138 <potiDeInit>:

HAL_StatusTypeDef potiDeInit()
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
	return HAL_ADC_Stop(&hadc1);
 800513c:	4802      	ldr	r0, [pc, #8]	; (8005148 <potiDeInit+0x10>)
 800513e:	f7fc fd93 	bl	8001c68 <HAL_ADC_Stop>
 8005142:	4603      	mov	r3, r0
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}
 8005148:	2000040c 	.word	0x2000040c

0800514c <getWeight>:
 *  Created on: Dec 18, 2021
 *      Author: Franziska
 */


void getWeight(){
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0


}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <__errno>:
 800515c:	4b01      	ldr	r3, [pc, #4]	; (8005164 <__errno+0x8>)
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000010 	.word	0x20000010

08005168 <__libc_init_array>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4d0d      	ldr	r5, [pc, #52]	; (80051a0 <__libc_init_array+0x38>)
 800516c:	4c0d      	ldr	r4, [pc, #52]	; (80051a4 <__libc_init_array+0x3c>)
 800516e:	1b64      	subs	r4, r4, r5
 8005170:	10a4      	asrs	r4, r4, #2
 8005172:	2600      	movs	r6, #0
 8005174:	42a6      	cmp	r6, r4
 8005176:	d109      	bne.n	800518c <__libc_init_array+0x24>
 8005178:	4d0b      	ldr	r5, [pc, #44]	; (80051a8 <__libc_init_array+0x40>)
 800517a:	4c0c      	ldr	r4, [pc, #48]	; (80051ac <__libc_init_array+0x44>)
 800517c:	f002 feb6 	bl	8007eec <_init>
 8005180:	1b64      	subs	r4, r4, r5
 8005182:	10a4      	asrs	r4, r4, #2
 8005184:	2600      	movs	r6, #0
 8005186:	42a6      	cmp	r6, r4
 8005188:	d105      	bne.n	8005196 <__libc_init_array+0x2e>
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005190:	4798      	blx	r3
 8005192:	3601      	adds	r6, #1
 8005194:	e7ee      	b.n	8005174 <__libc_init_array+0xc>
 8005196:	f855 3b04 	ldr.w	r3, [r5], #4
 800519a:	4798      	blx	r3
 800519c:	3601      	adds	r6, #1
 800519e:	e7f2      	b.n	8005186 <__libc_init_array+0x1e>
 80051a0:	080088fc 	.word	0x080088fc
 80051a4:	080088fc 	.word	0x080088fc
 80051a8:	080088fc 	.word	0x080088fc
 80051ac:	08008900 	.word	0x08008900

080051b0 <memset>:
 80051b0:	4402      	add	r2, r0
 80051b2:	4603      	mov	r3, r0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d100      	bne.n	80051ba <memset+0xa>
 80051b8:	4770      	bx	lr
 80051ba:	f803 1b01 	strb.w	r1, [r3], #1
 80051be:	e7f9      	b.n	80051b4 <memset+0x4>

080051c0 <__cvt>:
 80051c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	ec55 4b10 	vmov	r4, r5, d0
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	460e      	mov	r6, r1
 80051cc:	4619      	mov	r1, r3
 80051ce:	462b      	mov	r3, r5
 80051d0:	bfbb      	ittet	lt
 80051d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051d6:	461d      	movlt	r5, r3
 80051d8:	2300      	movge	r3, #0
 80051da:	232d      	movlt	r3, #45	; 0x2d
 80051dc:	700b      	strb	r3, [r1, #0]
 80051de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051e4:	4691      	mov	r9, r2
 80051e6:	f023 0820 	bic.w	r8, r3, #32
 80051ea:	bfbc      	itt	lt
 80051ec:	4622      	movlt	r2, r4
 80051ee:	4614      	movlt	r4, r2
 80051f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051f4:	d005      	beq.n	8005202 <__cvt+0x42>
 80051f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051fa:	d100      	bne.n	80051fe <__cvt+0x3e>
 80051fc:	3601      	adds	r6, #1
 80051fe:	2102      	movs	r1, #2
 8005200:	e000      	b.n	8005204 <__cvt+0x44>
 8005202:	2103      	movs	r1, #3
 8005204:	ab03      	add	r3, sp, #12
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	ab02      	add	r3, sp, #8
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	ec45 4b10 	vmov	d0, r4, r5
 8005210:	4653      	mov	r3, sl
 8005212:	4632      	mov	r2, r6
 8005214:	f000 fdac 	bl	8005d70 <_dtoa_r>
 8005218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800521c:	4607      	mov	r7, r0
 800521e:	d102      	bne.n	8005226 <__cvt+0x66>
 8005220:	f019 0f01 	tst.w	r9, #1
 8005224:	d022      	beq.n	800526c <__cvt+0xac>
 8005226:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800522a:	eb07 0906 	add.w	r9, r7, r6
 800522e:	d110      	bne.n	8005252 <__cvt+0x92>
 8005230:	783b      	ldrb	r3, [r7, #0]
 8005232:	2b30      	cmp	r3, #48	; 0x30
 8005234:	d10a      	bne.n	800524c <__cvt+0x8c>
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	4620      	mov	r0, r4
 800523c:	4629      	mov	r1, r5
 800523e:	f7fb fc63 	bl	8000b08 <__aeabi_dcmpeq>
 8005242:	b918      	cbnz	r0, 800524c <__cvt+0x8c>
 8005244:	f1c6 0601 	rsb	r6, r6, #1
 8005248:	f8ca 6000 	str.w	r6, [sl]
 800524c:	f8da 3000 	ldr.w	r3, [sl]
 8005250:	4499      	add	r9, r3
 8005252:	2200      	movs	r2, #0
 8005254:	2300      	movs	r3, #0
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	f7fb fc55 	bl	8000b08 <__aeabi_dcmpeq>
 800525e:	b108      	cbz	r0, 8005264 <__cvt+0xa4>
 8005260:	f8cd 900c 	str.w	r9, [sp, #12]
 8005264:	2230      	movs	r2, #48	; 0x30
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	454b      	cmp	r3, r9
 800526a:	d307      	bcc.n	800527c <__cvt+0xbc>
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005270:	1bdb      	subs	r3, r3, r7
 8005272:	4638      	mov	r0, r7
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	b004      	add	sp, #16
 8005278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	9103      	str	r1, [sp, #12]
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e7f0      	b.n	8005266 <__cvt+0xa6>

08005284 <__exponent>:
 8005284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005286:	4603      	mov	r3, r0
 8005288:	2900      	cmp	r1, #0
 800528a:	bfb8      	it	lt
 800528c:	4249      	neglt	r1, r1
 800528e:	f803 2b02 	strb.w	r2, [r3], #2
 8005292:	bfb4      	ite	lt
 8005294:	222d      	movlt	r2, #45	; 0x2d
 8005296:	222b      	movge	r2, #43	; 0x2b
 8005298:	2909      	cmp	r1, #9
 800529a:	7042      	strb	r2, [r0, #1]
 800529c:	dd2a      	ble.n	80052f4 <__exponent+0x70>
 800529e:	f10d 0407 	add.w	r4, sp, #7
 80052a2:	46a4      	mov	ip, r4
 80052a4:	270a      	movs	r7, #10
 80052a6:	46a6      	mov	lr, r4
 80052a8:	460a      	mov	r2, r1
 80052aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80052ae:	fb07 1516 	mls	r5, r7, r6, r1
 80052b2:	3530      	adds	r5, #48	; 0x30
 80052b4:	2a63      	cmp	r2, #99	; 0x63
 80052b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80052ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052be:	4631      	mov	r1, r6
 80052c0:	dcf1      	bgt.n	80052a6 <__exponent+0x22>
 80052c2:	3130      	adds	r1, #48	; 0x30
 80052c4:	f1ae 0502 	sub.w	r5, lr, #2
 80052c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052cc:	1c44      	adds	r4, r0, #1
 80052ce:	4629      	mov	r1, r5
 80052d0:	4561      	cmp	r1, ip
 80052d2:	d30a      	bcc.n	80052ea <__exponent+0x66>
 80052d4:	f10d 0209 	add.w	r2, sp, #9
 80052d8:	eba2 020e 	sub.w	r2, r2, lr
 80052dc:	4565      	cmp	r5, ip
 80052de:	bf88      	it	hi
 80052e0:	2200      	movhi	r2, #0
 80052e2:	4413      	add	r3, r2
 80052e4:	1a18      	subs	r0, r3, r0
 80052e6:	b003      	add	sp, #12
 80052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052f2:	e7ed      	b.n	80052d0 <__exponent+0x4c>
 80052f4:	2330      	movs	r3, #48	; 0x30
 80052f6:	3130      	adds	r1, #48	; 0x30
 80052f8:	7083      	strb	r3, [r0, #2]
 80052fa:	70c1      	strb	r1, [r0, #3]
 80052fc:	1d03      	adds	r3, r0, #4
 80052fe:	e7f1      	b.n	80052e4 <__exponent+0x60>

08005300 <_printf_float>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	ed2d 8b02 	vpush	{d8}
 8005308:	b08d      	sub	sp, #52	; 0x34
 800530a:	460c      	mov	r4, r1
 800530c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005310:	4616      	mov	r6, r2
 8005312:	461f      	mov	r7, r3
 8005314:	4605      	mov	r5, r0
 8005316:	f001 fccf 	bl	8006cb8 <_localeconv_r>
 800531a:	f8d0 a000 	ldr.w	sl, [r0]
 800531e:	4650      	mov	r0, sl
 8005320:	f7fa ff76 	bl	8000210 <strlen>
 8005324:	2300      	movs	r3, #0
 8005326:	930a      	str	r3, [sp, #40]	; 0x28
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	f8d8 3000 	ldr.w	r3, [r8]
 8005330:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005334:	3307      	adds	r3, #7
 8005336:	f023 0307 	bic.w	r3, r3, #7
 800533a:	f103 0208 	add.w	r2, r3, #8
 800533e:	f8c8 2000 	str.w	r2, [r8]
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800534a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800534e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005352:	9307      	str	r3, [sp, #28]
 8005354:	f8cd 8018 	str.w	r8, [sp, #24]
 8005358:	ee08 0a10 	vmov	s16, r0
 800535c:	4b9f      	ldr	r3, [pc, #636]	; (80055dc <_printf_float+0x2dc>)
 800535e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005362:	f04f 32ff 	mov.w	r2, #4294967295
 8005366:	f7fb fc01 	bl	8000b6c <__aeabi_dcmpun>
 800536a:	bb88      	cbnz	r0, 80053d0 <_printf_float+0xd0>
 800536c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005370:	4b9a      	ldr	r3, [pc, #616]	; (80055dc <_printf_float+0x2dc>)
 8005372:	f04f 32ff 	mov.w	r2, #4294967295
 8005376:	f7fb fbdb 	bl	8000b30 <__aeabi_dcmple>
 800537a:	bb48      	cbnz	r0, 80053d0 <_printf_float+0xd0>
 800537c:	2200      	movs	r2, #0
 800537e:	2300      	movs	r3, #0
 8005380:	4640      	mov	r0, r8
 8005382:	4649      	mov	r1, r9
 8005384:	f7fb fbca 	bl	8000b1c <__aeabi_dcmplt>
 8005388:	b110      	cbz	r0, 8005390 <_printf_float+0x90>
 800538a:	232d      	movs	r3, #45	; 0x2d
 800538c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005390:	4b93      	ldr	r3, [pc, #588]	; (80055e0 <_printf_float+0x2e0>)
 8005392:	4894      	ldr	r0, [pc, #592]	; (80055e4 <_printf_float+0x2e4>)
 8005394:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005398:	bf94      	ite	ls
 800539a:	4698      	movls	r8, r3
 800539c:	4680      	movhi	r8, r0
 800539e:	2303      	movs	r3, #3
 80053a0:	6123      	str	r3, [r4, #16]
 80053a2:	9b05      	ldr	r3, [sp, #20]
 80053a4:	f023 0204 	bic.w	r2, r3, #4
 80053a8:	6022      	str	r2, [r4, #0]
 80053aa:	f04f 0900 	mov.w	r9, #0
 80053ae:	9700      	str	r7, [sp, #0]
 80053b0:	4633      	mov	r3, r6
 80053b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80053b4:	4621      	mov	r1, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f9d8 	bl	800576c <_printf_common>
 80053bc:	3001      	adds	r0, #1
 80053be:	f040 8090 	bne.w	80054e2 <_printf_float+0x1e2>
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	b00d      	add	sp, #52	; 0x34
 80053c8:	ecbd 8b02 	vpop	{d8}
 80053cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d0:	4642      	mov	r2, r8
 80053d2:	464b      	mov	r3, r9
 80053d4:	4640      	mov	r0, r8
 80053d6:	4649      	mov	r1, r9
 80053d8:	f7fb fbc8 	bl	8000b6c <__aeabi_dcmpun>
 80053dc:	b140      	cbz	r0, 80053f0 <_printf_float+0xf0>
 80053de:	464b      	mov	r3, r9
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bfbc      	itt	lt
 80053e4:	232d      	movlt	r3, #45	; 0x2d
 80053e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053ea:	487f      	ldr	r0, [pc, #508]	; (80055e8 <_printf_float+0x2e8>)
 80053ec:	4b7f      	ldr	r3, [pc, #508]	; (80055ec <_printf_float+0x2ec>)
 80053ee:	e7d1      	b.n	8005394 <_printf_float+0x94>
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053f6:	9206      	str	r2, [sp, #24]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	d13f      	bne.n	800547c <_printf_float+0x17c>
 80053fc:	2306      	movs	r3, #6
 80053fe:	6063      	str	r3, [r4, #4]
 8005400:	9b05      	ldr	r3, [sp, #20]
 8005402:	6861      	ldr	r1, [r4, #4]
 8005404:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005408:	2300      	movs	r3, #0
 800540a:	9303      	str	r3, [sp, #12]
 800540c:	ab0a      	add	r3, sp, #40	; 0x28
 800540e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005412:	ab09      	add	r3, sp, #36	; 0x24
 8005414:	ec49 8b10 	vmov	d0, r8, r9
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6022      	str	r2, [r4, #0]
 800541c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005420:	4628      	mov	r0, r5
 8005422:	f7ff fecd 	bl	80051c0 <__cvt>
 8005426:	9b06      	ldr	r3, [sp, #24]
 8005428:	9909      	ldr	r1, [sp, #36]	; 0x24
 800542a:	2b47      	cmp	r3, #71	; 0x47
 800542c:	4680      	mov	r8, r0
 800542e:	d108      	bne.n	8005442 <_printf_float+0x142>
 8005430:	1cc8      	adds	r0, r1, #3
 8005432:	db02      	blt.n	800543a <_printf_float+0x13a>
 8005434:	6863      	ldr	r3, [r4, #4]
 8005436:	4299      	cmp	r1, r3
 8005438:	dd41      	ble.n	80054be <_printf_float+0x1be>
 800543a:	f1ab 0b02 	sub.w	fp, fp, #2
 800543e:	fa5f fb8b 	uxtb.w	fp, fp
 8005442:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005446:	d820      	bhi.n	800548a <_printf_float+0x18a>
 8005448:	3901      	subs	r1, #1
 800544a:	465a      	mov	r2, fp
 800544c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005450:	9109      	str	r1, [sp, #36]	; 0x24
 8005452:	f7ff ff17 	bl	8005284 <__exponent>
 8005456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005458:	1813      	adds	r3, r2, r0
 800545a:	2a01      	cmp	r2, #1
 800545c:	4681      	mov	r9, r0
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	dc02      	bgt.n	8005468 <_printf_float+0x168>
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	07d2      	lsls	r2, r2, #31
 8005466:	d501      	bpl.n	800546c <_printf_float+0x16c>
 8005468:	3301      	adds	r3, #1
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005470:	2b00      	cmp	r3, #0
 8005472:	d09c      	beq.n	80053ae <_printf_float+0xae>
 8005474:	232d      	movs	r3, #45	; 0x2d
 8005476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800547a:	e798      	b.n	80053ae <_printf_float+0xae>
 800547c:	9a06      	ldr	r2, [sp, #24]
 800547e:	2a47      	cmp	r2, #71	; 0x47
 8005480:	d1be      	bne.n	8005400 <_printf_float+0x100>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1bc      	bne.n	8005400 <_printf_float+0x100>
 8005486:	2301      	movs	r3, #1
 8005488:	e7b9      	b.n	80053fe <_printf_float+0xfe>
 800548a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800548e:	d118      	bne.n	80054c2 <_printf_float+0x1c2>
 8005490:	2900      	cmp	r1, #0
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	dd0b      	ble.n	80054ae <_printf_float+0x1ae>
 8005496:	6121      	str	r1, [r4, #16]
 8005498:	b913      	cbnz	r3, 80054a0 <_printf_float+0x1a0>
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	07d0      	lsls	r0, r2, #31
 800549e:	d502      	bpl.n	80054a6 <_printf_float+0x1a6>
 80054a0:	3301      	adds	r3, #1
 80054a2:	440b      	add	r3, r1
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80054a8:	f04f 0900 	mov.w	r9, #0
 80054ac:	e7de      	b.n	800546c <_printf_float+0x16c>
 80054ae:	b913      	cbnz	r3, 80054b6 <_printf_float+0x1b6>
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	07d2      	lsls	r2, r2, #31
 80054b4:	d501      	bpl.n	80054ba <_printf_float+0x1ba>
 80054b6:	3302      	adds	r3, #2
 80054b8:	e7f4      	b.n	80054a4 <_printf_float+0x1a4>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7f2      	b.n	80054a4 <_printf_float+0x1a4>
 80054be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c4:	4299      	cmp	r1, r3
 80054c6:	db05      	blt.n	80054d4 <_printf_float+0x1d4>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	6121      	str	r1, [r4, #16]
 80054cc:	07d8      	lsls	r0, r3, #31
 80054ce:	d5ea      	bpl.n	80054a6 <_printf_float+0x1a6>
 80054d0:	1c4b      	adds	r3, r1, #1
 80054d2:	e7e7      	b.n	80054a4 <_printf_float+0x1a4>
 80054d4:	2900      	cmp	r1, #0
 80054d6:	bfd4      	ite	le
 80054d8:	f1c1 0202 	rsble	r2, r1, #2
 80054dc:	2201      	movgt	r2, #1
 80054de:	4413      	add	r3, r2
 80054e0:	e7e0      	b.n	80054a4 <_printf_float+0x1a4>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	055a      	lsls	r2, r3, #21
 80054e6:	d407      	bmi.n	80054f8 <_printf_float+0x1f8>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	4642      	mov	r2, r8
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	d12c      	bne.n	8005550 <_printf_float+0x250>
 80054f6:	e764      	b.n	80053c2 <_printf_float+0xc2>
 80054f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054fc:	f240 80e0 	bls.w	80056c0 <_printf_float+0x3c0>
 8005500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005504:	2200      	movs	r2, #0
 8005506:	2300      	movs	r3, #0
 8005508:	f7fb fafe 	bl	8000b08 <__aeabi_dcmpeq>
 800550c:	2800      	cmp	r0, #0
 800550e:	d034      	beq.n	800557a <_printf_float+0x27a>
 8005510:	4a37      	ldr	r2, [pc, #220]	; (80055f0 <_printf_float+0x2f0>)
 8005512:	2301      	movs	r3, #1
 8005514:	4631      	mov	r1, r6
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	f43f af51 	beq.w	80053c2 <_printf_float+0xc2>
 8005520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005524:	429a      	cmp	r2, r3
 8005526:	db02      	blt.n	800552e <_printf_float+0x22e>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	07d8      	lsls	r0, r3, #31
 800552c:	d510      	bpl.n	8005550 <_printf_float+0x250>
 800552e:	ee18 3a10 	vmov	r3, s16
 8005532:	4652      	mov	r2, sl
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f af41 	beq.w	80053c2 <_printf_float+0xc2>
 8005540:	f04f 0800 	mov.w	r8, #0
 8005544:	f104 091a 	add.w	r9, r4, #26
 8005548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800554a:	3b01      	subs	r3, #1
 800554c:	4543      	cmp	r3, r8
 800554e:	dc09      	bgt.n	8005564 <_printf_float+0x264>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	079b      	lsls	r3, r3, #30
 8005554:	f100 8105 	bmi.w	8005762 <_printf_float+0x462>
 8005558:	68e0      	ldr	r0, [r4, #12]
 800555a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555c:	4298      	cmp	r0, r3
 800555e:	bfb8      	it	lt
 8005560:	4618      	movlt	r0, r3
 8005562:	e730      	b.n	80053c6 <_printf_float+0xc6>
 8005564:	2301      	movs	r3, #1
 8005566:	464a      	mov	r2, r9
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f af27 	beq.w	80053c2 <_printf_float+0xc2>
 8005574:	f108 0801 	add.w	r8, r8, #1
 8005578:	e7e6      	b.n	8005548 <_printf_float+0x248>
 800557a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	dc39      	bgt.n	80055f4 <_printf_float+0x2f4>
 8005580:	4a1b      	ldr	r2, [pc, #108]	; (80055f0 <_printf_float+0x2f0>)
 8005582:	2301      	movs	r3, #1
 8005584:	4631      	mov	r1, r6
 8005586:	4628      	mov	r0, r5
 8005588:	47b8      	blx	r7
 800558a:	3001      	adds	r0, #1
 800558c:	f43f af19 	beq.w	80053c2 <_printf_float+0xc2>
 8005590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005594:	4313      	orrs	r3, r2
 8005596:	d102      	bne.n	800559e <_printf_float+0x29e>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	07d9      	lsls	r1, r3, #31
 800559c:	d5d8      	bpl.n	8005550 <_printf_float+0x250>
 800559e:	ee18 3a10 	vmov	r3, s16
 80055a2:	4652      	mov	r2, sl
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	f43f af09 	beq.w	80053c2 <_printf_float+0xc2>
 80055b0:	f04f 0900 	mov.w	r9, #0
 80055b4:	f104 0a1a 	add.w	sl, r4, #26
 80055b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ba:	425b      	negs	r3, r3
 80055bc:	454b      	cmp	r3, r9
 80055be:	dc01      	bgt.n	80055c4 <_printf_float+0x2c4>
 80055c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c2:	e792      	b.n	80054ea <_printf_float+0x1ea>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4652      	mov	r2, sl
 80055c8:	4631      	mov	r1, r6
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b8      	blx	r7
 80055ce:	3001      	adds	r0, #1
 80055d0:	f43f aef7 	beq.w	80053c2 <_printf_float+0xc2>
 80055d4:	f109 0901 	add.w	r9, r9, #1
 80055d8:	e7ee      	b.n	80055b8 <_printf_float+0x2b8>
 80055da:	bf00      	nop
 80055dc:	7fefffff 	.word	0x7fefffff
 80055e0:	08008514 	.word	0x08008514
 80055e4:	08008518 	.word	0x08008518
 80055e8:	08008520 	.word	0x08008520
 80055ec:	0800851c 	.word	0x0800851c
 80055f0:	08008524 	.word	0x08008524
 80055f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055f8:	429a      	cmp	r2, r3
 80055fa:	bfa8      	it	ge
 80055fc:	461a      	movge	r2, r3
 80055fe:	2a00      	cmp	r2, #0
 8005600:	4691      	mov	r9, r2
 8005602:	dc37      	bgt.n	8005674 <_printf_float+0x374>
 8005604:	f04f 0b00 	mov.w	fp, #0
 8005608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800560c:	f104 021a 	add.w	r2, r4, #26
 8005610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005612:	9305      	str	r3, [sp, #20]
 8005614:	eba3 0309 	sub.w	r3, r3, r9
 8005618:	455b      	cmp	r3, fp
 800561a:	dc33      	bgt.n	8005684 <_printf_float+0x384>
 800561c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005620:	429a      	cmp	r2, r3
 8005622:	db3b      	blt.n	800569c <_printf_float+0x39c>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	07da      	lsls	r2, r3, #31
 8005628:	d438      	bmi.n	800569c <_printf_float+0x39c>
 800562a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800562c:	9b05      	ldr	r3, [sp, #20]
 800562e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	eba2 0901 	sub.w	r9, r2, r1
 8005636:	4599      	cmp	r9, r3
 8005638:	bfa8      	it	ge
 800563a:	4699      	movge	r9, r3
 800563c:	f1b9 0f00 	cmp.w	r9, #0
 8005640:	dc35      	bgt.n	80056ae <_printf_float+0x3ae>
 8005642:	f04f 0800 	mov.w	r8, #0
 8005646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800564a:	f104 0a1a 	add.w	sl, r4, #26
 800564e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	eba3 0309 	sub.w	r3, r3, r9
 8005658:	4543      	cmp	r3, r8
 800565a:	f77f af79 	ble.w	8005550 <_printf_float+0x250>
 800565e:	2301      	movs	r3, #1
 8005660:	4652      	mov	r2, sl
 8005662:	4631      	mov	r1, r6
 8005664:	4628      	mov	r0, r5
 8005666:	47b8      	blx	r7
 8005668:	3001      	adds	r0, #1
 800566a:	f43f aeaa 	beq.w	80053c2 <_printf_float+0xc2>
 800566e:	f108 0801 	add.w	r8, r8, #1
 8005672:	e7ec      	b.n	800564e <_printf_float+0x34e>
 8005674:	4613      	mov	r3, r2
 8005676:	4631      	mov	r1, r6
 8005678:	4642      	mov	r2, r8
 800567a:	4628      	mov	r0, r5
 800567c:	47b8      	blx	r7
 800567e:	3001      	adds	r0, #1
 8005680:	d1c0      	bne.n	8005604 <_printf_float+0x304>
 8005682:	e69e      	b.n	80053c2 <_printf_float+0xc2>
 8005684:	2301      	movs	r3, #1
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	9205      	str	r2, [sp, #20]
 800568c:	47b8      	blx	r7
 800568e:	3001      	adds	r0, #1
 8005690:	f43f ae97 	beq.w	80053c2 <_printf_float+0xc2>
 8005694:	9a05      	ldr	r2, [sp, #20]
 8005696:	f10b 0b01 	add.w	fp, fp, #1
 800569a:	e7b9      	b.n	8005610 <_printf_float+0x310>
 800569c:	ee18 3a10 	vmov	r3, s16
 80056a0:	4652      	mov	r2, sl
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	d1be      	bne.n	800562a <_printf_float+0x32a>
 80056ac:	e689      	b.n	80053c2 <_printf_float+0xc2>
 80056ae:	9a05      	ldr	r2, [sp, #20]
 80056b0:	464b      	mov	r3, r9
 80056b2:	4442      	add	r2, r8
 80056b4:	4631      	mov	r1, r6
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	d1c1      	bne.n	8005642 <_printf_float+0x342>
 80056be:	e680      	b.n	80053c2 <_printf_float+0xc2>
 80056c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056c2:	2a01      	cmp	r2, #1
 80056c4:	dc01      	bgt.n	80056ca <_printf_float+0x3ca>
 80056c6:	07db      	lsls	r3, r3, #31
 80056c8:	d538      	bpl.n	800573c <_printf_float+0x43c>
 80056ca:	2301      	movs	r3, #1
 80056cc:	4642      	mov	r2, r8
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	f43f ae74 	beq.w	80053c2 <_printf_float+0xc2>
 80056da:	ee18 3a10 	vmov	r3, s16
 80056de:	4652      	mov	r2, sl
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f ae6b 	beq.w	80053c2 <_printf_float+0xc2>
 80056ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	f7fb fa08 	bl	8000b08 <__aeabi_dcmpeq>
 80056f8:	b9d8      	cbnz	r0, 8005732 <_printf_float+0x432>
 80056fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fc:	f108 0201 	add.w	r2, r8, #1
 8005700:	3b01      	subs	r3, #1
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	d10e      	bne.n	800572a <_printf_float+0x42a>
 800570c:	e659      	b.n	80053c2 <_printf_float+0xc2>
 800570e:	2301      	movs	r3, #1
 8005710:	4652      	mov	r2, sl
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f ae52 	beq.w	80053c2 <_printf_float+0xc2>
 800571e:	f108 0801 	add.w	r8, r8, #1
 8005722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	4543      	cmp	r3, r8
 8005728:	dcf1      	bgt.n	800570e <_printf_float+0x40e>
 800572a:	464b      	mov	r3, r9
 800572c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005730:	e6dc      	b.n	80054ec <_printf_float+0x1ec>
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	f104 0a1a 	add.w	sl, r4, #26
 800573a:	e7f2      	b.n	8005722 <_printf_float+0x422>
 800573c:	2301      	movs	r3, #1
 800573e:	4642      	mov	r2, r8
 8005740:	e7df      	b.n	8005702 <_printf_float+0x402>
 8005742:	2301      	movs	r3, #1
 8005744:	464a      	mov	r2, r9
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	47b8      	blx	r7
 800574c:	3001      	adds	r0, #1
 800574e:	f43f ae38 	beq.w	80053c2 <_printf_float+0xc2>
 8005752:	f108 0801 	add.w	r8, r8, #1
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800575a:	1a5b      	subs	r3, r3, r1
 800575c:	4543      	cmp	r3, r8
 800575e:	dcf0      	bgt.n	8005742 <_printf_float+0x442>
 8005760:	e6fa      	b.n	8005558 <_printf_float+0x258>
 8005762:	f04f 0800 	mov.w	r8, #0
 8005766:	f104 0919 	add.w	r9, r4, #25
 800576a:	e7f4      	b.n	8005756 <_printf_float+0x456>

0800576c <_printf_common>:
 800576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	4616      	mov	r6, r2
 8005772:	4699      	mov	r9, r3
 8005774:	688a      	ldr	r2, [r1, #8]
 8005776:	690b      	ldr	r3, [r1, #16]
 8005778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800577c:	4293      	cmp	r3, r2
 800577e:	bfb8      	it	lt
 8005780:	4613      	movlt	r3, r2
 8005782:	6033      	str	r3, [r6, #0]
 8005784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005788:	4607      	mov	r7, r0
 800578a:	460c      	mov	r4, r1
 800578c:	b10a      	cbz	r2, 8005792 <_printf_common+0x26>
 800578e:	3301      	adds	r3, #1
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	0699      	lsls	r1, r3, #26
 8005796:	bf42      	ittt	mi
 8005798:	6833      	ldrmi	r3, [r6, #0]
 800579a:	3302      	addmi	r3, #2
 800579c:	6033      	strmi	r3, [r6, #0]
 800579e:	6825      	ldr	r5, [r4, #0]
 80057a0:	f015 0506 	ands.w	r5, r5, #6
 80057a4:	d106      	bne.n	80057b4 <_printf_common+0x48>
 80057a6:	f104 0a19 	add.w	sl, r4, #25
 80057aa:	68e3      	ldr	r3, [r4, #12]
 80057ac:	6832      	ldr	r2, [r6, #0]
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	dc26      	bgt.n	8005802 <_printf_common+0x96>
 80057b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057b8:	1e13      	subs	r3, r2, #0
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	bf18      	it	ne
 80057be:	2301      	movne	r3, #1
 80057c0:	0692      	lsls	r2, r2, #26
 80057c2:	d42b      	bmi.n	800581c <_printf_common+0xb0>
 80057c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057c8:	4649      	mov	r1, r9
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	3001      	adds	r0, #1
 80057d0:	d01e      	beq.n	8005810 <_printf_common+0xa4>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	68e5      	ldr	r5, [r4, #12]
 80057d6:	6832      	ldr	r2, [r6, #0]
 80057d8:	f003 0306 	and.w	r3, r3, #6
 80057dc:	2b04      	cmp	r3, #4
 80057de:	bf08      	it	eq
 80057e0:	1aad      	subeq	r5, r5, r2
 80057e2:	68a3      	ldr	r3, [r4, #8]
 80057e4:	6922      	ldr	r2, [r4, #16]
 80057e6:	bf0c      	ite	eq
 80057e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ec:	2500      	movne	r5, #0
 80057ee:	4293      	cmp	r3, r2
 80057f0:	bfc4      	itt	gt
 80057f2:	1a9b      	subgt	r3, r3, r2
 80057f4:	18ed      	addgt	r5, r5, r3
 80057f6:	2600      	movs	r6, #0
 80057f8:	341a      	adds	r4, #26
 80057fa:	42b5      	cmp	r5, r6
 80057fc:	d11a      	bne.n	8005834 <_printf_common+0xc8>
 80057fe:	2000      	movs	r0, #0
 8005800:	e008      	b.n	8005814 <_printf_common+0xa8>
 8005802:	2301      	movs	r3, #1
 8005804:	4652      	mov	r2, sl
 8005806:	4649      	mov	r1, r9
 8005808:	4638      	mov	r0, r7
 800580a:	47c0      	blx	r8
 800580c:	3001      	adds	r0, #1
 800580e:	d103      	bne.n	8005818 <_printf_common+0xac>
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005818:	3501      	adds	r5, #1
 800581a:	e7c6      	b.n	80057aa <_printf_common+0x3e>
 800581c:	18e1      	adds	r1, r4, r3
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	2030      	movs	r0, #48	; 0x30
 8005822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005826:	4422      	add	r2, r4
 8005828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800582c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005830:	3302      	adds	r3, #2
 8005832:	e7c7      	b.n	80057c4 <_printf_common+0x58>
 8005834:	2301      	movs	r3, #1
 8005836:	4622      	mov	r2, r4
 8005838:	4649      	mov	r1, r9
 800583a:	4638      	mov	r0, r7
 800583c:	47c0      	blx	r8
 800583e:	3001      	adds	r0, #1
 8005840:	d0e6      	beq.n	8005810 <_printf_common+0xa4>
 8005842:	3601      	adds	r6, #1
 8005844:	e7d9      	b.n	80057fa <_printf_common+0x8e>
	...

08005848 <_printf_i>:
 8005848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	460c      	mov	r4, r1
 800584e:	4691      	mov	r9, r2
 8005850:	7e27      	ldrb	r7, [r4, #24]
 8005852:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005854:	2f78      	cmp	r7, #120	; 0x78
 8005856:	4680      	mov	r8, r0
 8005858:	469a      	mov	sl, r3
 800585a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800585e:	d807      	bhi.n	8005870 <_printf_i+0x28>
 8005860:	2f62      	cmp	r7, #98	; 0x62
 8005862:	d80a      	bhi.n	800587a <_printf_i+0x32>
 8005864:	2f00      	cmp	r7, #0
 8005866:	f000 80d8 	beq.w	8005a1a <_printf_i+0x1d2>
 800586a:	2f58      	cmp	r7, #88	; 0x58
 800586c:	f000 80a3 	beq.w	80059b6 <_printf_i+0x16e>
 8005870:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005878:	e03a      	b.n	80058f0 <_printf_i+0xa8>
 800587a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800587e:	2b15      	cmp	r3, #21
 8005880:	d8f6      	bhi.n	8005870 <_printf_i+0x28>
 8005882:	a001      	add	r0, pc, #4	; (adr r0, 8005888 <_printf_i+0x40>)
 8005884:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005888:	080058e1 	.word	0x080058e1
 800588c:	080058f5 	.word	0x080058f5
 8005890:	08005871 	.word	0x08005871
 8005894:	08005871 	.word	0x08005871
 8005898:	08005871 	.word	0x08005871
 800589c:	08005871 	.word	0x08005871
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	08005871 	.word	0x08005871
 80058a8:	08005871 	.word	0x08005871
 80058ac:	08005871 	.word	0x08005871
 80058b0:	08005871 	.word	0x08005871
 80058b4:	08005a01 	.word	0x08005a01
 80058b8:	08005925 	.word	0x08005925
 80058bc:	080059e3 	.word	0x080059e3
 80058c0:	08005871 	.word	0x08005871
 80058c4:	08005871 	.word	0x08005871
 80058c8:	08005a23 	.word	0x08005a23
 80058cc:	08005871 	.word	0x08005871
 80058d0:	08005925 	.word	0x08005925
 80058d4:	08005871 	.word	0x08005871
 80058d8:	08005871 	.word	0x08005871
 80058dc:	080059eb 	.word	0x080059eb
 80058e0:	680b      	ldr	r3, [r1, #0]
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	600a      	str	r2, [r1, #0]
 80058e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0a3      	b.n	8005a3c <_printf_i+0x1f4>
 80058f4:	6825      	ldr	r5, [r4, #0]
 80058f6:	6808      	ldr	r0, [r1, #0]
 80058f8:	062e      	lsls	r6, r5, #24
 80058fa:	f100 0304 	add.w	r3, r0, #4
 80058fe:	d50a      	bpl.n	8005916 <_printf_i+0xce>
 8005900:	6805      	ldr	r5, [r0, #0]
 8005902:	600b      	str	r3, [r1, #0]
 8005904:	2d00      	cmp	r5, #0
 8005906:	da03      	bge.n	8005910 <_printf_i+0xc8>
 8005908:	232d      	movs	r3, #45	; 0x2d
 800590a:	426d      	negs	r5, r5
 800590c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005910:	485e      	ldr	r0, [pc, #376]	; (8005a8c <_printf_i+0x244>)
 8005912:	230a      	movs	r3, #10
 8005914:	e019      	b.n	800594a <_printf_i+0x102>
 8005916:	f015 0f40 	tst.w	r5, #64	; 0x40
 800591a:	6805      	ldr	r5, [r0, #0]
 800591c:	600b      	str	r3, [r1, #0]
 800591e:	bf18      	it	ne
 8005920:	b22d      	sxthne	r5, r5
 8005922:	e7ef      	b.n	8005904 <_printf_i+0xbc>
 8005924:	680b      	ldr	r3, [r1, #0]
 8005926:	6825      	ldr	r5, [r4, #0]
 8005928:	1d18      	adds	r0, r3, #4
 800592a:	6008      	str	r0, [r1, #0]
 800592c:	0628      	lsls	r0, r5, #24
 800592e:	d501      	bpl.n	8005934 <_printf_i+0xec>
 8005930:	681d      	ldr	r5, [r3, #0]
 8005932:	e002      	b.n	800593a <_printf_i+0xf2>
 8005934:	0669      	lsls	r1, r5, #25
 8005936:	d5fb      	bpl.n	8005930 <_printf_i+0xe8>
 8005938:	881d      	ldrh	r5, [r3, #0]
 800593a:	4854      	ldr	r0, [pc, #336]	; (8005a8c <_printf_i+0x244>)
 800593c:	2f6f      	cmp	r7, #111	; 0x6f
 800593e:	bf0c      	ite	eq
 8005940:	2308      	moveq	r3, #8
 8005942:	230a      	movne	r3, #10
 8005944:	2100      	movs	r1, #0
 8005946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800594a:	6866      	ldr	r6, [r4, #4]
 800594c:	60a6      	str	r6, [r4, #8]
 800594e:	2e00      	cmp	r6, #0
 8005950:	bfa2      	ittt	ge
 8005952:	6821      	ldrge	r1, [r4, #0]
 8005954:	f021 0104 	bicge.w	r1, r1, #4
 8005958:	6021      	strge	r1, [r4, #0]
 800595a:	b90d      	cbnz	r5, 8005960 <_printf_i+0x118>
 800595c:	2e00      	cmp	r6, #0
 800595e:	d04d      	beq.n	80059fc <_printf_i+0x1b4>
 8005960:	4616      	mov	r6, r2
 8005962:	fbb5 f1f3 	udiv	r1, r5, r3
 8005966:	fb03 5711 	mls	r7, r3, r1, r5
 800596a:	5dc7      	ldrb	r7, [r0, r7]
 800596c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005970:	462f      	mov	r7, r5
 8005972:	42bb      	cmp	r3, r7
 8005974:	460d      	mov	r5, r1
 8005976:	d9f4      	bls.n	8005962 <_printf_i+0x11a>
 8005978:	2b08      	cmp	r3, #8
 800597a:	d10b      	bne.n	8005994 <_printf_i+0x14c>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	07df      	lsls	r7, r3, #31
 8005980:	d508      	bpl.n	8005994 <_printf_i+0x14c>
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	6861      	ldr	r1, [r4, #4]
 8005986:	4299      	cmp	r1, r3
 8005988:	bfde      	ittt	le
 800598a:	2330      	movle	r3, #48	; 0x30
 800598c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005990:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005994:	1b92      	subs	r2, r2, r6
 8005996:	6122      	str	r2, [r4, #16]
 8005998:	f8cd a000 	str.w	sl, [sp]
 800599c:	464b      	mov	r3, r9
 800599e:	aa03      	add	r2, sp, #12
 80059a0:	4621      	mov	r1, r4
 80059a2:	4640      	mov	r0, r8
 80059a4:	f7ff fee2 	bl	800576c <_printf_common>
 80059a8:	3001      	adds	r0, #1
 80059aa:	d14c      	bne.n	8005a46 <_printf_i+0x1fe>
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	b004      	add	sp, #16
 80059b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b6:	4835      	ldr	r0, [pc, #212]	; (8005a8c <_printf_i+0x244>)
 80059b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	680e      	ldr	r6, [r1, #0]
 80059c0:	061f      	lsls	r7, r3, #24
 80059c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80059c6:	600e      	str	r6, [r1, #0]
 80059c8:	d514      	bpl.n	80059f4 <_printf_i+0x1ac>
 80059ca:	07d9      	lsls	r1, r3, #31
 80059cc:	bf44      	itt	mi
 80059ce:	f043 0320 	orrmi.w	r3, r3, #32
 80059d2:	6023      	strmi	r3, [r4, #0]
 80059d4:	b91d      	cbnz	r5, 80059de <_printf_i+0x196>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	f023 0320 	bic.w	r3, r3, #32
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	2310      	movs	r3, #16
 80059e0:	e7b0      	b.n	8005944 <_printf_i+0xfc>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	f043 0320 	orr.w	r3, r3, #32
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	2378      	movs	r3, #120	; 0x78
 80059ec:	4828      	ldr	r0, [pc, #160]	; (8005a90 <_printf_i+0x248>)
 80059ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059f2:	e7e3      	b.n	80059bc <_printf_i+0x174>
 80059f4:	065e      	lsls	r6, r3, #25
 80059f6:	bf48      	it	mi
 80059f8:	b2ad      	uxthmi	r5, r5
 80059fa:	e7e6      	b.n	80059ca <_printf_i+0x182>
 80059fc:	4616      	mov	r6, r2
 80059fe:	e7bb      	b.n	8005978 <_printf_i+0x130>
 8005a00:	680b      	ldr	r3, [r1, #0]
 8005a02:	6826      	ldr	r6, [r4, #0]
 8005a04:	6960      	ldr	r0, [r4, #20]
 8005a06:	1d1d      	adds	r5, r3, #4
 8005a08:	600d      	str	r5, [r1, #0]
 8005a0a:	0635      	lsls	r5, r6, #24
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	d501      	bpl.n	8005a14 <_printf_i+0x1cc>
 8005a10:	6018      	str	r0, [r3, #0]
 8005a12:	e002      	b.n	8005a1a <_printf_i+0x1d2>
 8005a14:	0671      	lsls	r1, r6, #25
 8005a16:	d5fb      	bpl.n	8005a10 <_printf_i+0x1c8>
 8005a18:	8018      	strh	r0, [r3, #0]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6123      	str	r3, [r4, #16]
 8005a1e:	4616      	mov	r6, r2
 8005a20:	e7ba      	b.n	8005998 <_printf_i+0x150>
 8005a22:	680b      	ldr	r3, [r1, #0]
 8005a24:	1d1a      	adds	r2, r3, #4
 8005a26:	600a      	str	r2, [r1, #0]
 8005a28:	681e      	ldr	r6, [r3, #0]
 8005a2a:	6862      	ldr	r2, [r4, #4]
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f7fa fbf6 	bl	8000220 <memchr>
 8005a34:	b108      	cbz	r0, 8005a3a <_printf_i+0x1f2>
 8005a36:	1b80      	subs	r0, r0, r6
 8005a38:	6060      	str	r0, [r4, #4]
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a44:	e7a8      	b.n	8005998 <_printf_i+0x150>
 8005a46:	6923      	ldr	r3, [r4, #16]
 8005a48:	4632      	mov	r2, r6
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	47d0      	blx	sl
 8005a50:	3001      	adds	r0, #1
 8005a52:	d0ab      	beq.n	80059ac <_printf_i+0x164>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	079b      	lsls	r3, r3, #30
 8005a58:	d413      	bmi.n	8005a82 <_printf_i+0x23a>
 8005a5a:	68e0      	ldr	r0, [r4, #12]
 8005a5c:	9b03      	ldr	r3, [sp, #12]
 8005a5e:	4298      	cmp	r0, r3
 8005a60:	bfb8      	it	lt
 8005a62:	4618      	movlt	r0, r3
 8005a64:	e7a4      	b.n	80059b0 <_printf_i+0x168>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4632      	mov	r2, r6
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	47d0      	blx	sl
 8005a70:	3001      	adds	r0, #1
 8005a72:	d09b      	beq.n	80059ac <_printf_i+0x164>
 8005a74:	3501      	adds	r5, #1
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	9903      	ldr	r1, [sp, #12]
 8005a7a:	1a5b      	subs	r3, r3, r1
 8005a7c:	42ab      	cmp	r3, r5
 8005a7e:	dcf2      	bgt.n	8005a66 <_printf_i+0x21e>
 8005a80:	e7eb      	b.n	8005a5a <_printf_i+0x212>
 8005a82:	2500      	movs	r5, #0
 8005a84:	f104 0619 	add.w	r6, r4, #25
 8005a88:	e7f5      	b.n	8005a76 <_printf_i+0x22e>
 8005a8a:	bf00      	nop
 8005a8c:	08008526 	.word	0x08008526
 8005a90:	08008537 	.word	0x08008537

08005a94 <siprintf>:
 8005a94:	b40e      	push	{r1, r2, r3}
 8005a96:	b500      	push	{lr}
 8005a98:	b09c      	sub	sp, #112	; 0x70
 8005a9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a9c:	9002      	str	r0, [sp, #8]
 8005a9e:	9006      	str	r0, [sp, #24]
 8005aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005aa4:	4809      	ldr	r0, [pc, #36]	; (8005acc <siprintf+0x38>)
 8005aa6:	9107      	str	r1, [sp, #28]
 8005aa8:	9104      	str	r1, [sp, #16]
 8005aaa:	4909      	ldr	r1, [pc, #36]	; (8005ad0 <siprintf+0x3c>)
 8005aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab0:	9105      	str	r1, [sp, #20]
 8005ab2:	6800      	ldr	r0, [r0, #0]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	a902      	add	r1, sp, #8
 8005ab8:	f001 fe14 	bl	80076e4 <_svfiprintf_r>
 8005abc:	9b02      	ldr	r3, [sp, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	b01c      	add	sp, #112	; 0x70
 8005ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac8:	b003      	add	sp, #12
 8005aca:	4770      	bx	lr
 8005acc:	20000010 	.word	0x20000010
 8005ad0:	ffff0208 	.word	0xffff0208

08005ad4 <__swbuf_r>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	460e      	mov	r6, r1
 8005ad8:	4614      	mov	r4, r2
 8005ada:	4605      	mov	r5, r0
 8005adc:	b118      	cbz	r0, 8005ae6 <__swbuf_r+0x12>
 8005ade:	6983      	ldr	r3, [r0, #24]
 8005ae0:	b90b      	cbnz	r3, 8005ae6 <__swbuf_r+0x12>
 8005ae2:	f001 f84b 	bl	8006b7c <__sinit>
 8005ae6:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <__swbuf_r+0x98>)
 8005ae8:	429c      	cmp	r4, r3
 8005aea:	d12b      	bne.n	8005b44 <__swbuf_r+0x70>
 8005aec:	686c      	ldr	r4, [r5, #4]
 8005aee:	69a3      	ldr	r3, [r4, #24]
 8005af0:	60a3      	str	r3, [r4, #8]
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	071a      	lsls	r2, r3, #28
 8005af6:	d52f      	bpl.n	8005b58 <__swbuf_r+0x84>
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	b36b      	cbz	r3, 8005b58 <__swbuf_r+0x84>
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	6820      	ldr	r0, [r4, #0]
 8005b00:	1ac0      	subs	r0, r0, r3
 8005b02:	6963      	ldr	r3, [r4, #20]
 8005b04:	b2f6      	uxtb	r6, r6
 8005b06:	4283      	cmp	r3, r0
 8005b08:	4637      	mov	r7, r6
 8005b0a:	dc04      	bgt.n	8005b16 <__swbuf_r+0x42>
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 ffa0 	bl	8006a54 <_fflush_r>
 8005b14:	bb30      	cbnz	r0, 8005b64 <__swbuf_r+0x90>
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60a3      	str	r3, [r4, #8]
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	6022      	str	r2, [r4, #0]
 8005b22:	701e      	strb	r6, [r3, #0]
 8005b24:	6963      	ldr	r3, [r4, #20]
 8005b26:	3001      	adds	r0, #1
 8005b28:	4283      	cmp	r3, r0
 8005b2a:	d004      	beq.n	8005b36 <__swbuf_r+0x62>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	07db      	lsls	r3, r3, #31
 8005b30:	d506      	bpl.n	8005b40 <__swbuf_r+0x6c>
 8005b32:	2e0a      	cmp	r6, #10
 8005b34:	d104      	bne.n	8005b40 <__swbuf_r+0x6c>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 ff8b 	bl	8006a54 <_fflush_r>
 8005b3e:	b988      	cbnz	r0, 8005b64 <__swbuf_r+0x90>
 8005b40:	4638      	mov	r0, r7
 8005b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <__swbuf_r+0x9c>)
 8005b46:	429c      	cmp	r4, r3
 8005b48:	d101      	bne.n	8005b4e <__swbuf_r+0x7a>
 8005b4a:	68ac      	ldr	r4, [r5, #8]
 8005b4c:	e7cf      	b.n	8005aee <__swbuf_r+0x1a>
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <__swbuf_r+0xa0>)
 8005b50:	429c      	cmp	r4, r3
 8005b52:	bf08      	it	eq
 8005b54:	68ec      	ldreq	r4, [r5, #12]
 8005b56:	e7ca      	b.n	8005aee <__swbuf_r+0x1a>
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 f80c 	bl	8005b78 <__swsetup_r>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d0cb      	beq.n	8005afc <__swbuf_r+0x28>
 8005b64:	f04f 37ff 	mov.w	r7, #4294967295
 8005b68:	e7ea      	b.n	8005b40 <__swbuf_r+0x6c>
 8005b6a:	bf00      	nop
 8005b6c:	080085fc 	.word	0x080085fc
 8005b70:	0800861c 	.word	0x0800861c
 8005b74:	080085dc 	.word	0x080085dc

08005b78 <__swsetup_r>:
 8005b78:	4b32      	ldr	r3, [pc, #200]	; (8005c44 <__swsetup_r+0xcc>)
 8005b7a:	b570      	push	{r4, r5, r6, lr}
 8005b7c:	681d      	ldr	r5, [r3, #0]
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460c      	mov	r4, r1
 8005b82:	b125      	cbz	r5, 8005b8e <__swsetup_r+0x16>
 8005b84:	69ab      	ldr	r3, [r5, #24]
 8005b86:	b913      	cbnz	r3, 8005b8e <__swsetup_r+0x16>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 fff7 	bl	8006b7c <__sinit>
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <__swsetup_r+0xd0>)
 8005b90:	429c      	cmp	r4, r3
 8005b92:	d10f      	bne.n	8005bb4 <__swsetup_r+0x3c>
 8005b94:	686c      	ldr	r4, [r5, #4]
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b9c:	0719      	lsls	r1, r3, #28
 8005b9e:	d42c      	bmi.n	8005bfa <__swsetup_r+0x82>
 8005ba0:	06dd      	lsls	r5, r3, #27
 8005ba2:	d411      	bmi.n	8005bc8 <__swsetup_r+0x50>
 8005ba4:	2309      	movs	r3, #9
 8005ba6:	6033      	str	r3, [r6, #0]
 8005ba8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb2:	e03e      	b.n	8005c32 <__swsetup_r+0xba>
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <__swsetup_r+0xd4>)
 8005bb6:	429c      	cmp	r4, r3
 8005bb8:	d101      	bne.n	8005bbe <__swsetup_r+0x46>
 8005bba:	68ac      	ldr	r4, [r5, #8]
 8005bbc:	e7eb      	b.n	8005b96 <__swsetup_r+0x1e>
 8005bbe:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <__swsetup_r+0xd8>)
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	bf08      	it	eq
 8005bc4:	68ec      	ldreq	r4, [r5, #12]
 8005bc6:	e7e6      	b.n	8005b96 <__swsetup_r+0x1e>
 8005bc8:	0758      	lsls	r0, r3, #29
 8005bca:	d512      	bpl.n	8005bf2 <__swsetup_r+0x7a>
 8005bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bce:	b141      	cbz	r1, 8005be2 <__swsetup_r+0x6a>
 8005bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd4:	4299      	cmp	r1, r3
 8005bd6:	d002      	beq.n	8005bde <__swsetup_r+0x66>
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f001 fc7d 	bl	80074d8 <_free_r>
 8005bde:	2300      	movs	r3, #0
 8005be0:	6363      	str	r3, [r4, #52]	; 0x34
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	2300      	movs	r3, #0
 8005bec:	6063      	str	r3, [r4, #4]
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f043 0308 	orr.w	r3, r3, #8
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	b94b      	cbnz	r3, 8005c12 <__swsetup_r+0x9a>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c08:	d003      	beq.n	8005c12 <__swsetup_r+0x9a>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f001 f87f 	bl	8006d10 <__smakebuf_r>
 8005c12:	89a0      	ldrh	r0, [r4, #12]
 8005c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c18:	f010 0301 	ands.w	r3, r0, #1
 8005c1c:	d00a      	beq.n	8005c34 <__swsetup_r+0xbc>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60a3      	str	r3, [r4, #8]
 8005c22:	6963      	ldr	r3, [r4, #20]
 8005c24:	425b      	negs	r3, r3
 8005c26:	61a3      	str	r3, [r4, #24]
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	b943      	cbnz	r3, 8005c3e <__swsetup_r+0xc6>
 8005c2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c30:	d1ba      	bne.n	8005ba8 <__swsetup_r+0x30>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	0781      	lsls	r1, r0, #30
 8005c36:	bf58      	it	pl
 8005c38:	6963      	ldrpl	r3, [r4, #20]
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	e7f4      	b.n	8005c28 <__swsetup_r+0xb0>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e7f7      	b.n	8005c32 <__swsetup_r+0xba>
 8005c42:	bf00      	nop
 8005c44:	20000010 	.word	0x20000010
 8005c48:	080085fc 	.word	0x080085fc
 8005c4c:	0800861c 	.word	0x0800861c
 8005c50:	080085dc 	.word	0x080085dc

08005c54 <quorem>:
 8005c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	6903      	ldr	r3, [r0, #16]
 8005c5a:	690c      	ldr	r4, [r1, #16]
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	4607      	mov	r7, r0
 8005c60:	f2c0 8081 	blt.w	8005d66 <quorem+0x112>
 8005c64:	3c01      	subs	r4, #1
 8005c66:	f101 0814 	add.w	r8, r1, #20
 8005c6a:	f100 0514 	add.w	r5, r0, #20
 8005c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c88:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c8c:	d331      	bcc.n	8005cf2 <quorem+0x9e>
 8005c8e:	f04f 0e00 	mov.w	lr, #0
 8005c92:	4640      	mov	r0, r8
 8005c94:	46ac      	mov	ip, r5
 8005c96:	46f2      	mov	sl, lr
 8005c98:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c9c:	b293      	uxth	r3, r2
 8005c9e:	fb06 e303 	mla	r3, r6, r3, lr
 8005ca2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ebaa 0303 	sub.w	r3, sl, r3
 8005cac:	0c12      	lsrs	r2, r2, #16
 8005cae:	f8dc a000 	ldr.w	sl, [ip]
 8005cb2:	fb06 e202 	mla	r2, r6, r2, lr
 8005cb6:	fa13 f38a 	uxtah	r3, r3, sl
 8005cba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cbe:	fa1f fa82 	uxth.w	sl, r2
 8005cc2:	f8dc 2000 	ldr.w	r2, [ip]
 8005cc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005cca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd4:	4581      	cmp	r9, r0
 8005cd6:	f84c 3b04 	str.w	r3, [ip], #4
 8005cda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cde:	d2db      	bcs.n	8005c98 <quorem+0x44>
 8005ce0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ce4:	b92b      	cbnz	r3, 8005cf2 <quorem+0x9e>
 8005ce6:	9b01      	ldr	r3, [sp, #4]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	429d      	cmp	r5, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	d32e      	bcc.n	8005d4e <quorem+0xfa>
 8005cf0:	613c      	str	r4, [r7, #16]
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f001 fae0 	bl	80072b8 <__mcmp>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	db24      	blt.n	8005d46 <quorem+0xf2>
 8005cfc:	3601      	adds	r6, #1
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f04f 0c00 	mov.w	ip, #0
 8005d04:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d08:	f8d0 e000 	ldr.w	lr, [r0]
 8005d0c:	b293      	uxth	r3, r2
 8005d0e:	ebac 0303 	sub.w	r3, ip, r3
 8005d12:	0c12      	lsrs	r2, r2, #16
 8005d14:	fa13 f38e 	uxtah	r3, r3, lr
 8005d18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d26:	45c1      	cmp	r9, r8
 8005d28:	f840 3b04 	str.w	r3, [r0], #4
 8005d2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d30:	d2e8      	bcs.n	8005d04 <quorem+0xb0>
 8005d32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d3a:	b922      	cbnz	r2, 8005d46 <quorem+0xf2>
 8005d3c:	3b04      	subs	r3, #4
 8005d3e:	429d      	cmp	r5, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	d30a      	bcc.n	8005d5a <quorem+0x106>
 8005d44:	613c      	str	r4, [r7, #16]
 8005d46:	4630      	mov	r0, r6
 8005d48:	b003      	add	sp, #12
 8005d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	3b04      	subs	r3, #4
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	d1cc      	bne.n	8005cf0 <quorem+0x9c>
 8005d56:	3c01      	subs	r4, #1
 8005d58:	e7c7      	b.n	8005cea <quorem+0x96>
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	d1f0      	bne.n	8005d44 <quorem+0xf0>
 8005d62:	3c01      	subs	r4, #1
 8005d64:	e7eb      	b.n	8005d3e <quorem+0xea>
 8005d66:	2000      	movs	r0, #0
 8005d68:	e7ee      	b.n	8005d48 <quorem+0xf4>
 8005d6a:	0000      	movs	r0, r0
 8005d6c:	0000      	movs	r0, r0
	...

08005d70 <_dtoa_r>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	ed2d 8b02 	vpush	{d8}
 8005d78:	ec57 6b10 	vmov	r6, r7, d0
 8005d7c:	b095      	sub	sp, #84	; 0x54
 8005d7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d84:	9105      	str	r1, [sp, #20]
 8005d86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d90:	b975      	cbnz	r5, 8005db0 <_dtoa_r+0x40>
 8005d92:	2010      	movs	r0, #16
 8005d94:	f000 fffc 	bl	8006d90 <malloc>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d9c:	b920      	cbnz	r0, 8005da8 <_dtoa_r+0x38>
 8005d9e:	4bb2      	ldr	r3, [pc, #712]	; (8006068 <_dtoa_r+0x2f8>)
 8005da0:	21ea      	movs	r1, #234	; 0xea
 8005da2:	48b2      	ldr	r0, [pc, #712]	; (800606c <_dtoa_r+0x2fc>)
 8005da4:	f001 fe04 	bl	80079b0 <__assert_func>
 8005da8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dac:	6005      	str	r5, [r0, #0]
 8005dae:	60c5      	str	r5, [r0, #12]
 8005db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	b151      	cbz	r1, 8005dcc <_dtoa_r+0x5c>
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	604a      	str	r2, [r1, #4]
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4093      	lsls	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f001 f83b 	bl	8006e3c <_Bfree>
 8005dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	1e3b      	subs	r3, r7, #0
 8005dce:	bfb9      	ittee	lt
 8005dd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	9303      	strlt	r3, [sp, #12]
 8005dd6:	2300      	movge	r3, #0
 8005dd8:	f8c8 3000 	strge.w	r3, [r8]
 8005ddc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005de0:	4ba3      	ldr	r3, [pc, #652]	; (8006070 <_dtoa_r+0x300>)
 8005de2:	bfbc      	itt	lt
 8005de4:	2201      	movlt	r2, #1
 8005de6:	f8c8 2000 	strlt.w	r2, [r8]
 8005dea:	ea33 0309 	bics.w	r3, r3, r9
 8005dee:	d11b      	bne.n	8005e28 <_dtoa_r+0xb8>
 8005df0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005df2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dfc:	4333      	orrs	r3, r6
 8005dfe:	f000 857a 	beq.w	80068f6 <_dtoa_r+0xb86>
 8005e02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e04:	b963      	cbnz	r3, 8005e20 <_dtoa_r+0xb0>
 8005e06:	4b9b      	ldr	r3, [pc, #620]	; (8006074 <_dtoa_r+0x304>)
 8005e08:	e024      	b.n	8005e54 <_dtoa_r+0xe4>
 8005e0a:	4b9b      	ldr	r3, [pc, #620]	; (8006078 <_dtoa_r+0x308>)
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	9800      	ldr	r0, [sp, #0]
 8005e16:	b015      	add	sp, #84	; 0x54
 8005e18:	ecbd 8b02 	vpop	{d8}
 8005e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e20:	4b94      	ldr	r3, [pc, #592]	; (8006074 <_dtoa_r+0x304>)
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	3303      	adds	r3, #3
 8005e26:	e7f3      	b.n	8005e10 <_dtoa_r+0xa0>
 8005e28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	ec51 0b17 	vmov	r0, r1, d7
 8005e32:	2300      	movs	r3, #0
 8005e34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005e38:	f7fa fe66 	bl	8000b08 <__aeabi_dcmpeq>
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	b158      	cbz	r0, 8005e58 <_dtoa_r+0xe8>
 8005e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e42:	2301      	movs	r3, #1
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8551 	beq.w	80068f0 <_dtoa_r+0xb80>
 8005e4e:	488b      	ldr	r0, [pc, #556]	; (800607c <_dtoa_r+0x30c>)
 8005e50:	6018      	str	r0, [r3, #0]
 8005e52:	1e43      	subs	r3, r0, #1
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	e7dd      	b.n	8005e14 <_dtoa_r+0xa4>
 8005e58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005e5c:	aa12      	add	r2, sp, #72	; 0x48
 8005e5e:	a913      	add	r1, sp, #76	; 0x4c
 8005e60:	4620      	mov	r0, r4
 8005e62:	f001 facd 	bl	8007400 <__d2b>
 8005e66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e6a:	4683      	mov	fp, r0
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d07c      	beq.n	8005f6a <_dtoa_r+0x1fa>
 8005e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005e7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e8a:	4b7d      	ldr	r3, [pc, #500]	; (8006080 <_dtoa_r+0x310>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4630      	mov	r0, r6
 8005e90:	4639      	mov	r1, r7
 8005e92:	f7fa fa19 	bl	80002c8 <__aeabi_dsub>
 8005e96:	a36e      	add	r3, pc, #440	; (adr r3, 8006050 <_dtoa_r+0x2e0>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f7fa fbcc 	bl	8000638 <__aeabi_dmul>
 8005ea0:	a36d      	add	r3, pc, #436	; (adr r3, 8006058 <_dtoa_r+0x2e8>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa fa11 	bl	80002cc <__adddf3>
 8005eaa:	4606      	mov	r6, r0
 8005eac:	4628      	mov	r0, r5
 8005eae:	460f      	mov	r7, r1
 8005eb0:	f7fa fb58 	bl	8000564 <__aeabi_i2d>
 8005eb4:	a36a      	add	r3, pc, #424	; (adr r3, 8006060 <_dtoa_r+0x2f0>)
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f7fa fbbd 	bl	8000638 <__aeabi_dmul>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	f7fa fa01 	bl	80002cc <__adddf3>
 8005eca:	4606      	mov	r6, r0
 8005ecc:	460f      	mov	r7, r1
 8005ece:	f7fa fe63 	bl	8000b98 <__aeabi_d2iz>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	4682      	mov	sl, r0
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	4630      	mov	r0, r6
 8005eda:	4639      	mov	r1, r7
 8005edc:	f7fa fe1e 	bl	8000b1c <__aeabi_dcmplt>
 8005ee0:	b148      	cbz	r0, 8005ef6 <_dtoa_r+0x186>
 8005ee2:	4650      	mov	r0, sl
 8005ee4:	f7fa fb3e 	bl	8000564 <__aeabi_i2d>
 8005ee8:	4632      	mov	r2, r6
 8005eea:	463b      	mov	r3, r7
 8005eec:	f7fa fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 8005ef0:	b908      	cbnz	r0, 8005ef6 <_dtoa_r+0x186>
 8005ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ef6:	f1ba 0f16 	cmp.w	sl, #22
 8005efa:	d854      	bhi.n	8005fa6 <_dtoa_r+0x236>
 8005efc:	4b61      	ldr	r3, [pc, #388]	; (8006084 <_dtoa_r+0x314>)
 8005efe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f0a:	f7fa fe07 	bl	8000b1c <__aeabi_dcmplt>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d04b      	beq.n	8005faa <_dtoa_r+0x23a>
 8005f12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f16:	2300      	movs	r3, #0
 8005f18:	930e      	str	r3, [sp, #56]	; 0x38
 8005f1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f1c:	1b5d      	subs	r5, r3, r5
 8005f1e:	1e6b      	subs	r3, r5, #1
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	bf43      	ittte	mi
 8005f24:	2300      	movmi	r3, #0
 8005f26:	f1c5 0801 	rsbmi	r8, r5, #1
 8005f2a:	9304      	strmi	r3, [sp, #16]
 8005f2c:	f04f 0800 	movpl.w	r8, #0
 8005f30:	f1ba 0f00 	cmp.w	sl, #0
 8005f34:	db3b      	blt.n	8005fae <_dtoa_r+0x23e>
 8005f36:	9b04      	ldr	r3, [sp, #16]
 8005f38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005f3c:	4453      	add	r3, sl
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	2300      	movs	r3, #0
 8005f42:	9306      	str	r3, [sp, #24]
 8005f44:	9b05      	ldr	r3, [sp, #20]
 8005f46:	2b09      	cmp	r3, #9
 8005f48:	d869      	bhi.n	800601e <_dtoa_r+0x2ae>
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	bfc4      	itt	gt
 8005f4e:	3b04      	subgt	r3, #4
 8005f50:	9305      	strgt	r3, [sp, #20]
 8005f52:	9b05      	ldr	r3, [sp, #20]
 8005f54:	f1a3 0302 	sub.w	r3, r3, #2
 8005f58:	bfcc      	ite	gt
 8005f5a:	2500      	movgt	r5, #0
 8005f5c:	2501      	movle	r5, #1
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d869      	bhi.n	8006036 <_dtoa_r+0x2c6>
 8005f62:	e8df f003 	tbb	[pc, r3]
 8005f66:	4e2c      	.short	0x4e2c
 8005f68:	5a4c      	.short	0x5a4c
 8005f6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005f6e:	441d      	add	r5, r3
 8005f70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	bfc1      	itttt	gt
 8005f78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f80:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f88:	bfda      	itte	le
 8005f8a:	f1c3 0320 	rsble	r3, r3, #32
 8005f8e:	fa06 f003 	lslle.w	r0, r6, r3
 8005f92:	4318      	orrgt	r0, r3
 8005f94:	f7fa fad6 	bl	8000544 <__aeabi_ui2d>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005fa0:	3d01      	subs	r5, #1
 8005fa2:	9310      	str	r3, [sp, #64]	; 0x40
 8005fa4:	e771      	b.n	8005e8a <_dtoa_r+0x11a>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e7b6      	b.n	8005f18 <_dtoa_r+0x1a8>
 8005faa:	900e      	str	r0, [sp, #56]	; 0x38
 8005fac:	e7b5      	b.n	8005f1a <_dtoa_r+0x1aa>
 8005fae:	f1ca 0300 	rsb	r3, sl, #0
 8005fb2:	9306      	str	r3, [sp, #24]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	eba8 080a 	sub.w	r8, r8, sl
 8005fba:	930d      	str	r3, [sp, #52]	; 0x34
 8005fbc:	e7c2      	b.n	8005f44 <_dtoa_r+0x1d4>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dc39      	bgt.n	800603c <_dtoa_r+0x2cc>
 8005fc8:	f04f 0901 	mov.w	r9, #1
 8005fcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005fd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fd8:	2200      	movs	r2, #0
 8005fda:	6042      	str	r2, [r0, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	f102 0614 	add.w	r6, r2, #20
 8005fe2:	429e      	cmp	r6, r3
 8005fe4:	6841      	ldr	r1, [r0, #4]
 8005fe6:	d92f      	bls.n	8006048 <_dtoa_r+0x2d8>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fee7 	bl	8006dbc <_Balloc>
 8005fee:	9000      	str	r0, [sp, #0]
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d14b      	bne.n	800608c <_dtoa_r+0x31c>
 8005ff4:	4b24      	ldr	r3, [pc, #144]	; (8006088 <_dtoa_r+0x318>)
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ffc:	e6d1      	b.n	8005da2 <_dtoa_r+0x32>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e7de      	b.n	8005fc0 <_dtoa_r+0x250>
 8006002:	2300      	movs	r3, #0
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	eb0a 0903 	add.w	r9, sl, r3
 800600c:	f109 0301 	add.w	r3, r9, #1
 8006010:	2b01      	cmp	r3, #1
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	bfb8      	it	lt
 8006016:	2301      	movlt	r3, #1
 8006018:	e7dd      	b.n	8005fd6 <_dtoa_r+0x266>
 800601a:	2301      	movs	r3, #1
 800601c:	e7f2      	b.n	8006004 <_dtoa_r+0x294>
 800601e:	2501      	movs	r5, #1
 8006020:	2300      	movs	r3, #0
 8006022:	9305      	str	r3, [sp, #20]
 8006024:	9508      	str	r5, [sp, #32]
 8006026:	f04f 39ff 	mov.w	r9, #4294967295
 800602a:	2200      	movs	r2, #0
 800602c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006030:	2312      	movs	r3, #18
 8006032:	9209      	str	r2, [sp, #36]	; 0x24
 8006034:	e7cf      	b.n	8005fd6 <_dtoa_r+0x266>
 8006036:	2301      	movs	r3, #1
 8006038:	9308      	str	r3, [sp, #32]
 800603a:	e7f4      	b.n	8006026 <_dtoa_r+0x2b6>
 800603c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006040:	f8cd 9004 	str.w	r9, [sp, #4]
 8006044:	464b      	mov	r3, r9
 8006046:	e7c6      	b.n	8005fd6 <_dtoa_r+0x266>
 8006048:	3101      	adds	r1, #1
 800604a:	6041      	str	r1, [r0, #4]
 800604c:	0052      	lsls	r2, r2, #1
 800604e:	e7c6      	b.n	8005fde <_dtoa_r+0x26e>
 8006050:	636f4361 	.word	0x636f4361
 8006054:	3fd287a7 	.word	0x3fd287a7
 8006058:	8b60c8b3 	.word	0x8b60c8b3
 800605c:	3fc68a28 	.word	0x3fc68a28
 8006060:	509f79fb 	.word	0x509f79fb
 8006064:	3fd34413 	.word	0x3fd34413
 8006068:	08008555 	.word	0x08008555
 800606c:	0800856c 	.word	0x0800856c
 8006070:	7ff00000 	.word	0x7ff00000
 8006074:	08008551 	.word	0x08008551
 8006078:	08008548 	.word	0x08008548
 800607c:	08008525 	.word	0x08008525
 8006080:	3ff80000 	.word	0x3ff80000
 8006084:	080086c8 	.word	0x080086c8
 8006088:	080085cb 	.word	0x080085cb
 800608c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800608e:	9a00      	ldr	r2, [sp, #0]
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	9b01      	ldr	r3, [sp, #4]
 8006094:	2b0e      	cmp	r3, #14
 8006096:	f200 80ad 	bhi.w	80061f4 <_dtoa_r+0x484>
 800609a:	2d00      	cmp	r5, #0
 800609c:	f000 80aa 	beq.w	80061f4 <_dtoa_r+0x484>
 80060a0:	f1ba 0f00 	cmp.w	sl, #0
 80060a4:	dd36      	ble.n	8006114 <_dtoa_r+0x3a4>
 80060a6:	4ac3      	ldr	r2, [pc, #780]	; (80063b4 <_dtoa_r+0x644>)
 80060a8:	f00a 030f 	and.w	r3, sl, #15
 80060ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060b0:	ed93 7b00 	vldr	d7, [r3]
 80060b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80060b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80060bc:	eeb0 8a47 	vmov.f32	s16, s14
 80060c0:	eef0 8a67 	vmov.f32	s17, s15
 80060c4:	d016      	beq.n	80060f4 <_dtoa_r+0x384>
 80060c6:	4bbc      	ldr	r3, [pc, #752]	; (80063b8 <_dtoa_r+0x648>)
 80060c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060d0:	f7fa fbdc 	bl	800088c <__aeabi_ddiv>
 80060d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d8:	f007 070f 	and.w	r7, r7, #15
 80060dc:	2503      	movs	r5, #3
 80060de:	4eb6      	ldr	r6, [pc, #728]	; (80063b8 <_dtoa_r+0x648>)
 80060e0:	b957      	cbnz	r7, 80060f8 <_dtoa_r+0x388>
 80060e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e6:	ec53 2b18 	vmov	r2, r3, d8
 80060ea:	f7fa fbcf 	bl	800088c <__aeabi_ddiv>
 80060ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f2:	e029      	b.n	8006148 <_dtoa_r+0x3d8>
 80060f4:	2502      	movs	r5, #2
 80060f6:	e7f2      	b.n	80060de <_dtoa_r+0x36e>
 80060f8:	07f9      	lsls	r1, r7, #31
 80060fa:	d508      	bpl.n	800610e <_dtoa_r+0x39e>
 80060fc:	ec51 0b18 	vmov	r0, r1, d8
 8006100:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006104:	f7fa fa98 	bl	8000638 <__aeabi_dmul>
 8006108:	ec41 0b18 	vmov	d8, r0, r1
 800610c:	3501      	adds	r5, #1
 800610e:	107f      	asrs	r7, r7, #1
 8006110:	3608      	adds	r6, #8
 8006112:	e7e5      	b.n	80060e0 <_dtoa_r+0x370>
 8006114:	f000 80a6 	beq.w	8006264 <_dtoa_r+0x4f4>
 8006118:	f1ca 0600 	rsb	r6, sl, #0
 800611c:	4ba5      	ldr	r3, [pc, #660]	; (80063b4 <_dtoa_r+0x644>)
 800611e:	4fa6      	ldr	r7, [pc, #664]	; (80063b8 <_dtoa_r+0x648>)
 8006120:	f006 020f 	and.w	r2, r6, #15
 8006124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006130:	f7fa fa82 	bl	8000638 <__aeabi_dmul>
 8006134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006138:	1136      	asrs	r6, r6, #4
 800613a:	2300      	movs	r3, #0
 800613c:	2502      	movs	r5, #2
 800613e:	2e00      	cmp	r6, #0
 8006140:	f040 8085 	bne.w	800624e <_dtoa_r+0x4de>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1d2      	bne.n	80060ee <_dtoa_r+0x37e>
 8006148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 808c 	beq.w	8006268 <_dtoa_r+0x4f8>
 8006150:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006154:	4b99      	ldr	r3, [pc, #612]	; (80063bc <_dtoa_r+0x64c>)
 8006156:	2200      	movs	r2, #0
 8006158:	4630      	mov	r0, r6
 800615a:	4639      	mov	r1, r7
 800615c:	f7fa fcde 	bl	8000b1c <__aeabi_dcmplt>
 8006160:	2800      	cmp	r0, #0
 8006162:	f000 8081 	beq.w	8006268 <_dtoa_r+0x4f8>
 8006166:	9b01      	ldr	r3, [sp, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d07d      	beq.n	8006268 <_dtoa_r+0x4f8>
 800616c:	f1b9 0f00 	cmp.w	r9, #0
 8006170:	dd3c      	ble.n	80061ec <_dtoa_r+0x47c>
 8006172:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006176:	9307      	str	r3, [sp, #28]
 8006178:	2200      	movs	r2, #0
 800617a:	4b91      	ldr	r3, [pc, #580]	; (80063c0 <_dtoa_r+0x650>)
 800617c:	4630      	mov	r0, r6
 800617e:	4639      	mov	r1, r7
 8006180:	f7fa fa5a 	bl	8000638 <__aeabi_dmul>
 8006184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006188:	3501      	adds	r5, #1
 800618a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800618e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006192:	4628      	mov	r0, r5
 8006194:	f7fa f9e6 	bl	8000564 <__aeabi_i2d>
 8006198:	4632      	mov	r2, r6
 800619a:	463b      	mov	r3, r7
 800619c:	f7fa fa4c 	bl	8000638 <__aeabi_dmul>
 80061a0:	4b88      	ldr	r3, [pc, #544]	; (80063c4 <_dtoa_r+0x654>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa f892 	bl	80002cc <__adddf3>
 80061a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80061ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b0:	9303      	str	r3, [sp, #12]
 80061b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d15c      	bne.n	8006272 <_dtoa_r+0x502>
 80061b8:	4b83      	ldr	r3, [pc, #524]	; (80063c8 <_dtoa_r+0x658>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	4630      	mov	r0, r6
 80061be:	4639      	mov	r1, r7
 80061c0:	f7fa f882 	bl	80002c8 <__aeabi_dsub>
 80061c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c8:	4606      	mov	r6, r0
 80061ca:	460f      	mov	r7, r1
 80061cc:	f7fa fcc4 	bl	8000b58 <__aeabi_dcmpgt>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f040 8296 	bne.w	8006702 <_dtoa_r+0x992>
 80061d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80061da:	4630      	mov	r0, r6
 80061dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061e0:	4639      	mov	r1, r7
 80061e2:	f7fa fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f040 8288 	bne.w	80066fc <_dtoa_r+0x98c>
 80061ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f2c0 8158 	blt.w	80064ac <_dtoa_r+0x73c>
 80061fc:	f1ba 0f0e 	cmp.w	sl, #14
 8006200:	f300 8154 	bgt.w	80064ac <_dtoa_r+0x73c>
 8006204:	4b6b      	ldr	r3, [pc, #428]	; (80063b4 <_dtoa_r+0x644>)
 8006206:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800620a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800620e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006210:	2b00      	cmp	r3, #0
 8006212:	f280 80e3 	bge.w	80063dc <_dtoa_r+0x66c>
 8006216:	9b01      	ldr	r3, [sp, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f300 80df 	bgt.w	80063dc <_dtoa_r+0x66c>
 800621e:	f040 826d 	bne.w	80066fc <_dtoa_r+0x98c>
 8006222:	4b69      	ldr	r3, [pc, #420]	; (80063c8 <_dtoa_r+0x658>)
 8006224:	2200      	movs	r2, #0
 8006226:	4640      	mov	r0, r8
 8006228:	4649      	mov	r1, r9
 800622a:	f7fa fa05 	bl	8000638 <__aeabi_dmul>
 800622e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006232:	f7fa fc87 	bl	8000b44 <__aeabi_dcmpge>
 8006236:	9e01      	ldr	r6, [sp, #4]
 8006238:	4637      	mov	r7, r6
 800623a:	2800      	cmp	r0, #0
 800623c:	f040 8243 	bne.w	80066c6 <_dtoa_r+0x956>
 8006240:	9d00      	ldr	r5, [sp, #0]
 8006242:	2331      	movs	r3, #49	; 0x31
 8006244:	f805 3b01 	strb.w	r3, [r5], #1
 8006248:	f10a 0a01 	add.w	sl, sl, #1
 800624c:	e23f      	b.n	80066ce <_dtoa_r+0x95e>
 800624e:	07f2      	lsls	r2, r6, #31
 8006250:	d505      	bpl.n	800625e <_dtoa_r+0x4ee>
 8006252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006256:	f7fa f9ef 	bl	8000638 <__aeabi_dmul>
 800625a:	3501      	adds	r5, #1
 800625c:	2301      	movs	r3, #1
 800625e:	1076      	asrs	r6, r6, #1
 8006260:	3708      	adds	r7, #8
 8006262:	e76c      	b.n	800613e <_dtoa_r+0x3ce>
 8006264:	2502      	movs	r5, #2
 8006266:	e76f      	b.n	8006148 <_dtoa_r+0x3d8>
 8006268:	9b01      	ldr	r3, [sp, #4]
 800626a:	f8cd a01c 	str.w	sl, [sp, #28]
 800626e:	930c      	str	r3, [sp, #48]	; 0x30
 8006270:	e78d      	b.n	800618e <_dtoa_r+0x41e>
 8006272:	9900      	ldr	r1, [sp, #0]
 8006274:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006278:	4b4e      	ldr	r3, [pc, #312]	; (80063b4 <_dtoa_r+0x644>)
 800627a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800627e:	4401      	add	r1, r0
 8006280:	9102      	str	r1, [sp, #8]
 8006282:	9908      	ldr	r1, [sp, #32]
 8006284:	eeb0 8a47 	vmov.f32	s16, s14
 8006288:	eef0 8a67 	vmov.f32	s17, s15
 800628c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006294:	2900      	cmp	r1, #0
 8006296:	d045      	beq.n	8006324 <_dtoa_r+0x5b4>
 8006298:	494c      	ldr	r1, [pc, #304]	; (80063cc <_dtoa_r+0x65c>)
 800629a:	2000      	movs	r0, #0
 800629c:	f7fa faf6 	bl	800088c <__aeabi_ddiv>
 80062a0:	ec53 2b18 	vmov	r2, r3, d8
 80062a4:	f7fa f810 	bl	80002c8 <__aeabi_dsub>
 80062a8:	9d00      	ldr	r5, [sp, #0]
 80062aa:	ec41 0b18 	vmov	d8, r0, r1
 80062ae:	4639      	mov	r1, r7
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7fa fc71 	bl	8000b98 <__aeabi_d2iz>
 80062b6:	900c      	str	r0, [sp, #48]	; 0x30
 80062b8:	f7fa f954 	bl	8000564 <__aeabi_i2d>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4630      	mov	r0, r6
 80062c2:	4639      	mov	r1, r7
 80062c4:	f7fa f800 	bl	80002c8 <__aeabi_dsub>
 80062c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062ca:	3330      	adds	r3, #48	; 0x30
 80062cc:	f805 3b01 	strb.w	r3, [r5], #1
 80062d0:	ec53 2b18 	vmov	r2, r3, d8
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	f7fa fc20 	bl	8000b1c <__aeabi_dcmplt>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d165      	bne.n	80063ac <_dtoa_r+0x63c>
 80062e0:	4632      	mov	r2, r6
 80062e2:	463b      	mov	r3, r7
 80062e4:	4935      	ldr	r1, [pc, #212]	; (80063bc <_dtoa_r+0x64c>)
 80062e6:	2000      	movs	r0, #0
 80062e8:	f7f9 ffee 	bl	80002c8 <__aeabi_dsub>
 80062ec:	ec53 2b18 	vmov	r2, r3, d8
 80062f0:	f7fa fc14 	bl	8000b1c <__aeabi_dcmplt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f040 80b9 	bne.w	800646c <_dtoa_r+0x6fc>
 80062fa:	9b02      	ldr	r3, [sp, #8]
 80062fc:	429d      	cmp	r5, r3
 80062fe:	f43f af75 	beq.w	80061ec <_dtoa_r+0x47c>
 8006302:	4b2f      	ldr	r3, [pc, #188]	; (80063c0 <_dtoa_r+0x650>)
 8006304:	ec51 0b18 	vmov	r0, r1, d8
 8006308:	2200      	movs	r2, #0
 800630a:	f7fa f995 	bl	8000638 <__aeabi_dmul>
 800630e:	4b2c      	ldr	r3, [pc, #176]	; (80063c0 <_dtoa_r+0x650>)
 8006310:	ec41 0b18 	vmov	d8, r0, r1
 8006314:	2200      	movs	r2, #0
 8006316:	4630      	mov	r0, r6
 8006318:	4639      	mov	r1, r7
 800631a:	f7fa f98d 	bl	8000638 <__aeabi_dmul>
 800631e:	4606      	mov	r6, r0
 8006320:	460f      	mov	r7, r1
 8006322:	e7c4      	b.n	80062ae <_dtoa_r+0x53e>
 8006324:	ec51 0b17 	vmov	r0, r1, d7
 8006328:	f7fa f986 	bl	8000638 <__aeabi_dmul>
 800632c:	9b02      	ldr	r3, [sp, #8]
 800632e:	9d00      	ldr	r5, [sp, #0]
 8006330:	930c      	str	r3, [sp, #48]	; 0x30
 8006332:	ec41 0b18 	vmov	d8, r0, r1
 8006336:	4639      	mov	r1, r7
 8006338:	4630      	mov	r0, r6
 800633a:	f7fa fc2d 	bl	8000b98 <__aeabi_d2iz>
 800633e:	9011      	str	r0, [sp, #68]	; 0x44
 8006340:	f7fa f910 	bl	8000564 <__aeabi_i2d>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	f7f9 ffbc 	bl	80002c8 <__aeabi_dsub>
 8006350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006352:	3330      	adds	r3, #48	; 0x30
 8006354:	f805 3b01 	strb.w	r3, [r5], #1
 8006358:	9b02      	ldr	r3, [sp, #8]
 800635a:	429d      	cmp	r5, r3
 800635c:	4606      	mov	r6, r0
 800635e:	460f      	mov	r7, r1
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	d134      	bne.n	80063d0 <_dtoa_r+0x660>
 8006366:	4b19      	ldr	r3, [pc, #100]	; (80063cc <_dtoa_r+0x65c>)
 8006368:	ec51 0b18 	vmov	r0, r1, d8
 800636c:	f7f9 ffae 	bl	80002cc <__adddf3>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4630      	mov	r0, r6
 8006376:	4639      	mov	r1, r7
 8006378:	f7fa fbee 	bl	8000b58 <__aeabi_dcmpgt>
 800637c:	2800      	cmp	r0, #0
 800637e:	d175      	bne.n	800646c <_dtoa_r+0x6fc>
 8006380:	ec53 2b18 	vmov	r2, r3, d8
 8006384:	4911      	ldr	r1, [pc, #68]	; (80063cc <_dtoa_r+0x65c>)
 8006386:	2000      	movs	r0, #0
 8006388:	f7f9 ff9e 	bl	80002c8 <__aeabi_dsub>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7fa fbc2 	bl	8000b1c <__aeabi_dcmplt>
 8006398:	2800      	cmp	r0, #0
 800639a:	f43f af27 	beq.w	80061ec <_dtoa_r+0x47c>
 800639e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063a0:	1e6b      	subs	r3, r5, #1
 80063a2:	930c      	str	r3, [sp, #48]	; 0x30
 80063a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063a8:	2b30      	cmp	r3, #48	; 0x30
 80063aa:	d0f8      	beq.n	800639e <_dtoa_r+0x62e>
 80063ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80063b0:	e04a      	b.n	8006448 <_dtoa_r+0x6d8>
 80063b2:	bf00      	nop
 80063b4:	080086c8 	.word	0x080086c8
 80063b8:	080086a0 	.word	0x080086a0
 80063bc:	3ff00000 	.word	0x3ff00000
 80063c0:	40240000 	.word	0x40240000
 80063c4:	401c0000 	.word	0x401c0000
 80063c8:	40140000 	.word	0x40140000
 80063cc:	3fe00000 	.word	0x3fe00000
 80063d0:	4baf      	ldr	r3, [pc, #700]	; (8006690 <_dtoa_r+0x920>)
 80063d2:	f7fa f931 	bl	8000638 <__aeabi_dmul>
 80063d6:	4606      	mov	r6, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	e7ac      	b.n	8006336 <_dtoa_r+0x5c6>
 80063dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063e0:	9d00      	ldr	r5, [sp, #0]
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	4630      	mov	r0, r6
 80063e8:	4639      	mov	r1, r7
 80063ea:	f7fa fa4f 	bl	800088c <__aeabi_ddiv>
 80063ee:	f7fa fbd3 	bl	8000b98 <__aeabi_d2iz>
 80063f2:	9002      	str	r0, [sp, #8]
 80063f4:	f7fa f8b6 	bl	8000564 <__aeabi_i2d>
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	f7fa f91c 	bl	8000638 <__aeabi_dmul>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f7f9 ff5e 	bl	80002c8 <__aeabi_dsub>
 800640c:	9e02      	ldr	r6, [sp, #8]
 800640e:	9f01      	ldr	r7, [sp, #4]
 8006410:	3630      	adds	r6, #48	; 0x30
 8006412:	f805 6b01 	strb.w	r6, [r5], #1
 8006416:	9e00      	ldr	r6, [sp, #0]
 8006418:	1bae      	subs	r6, r5, r6
 800641a:	42b7      	cmp	r7, r6
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	d137      	bne.n	8006492 <_dtoa_r+0x722>
 8006422:	f7f9 ff53 	bl	80002cc <__adddf3>
 8006426:	4642      	mov	r2, r8
 8006428:	464b      	mov	r3, r9
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	f7fa fb93 	bl	8000b58 <__aeabi_dcmpgt>
 8006432:	b9c8      	cbnz	r0, 8006468 <_dtoa_r+0x6f8>
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7fa fb64 	bl	8000b08 <__aeabi_dcmpeq>
 8006440:	b110      	cbz	r0, 8006448 <_dtoa_r+0x6d8>
 8006442:	9b02      	ldr	r3, [sp, #8]
 8006444:	07d9      	lsls	r1, r3, #31
 8006446:	d40f      	bmi.n	8006468 <_dtoa_r+0x6f8>
 8006448:	4620      	mov	r0, r4
 800644a:	4659      	mov	r1, fp
 800644c:	f000 fcf6 	bl	8006e3c <_Bfree>
 8006450:	2300      	movs	r3, #0
 8006452:	702b      	strb	r3, [r5, #0]
 8006454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006456:	f10a 0001 	add.w	r0, sl, #1
 800645a:	6018      	str	r0, [r3, #0]
 800645c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800645e:	2b00      	cmp	r3, #0
 8006460:	f43f acd8 	beq.w	8005e14 <_dtoa_r+0xa4>
 8006464:	601d      	str	r5, [r3, #0]
 8006466:	e4d5      	b.n	8005e14 <_dtoa_r+0xa4>
 8006468:	f8cd a01c 	str.w	sl, [sp, #28]
 800646c:	462b      	mov	r3, r5
 800646e:	461d      	mov	r5, r3
 8006470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006474:	2a39      	cmp	r2, #57	; 0x39
 8006476:	d108      	bne.n	800648a <_dtoa_r+0x71a>
 8006478:	9a00      	ldr	r2, [sp, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d1f7      	bne.n	800646e <_dtoa_r+0x6fe>
 800647e:	9a07      	ldr	r2, [sp, #28]
 8006480:	9900      	ldr	r1, [sp, #0]
 8006482:	3201      	adds	r2, #1
 8006484:	9207      	str	r2, [sp, #28]
 8006486:	2230      	movs	r2, #48	; 0x30
 8006488:	700a      	strb	r2, [r1, #0]
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	3201      	adds	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	e78c      	b.n	80063ac <_dtoa_r+0x63c>
 8006492:	4b7f      	ldr	r3, [pc, #508]	; (8006690 <_dtoa_r+0x920>)
 8006494:	2200      	movs	r2, #0
 8006496:	f7fa f8cf 	bl	8000638 <__aeabi_dmul>
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	f7fa fb31 	bl	8000b08 <__aeabi_dcmpeq>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d09b      	beq.n	80063e2 <_dtoa_r+0x672>
 80064aa:	e7cd      	b.n	8006448 <_dtoa_r+0x6d8>
 80064ac:	9a08      	ldr	r2, [sp, #32]
 80064ae:	2a00      	cmp	r2, #0
 80064b0:	f000 80c4 	beq.w	800663c <_dtoa_r+0x8cc>
 80064b4:	9a05      	ldr	r2, [sp, #20]
 80064b6:	2a01      	cmp	r2, #1
 80064b8:	f300 80a8 	bgt.w	800660c <_dtoa_r+0x89c>
 80064bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064be:	2a00      	cmp	r2, #0
 80064c0:	f000 80a0 	beq.w	8006604 <_dtoa_r+0x894>
 80064c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064c8:	9e06      	ldr	r6, [sp, #24]
 80064ca:	4645      	mov	r5, r8
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	2101      	movs	r1, #1
 80064d0:	441a      	add	r2, r3
 80064d2:	4620      	mov	r0, r4
 80064d4:	4498      	add	r8, r3
 80064d6:	9204      	str	r2, [sp, #16]
 80064d8:	f000 fd6c 	bl	8006fb4 <__i2b>
 80064dc:	4607      	mov	r7, r0
 80064de:	2d00      	cmp	r5, #0
 80064e0:	dd0b      	ble.n	80064fa <_dtoa_r+0x78a>
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd08      	ble.n	80064fa <_dtoa_r+0x78a>
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	bfa8      	it	ge
 80064ee:	462b      	movge	r3, r5
 80064f0:	eba8 0803 	sub.w	r8, r8, r3
 80064f4:	1aed      	subs	r5, r5, r3
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	9b06      	ldr	r3, [sp, #24]
 80064fc:	b1fb      	cbz	r3, 800653e <_dtoa_r+0x7ce>
 80064fe:	9b08      	ldr	r3, [sp, #32]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 809f 	beq.w	8006644 <_dtoa_r+0x8d4>
 8006506:	2e00      	cmp	r6, #0
 8006508:	dd11      	ble.n	800652e <_dtoa_r+0x7be>
 800650a:	4639      	mov	r1, r7
 800650c:	4632      	mov	r2, r6
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fe0c 	bl	800712c <__pow5mult>
 8006514:	465a      	mov	r2, fp
 8006516:	4601      	mov	r1, r0
 8006518:	4607      	mov	r7, r0
 800651a:	4620      	mov	r0, r4
 800651c:	f000 fd60 	bl	8006fe0 <__multiply>
 8006520:	4659      	mov	r1, fp
 8006522:	9007      	str	r0, [sp, #28]
 8006524:	4620      	mov	r0, r4
 8006526:	f000 fc89 	bl	8006e3c <_Bfree>
 800652a:	9b07      	ldr	r3, [sp, #28]
 800652c:	469b      	mov	fp, r3
 800652e:	9b06      	ldr	r3, [sp, #24]
 8006530:	1b9a      	subs	r2, r3, r6
 8006532:	d004      	beq.n	800653e <_dtoa_r+0x7ce>
 8006534:	4659      	mov	r1, fp
 8006536:	4620      	mov	r0, r4
 8006538:	f000 fdf8 	bl	800712c <__pow5mult>
 800653c:	4683      	mov	fp, r0
 800653e:	2101      	movs	r1, #1
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fd37 	bl	8006fb4 <__i2b>
 8006546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006548:	2b00      	cmp	r3, #0
 800654a:	4606      	mov	r6, r0
 800654c:	dd7c      	ble.n	8006648 <_dtoa_r+0x8d8>
 800654e:	461a      	mov	r2, r3
 8006550:	4601      	mov	r1, r0
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fdea 	bl	800712c <__pow5mult>
 8006558:	9b05      	ldr	r3, [sp, #20]
 800655a:	2b01      	cmp	r3, #1
 800655c:	4606      	mov	r6, r0
 800655e:	dd76      	ble.n	800664e <_dtoa_r+0x8de>
 8006560:	2300      	movs	r3, #0
 8006562:	9306      	str	r3, [sp, #24]
 8006564:	6933      	ldr	r3, [r6, #16]
 8006566:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800656a:	6918      	ldr	r0, [r3, #16]
 800656c:	f000 fcd2 	bl	8006f14 <__hi0bits>
 8006570:	f1c0 0020 	rsb	r0, r0, #32
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	4418      	add	r0, r3
 8006578:	f010 001f 	ands.w	r0, r0, #31
 800657c:	f000 8086 	beq.w	800668c <_dtoa_r+0x91c>
 8006580:	f1c0 0320 	rsb	r3, r0, #32
 8006584:	2b04      	cmp	r3, #4
 8006586:	dd7f      	ble.n	8006688 <_dtoa_r+0x918>
 8006588:	f1c0 001c 	rsb	r0, r0, #28
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	4403      	add	r3, r0
 8006590:	4480      	add	r8, r0
 8006592:	4405      	add	r5, r0
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	f1b8 0f00 	cmp.w	r8, #0
 800659a:	dd05      	ble.n	80065a8 <_dtoa_r+0x838>
 800659c:	4659      	mov	r1, fp
 800659e:	4642      	mov	r2, r8
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fe1d 	bl	80071e0 <__lshift>
 80065a6:	4683      	mov	fp, r0
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	dd05      	ble.n	80065ba <_dtoa_r+0x84a>
 80065ae:	4631      	mov	r1, r6
 80065b0:	461a      	mov	r2, r3
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 fe14 	bl	80071e0 <__lshift>
 80065b8:	4606      	mov	r6, r0
 80065ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d069      	beq.n	8006694 <_dtoa_r+0x924>
 80065c0:	4631      	mov	r1, r6
 80065c2:	4658      	mov	r0, fp
 80065c4:	f000 fe78 	bl	80072b8 <__mcmp>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	da63      	bge.n	8006694 <_dtoa_r+0x924>
 80065cc:	2300      	movs	r3, #0
 80065ce:	4659      	mov	r1, fp
 80065d0:	220a      	movs	r2, #10
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 fc54 	bl	8006e80 <__multadd>
 80065d8:	9b08      	ldr	r3, [sp, #32]
 80065da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065de:	4683      	mov	fp, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 818f 	beq.w	8006904 <_dtoa_r+0xb94>
 80065e6:	4639      	mov	r1, r7
 80065e8:	2300      	movs	r3, #0
 80065ea:	220a      	movs	r2, #10
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 fc47 	bl	8006e80 <__multadd>
 80065f2:	f1b9 0f00 	cmp.w	r9, #0
 80065f6:	4607      	mov	r7, r0
 80065f8:	f300 808e 	bgt.w	8006718 <_dtoa_r+0x9a8>
 80065fc:	9b05      	ldr	r3, [sp, #20]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	dc50      	bgt.n	80066a4 <_dtoa_r+0x934>
 8006602:	e089      	b.n	8006718 <_dtoa_r+0x9a8>
 8006604:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006606:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800660a:	e75d      	b.n	80064c8 <_dtoa_r+0x758>
 800660c:	9b01      	ldr	r3, [sp, #4]
 800660e:	1e5e      	subs	r6, r3, #1
 8006610:	9b06      	ldr	r3, [sp, #24]
 8006612:	42b3      	cmp	r3, r6
 8006614:	bfbf      	itttt	lt
 8006616:	9b06      	ldrlt	r3, [sp, #24]
 8006618:	9606      	strlt	r6, [sp, #24]
 800661a:	1af2      	sublt	r2, r6, r3
 800661c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800661e:	bfb6      	itet	lt
 8006620:	189b      	addlt	r3, r3, r2
 8006622:	1b9e      	subge	r6, r3, r6
 8006624:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	bfb8      	it	lt
 800662a:	2600      	movlt	r6, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	bfb5      	itete	lt
 8006630:	eba8 0503 	sublt.w	r5, r8, r3
 8006634:	9b01      	ldrge	r3, [sp, #4]
 8006636:	2300      	movlt	r3, #0
 8006638:	4645      	movge	r5, r8
 800663a:	e747      	b.n	80064cc <_dtoa_r+0x75c>
 800663c:	9e06      	ldr	r6, [sp, #24]
 800663e:	9f08      	ldr	r7, [sp, #32]
 8006640:	4645      	mov	r5, r8
 8006642:	e74c      	b.n	80064de <_dtoa_r+0x76e>
 8006644:	9a06      	ldr	r2, [sp, #24]
 8006646:	e775      	b.n	8006534 <_dtoa_r+0x7c4>
 8006648:	9b05      	ldr	r3, [sp, #20]
 800664a:	2b01      	cmp	r3, #1
 800664c:	dc18      	bgt.n	8006680 <_dtoa_r+0x910>
 800664e:	9b02      	ldr	r3, [sp, #8]
 8006650:	b9b3      	cbnz	r3, 8006680 <_dtoa_r+0x910>
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006658:	b9a3      	cbnz	r3, 8006684 <_dtoa_r+0x914>
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006660:	0d1b      	lsrs	r3, r3, #20
 8006662:	051b      	lsls	r3, r3, #20
 8006664:	b12b      	cbz	r3, 8006672 <_dtoa_r+0x902>
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	3301      	adds	r3, #1
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	f108 0801 	add.w	r8, r8, #1
 8006670:	2301      	movs	r3, #1
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006676:	2b00      	cmp	r3, #0
 8006678:	f47f af74 	bne.w	8006564 <_dtoa_r+0x7f4>
 800667c:	2001      	movs	r0, #1
 800667e:	e779      	b.n	8006574 <_dtoa_r+0x804>
 8006680:	2300      	movs	r3, #0
 8006682:	e7f6      	b.n	8006672 <_dtoa_r+0x902>
 8006684:	9b02      	ldr	r3, [sp, #8]
 8006686:	e7f4      	b.n	8006672 <_dtoa_r+0x902>
 8006688:	d085      	beq.n	8006596 <_dtoa_r+0x826>
 800668a:	4618      	mov	r0, r3
 800668c:	301c      	adds	r0, #28
 800668e:	e77d      	b.n	800658c <_dtoa_r+0x81c>
 8006690:	40240000 	.word	0x40240000
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	dc38      	bgt.n	800670c <_dtoa_r+0x99c>
 800669a:	9b05      	ldr	r3, [sp, #20]
 800669c:	2b02      	cmp	r3, #2
 800669e:	dd35      	ble.n	800670c <_dtoa_r+0x99c>
 80066a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80066a4:	f1b9 0f00 	cmp.w	r9, #0
 80066a8:	d10d      	bne.n	80066c6 <_dtoa_r+0x956>
 80066aa:	4631      	mov	r1, r6
 80066ac:	464b      	mov	r3, r9
 80066ae:	2205      	movs	r2, #5
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 fbe5 	bl	8006e80 <__multadd>
 80066b6:	4601      	mov	r1, r0
 80066b8:	4606      	mov	r6, r0
 80066ba:	4658      	mov	r0, fp
 80066bc:	f000 fdfc 	bl	80072b8 <__mcmp>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	f73f adbd 	bgt.w	8006240 <_dtoa_r+0x4d0>
 80066c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c8:	9d00      	ldr	r5, [sp, #0]
 80066ca:	ea6f 0a03 	mvn.w	sl, r3
 80066ce:	f04f 0800 	mov.w	r8, #0
 80066d2:	4631      	mov	r1, r6
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fbb1 	bl	8006e3c <_Bfree>
 80066da:	2f00      	cmp	r7, #0
 80066dc:	f43f aeb4 	beq.w	8006448 <_dtoa_r+0x6d8>
 80066e0:	f1b8 0f00 	cmp.w	r8, #0
 80066e4:	d005      	beq.n	80066f2 <_dtoa_r+0x982>
 80066e6:	45b8      	cmp	r8, r7
 80066e8:	d003      	beq.n	80066f2 <_dtoa_r+0x982>
 80066ea:	4641      	mov	r1, r8
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fba5 	bl	8006e3c <_Bfree>
 80066f2:	4639      	mov	r1, r7
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fba1 	bl	8006e3c <_Bfree>
 80066fa:	e6a5      	b.n	8006448 <_dtoa_r+0x6d8>
 80066fc:	2600      	movs	r6, #0
 80066fe:	4637      	mov	r7, r6
 8006700:	e7e1      	b.n	80066c6 <_dtoa_r+0x956>
 8006702:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006704:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006708:	4637      	mov	r7, r6
 800670a:	e599      	b.n	8006240 <_dtoa_r+0x4d0>
 800670c:	9b08      	ldr	r3, [sp, #32]
 800670e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80fd 	beq.w	8006912 <_dtoa_r+0xba2>
 8006718:	2d00      	cmp	r5, #0
 800671a:	dd05      	ble.n	8006728 <_dtoa_r+0x9b8>
 800671c:	4639      	mov	r1, r7
 800671e:	462a      	mov	r2, r5
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fd5d 	bl	80071e0 <__lshift>
 8006726:	4607      	mov	r7, r0
 8006728:	9b06      	ldr	r3, [sp, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d05c      	beq.n	80067e8 <_dtoa_r+0xa78>
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4620      	mov	r0, r4
 8006732:	f000 fb43 	bl	8006dbc <_Balloc>
 8006736:	4605      	mov	r5, r0
 8006738:	b928      	cbnz	r0, 8006746 <_dtoa_r+0x9d6>
 800673a:	4b80      	ldr	r3, [pc, #512]	; (800693c <_dtoa_r+0xbcc>)
 800673c:	4602      	mov	r2, r0
 800673e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006742:	f7ff bb2e 	b.w	8005da2 <_dtoa_r+0x32>
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	3202      	adds	r2, #2
 800674a:	0092      	lsls	r2, r2, #2
 800674c:	f107 010c 	add.w	r1, r7, #12
 8006750:	300c      	adds	r0, #12
 8006752:	f000 fb25 	bl	8006da0 <memcpy>
 8006756:	2201      	movs	r2, #1
 8006758:	4629      	mov	r1, r5
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fd40 	bl	80071e0 <__lshift>
 8006760:	9b00      	ldr	r3, [sp, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	9b00      	ldr	r3, [sp, #0]
 8006768:	444b      	add	r3, r9
 800676a:	9307      	str	r3, [sp, #28]
 800676c:	9b02      	ldr	r3, [sp, #8]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	46b8      	mov	r8, r7
 8006774:	9306      	str	r3, [sp, #24]
 8006776:	4607      	mov	r7, r0
 8006778:	9b01      	ldr	r3, [sp, #4]
 800677a:	4631      	mov	r1, r6
 800677c:	3b01      	subs	r3, #1
 800677e:	4658      	mov	r0, fp
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	f7ff fa67 	bl	8005c54 <quorem>
 8006786:	4603      	mov	r3, r0
 8006788:	3330      	adds	r3, #48	; 0x30
 800678a:	9004      	str	r0, [sp, #16]
 800678c:	4641      	mov	r1, r8
 800678e:	4658      	mov	r0, fp
 8006790:	9308      	str	r3, [sp, #32]
 8006792:	f000 fd91 	bl	80072b8 <__mcmp>
 8006796:	463a      	mov	r2, r7
 8006798:	4681      	mov	r9, r0
 800679a:	4631      	mov	r1, r6
 800679c:	4620      	mov	r0, r4
 800679e:	f000 fda7 	bl	80072f0 <__mdiff>
 80067a2:	68c2      	ldr	r2, [r0, #12]
 80067a4:	9b08      	ldr	r3, [sp, #32]
 80067a6:	4605      	mov	r5, r0
 80067a8:	bb02      	cbnz	r2, 80067ec <_dtoa_r+0xa7c>
 80067aa:	4601      	mov	r1, r0
 80067ac:	4658      	mov	r0, fp
 80067ae:	f000 fd83 	bl	80072b8 <__mcmp>
 80067b2:	9b08      	ldr	r3, [sp, #32]
 80067b4:	4602      	mov	r2, r0
 80067b6:	4629      	mov	r1, r5
 80067b8:	4620      	mov	r0, r4
 80067ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80067be:	f000 fb3d 	bl	8006e3c <_Bfree>
 80067c2:	9b05      	ldr	r3, [sp, #20]
 80067c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067c6:	9d01      	ldr	r5, [sp, #4]
 80067c8:	ea43 0102 	orr.w	r1, r3, r2
 80067cc:	9b06      	ldr	r3, [sp, #24]
 80067ce:	430b      	orrs	r3, r1
 80067d0:	9b08      	ldr	r3, [sp, #32]
 80067d2:	d10d      	bne.n	80067f0 <_dtoa_r+0xa80>
 80067d4:	2b39      	cmp	r3, #57	; 0x39
 80067d6:	d029      	beq.n	800682c <_dtoa_r+0xabc>
 80067d8:	f1b9 0f00 	cmp.w	r9, #0
 80067dc:	dd01      	ble.n	80067e2 <_dtoa_r+0xa72>
 80067de:	9b04      	ldr	r3, [sp, #16]
 80067e0:	3331      	adds	r3, #49	; 0x31
 80067e2:	9a02      	ldr	r2, [sp, #8]
 80067e4:	7013      	strb	r3, [r2, #0]
 80067e6:	e774      	b.n	80066d2 <_dtoa_r+0x962>
 80067e8:	4638      	mov	r0, r7
 80067ea:	e7b9      	b.n	8006760 <_dtoa_r+0x9f0>
 80067ec:	2201      	movs	r2, #1
 80067ee:	e7e2      	b.n	80067b6 <_dtoa_r+0xa46>
 80067f0:	f1b9 0f00 	cmp.w	r9, #0
 80067f4:	db06      	blt.n	8006804 <_dtoa_r+0xa94>
 80067f6:	9905      	ldr	r1, [sp, #20]
 80067f8:	ea41 0909 	orr.w	r9, r1, r9
 80067fc:	9906      	ldr	r1, [sp, #24]
 80067fe:	ea59 0101 	orrs.w	r1, r9, r1
 8006802:	d120      	bne.n	8006846 <_dtoa_r+0xad6>
 8006804:	2a00      	cmp	r2, #0
 8006806:	ddec      	ble.n	80067e2 <_dtoa_r+0xa72>
 8006808:	4659      	mov	r1, fp
 800680a:	2201      	movs	r2, #1
 800680c:	4620      	mov	r0, r4
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	f000 fce6 	bl	80071e0 <__lshift>
 8006814:	4631      	mov	r1, r6
 8006816:	4683      	mov	fp, r0
 8006818:	f000 fd4e 	bl	80072b8 <__mcmp>
 800681c:	2800      	cmp	r0, #0
 800681e:	9b01      	ldr	r3, [sp, #4]
 8006820:	dc02      	bgt.n	8006828 <_dtoa_r+0xab8>
 8006822:	d1de      	bne.n	80067e2 <_dtoa_r+0xa72>
 8006824:	07da      	lsls	r2, r3, #31
 8006826:	d5dc      	bpl.n	80067e2 <_dtoa_r+0xa72>
 8006828:	2b39      	cmp	r3, #57	; 0x39
 800682a:	d1d8      	bne.n	80067de <_dtoa_r+0xa6e>
 800682c:	9a02      	ldr	r2, [sp, #8]
 800682e:	2339      	movs	r3, #57	; 0x39
 8006830:	7013      	strb	r3, [r2, #0]
 8006832:	462b      	mov	r3, r5
 8006834:	461d      	mov	r5, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800683c:	2a39      	cmp	r2, #57	; 0x39
 800683e:	d050      	beq.n	80068e2 <_dtoa_r+0xb72>
 8006840:	3201      	adds	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e745      	b.n	80066d2 <_dtoa_r+0x962>
 8006846:	2a00      	cmp	r2, #0
 8006848:	dd03      	ble.n	8006852 <_dtoa_r+0xae2>
 800684a:	2b39      	cmp	r3, #57	; 0x39
 800684c:	d0ee      	beq.n	800682c <_dtoa_r+0xabc>
 800684e:	3301      	adds	r3, #1
 8006850:	e7c7      	b.n	80067e2 <_dtoa_r+0xa72>
 8006852:	9a01      	ldr	r2, [sp, #4]
 8006854:	9907      	ldr	r1, [sp, #28]
 8006856:	f802 3c01 	strb.w	r3, [r2, #-1]
 800685a:	428a      	cmp	r2, r1
 800685c:	d02a      	beq.n	80068b4 <_dtoa_r+0xb44>
 800685e:	4659      	mov	r1, fp
 8006860:	2300      	movs	r3, #0
 8006862:	220a      	movs	r2, #10
 8006864:	4620      	mov	r0, r4
 8006866:	f000 fb0b 	bl	8006e80 <__multadd>
 800686a:	45b8      	cmp	r8, r7
 800686c:	4683      	mov	fp, r0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	f04f 020a 	mov.w	r2, #10
 8006876:	4641      	mov	r1, r8
 8006878:	4620      	mov	r0, r4
 800687a:	d107      	bne.n	800688c <_dtoa_r+0xb1c>
 800687c:	f000 fb00 	bl	8006e80 <__multadd>
 8006880:	4680      	mov	r8, r0
 8006882:	4607      	mov	r7, r0
 8006884:	9b01      	ldr	r3, [sp, #4]
 8006886:	3301      	adds	r3, #1
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	e775      	b.n	8006778 <_dtoa_r+0xa08>
 800688c:	f000 faf8 	bl	8006e80 <__multadd>
 8006890:	4639      	mov	r1, r7
 8006892:	4680      	mov	r8, r0
 8006894:	2300      	movs	r3, #0
 8006896:	220a      	movs	r2, #10
 8006898:	4620      	mov	r0, r4
 800689a:	f000 faf1 	bl	8006e80 <__multadd>
 800689e:	4607      	mov	r7, r0
 80068a0:	e7f0      	b.n	8006884 <_dtoa_r+0xb14>
 80068a2:	f1b9 0f00 	cmp.w	r9, #0
 80068a6:	9a00      	ldr	r2, [sp, #0]
 80068a8:	bfcc      	ite	gt
 80068aa:	464d      	movgt	r5, r9
 80068ac:	2501      	movle	r5, #1
 80068ae:	4415      	add	r5, r2
 80068b0:	f04f 0800 	mov.w	r8, #0
 80068b4:	4659      	mov	r1, fp
 80068b6:	2201      	movs	r2, #1
 80068b8:	4620      	mov	r0, r4
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	f000 fc90 	bl	80071e0 <__lshift>
 80068c0:	4631      	mov	r1, r6
 80068c2:	4683      	mov	fp, r0
 80068c4:	f000 fcf8 	bl	80072b8 <__mcmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	dcb2      	bgt.n	8006832 <_dtoa_r+0xac2>
 80068cc:	d102      	bne.n	80068d4 <_dtoa_r+0xb64>
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	07db      	lsls	r3, r3, #31
 80068d2:	d4ae      	bmi.n	8006832 <_dtoa_r+0xac2>
 80068d4:	462b      	mov	r3, r5
 80068d6:	461d      	mov	r5, r3
 80068d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068dc:	2a30      	cmp	r2, #48	; 0x30
 80068de:	d0fa      	beq.n	80068d6 <_dtoa_r+0xb66>
 80068e0:	e6f7      	b.n	80066d2 <_dtoa_r+0x962>
 80068e2:	9a00      	ldr	r2, [sp, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d1a5      	bne.n	8006834 <_dtoa_r+0xac4>
 80068e8:	f10a 0a01 	add.w	sl, sl, #1
 80068ec:	2331      	movs	r3, #49	; 0x31
 80068ee:	e779      	b.n	80067e4 <_dtoa_r+0xa74>
 80068f0:	4b13      	ldr	r3, [pc, #76]	; (8006940 <_dtoa_r+0xbd0>)
 80068f2:	f7ff baaf 	b.w	8005e54 <_dtoa_r+0xe4>
 80068f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f47f aa86 	bne.w	8005e0a <_dtoa_r+0x9a>
 80068fe:	4b11      	ldr	r3, [pc, #68]	; (8006944 <_dtoa_r+0xbd4>)
 8006900:	f7ff baa8 	b.w	8005e54 <_dtoa_r+0xe4>
 8006904:	f1b9 0f00 	cmp.w	r9, #0
 8006908:	dc03      	bgt.n	8006912 <_dtoa_r+0xba2>
 800690a:	9b05      	ldr	r3, [sp, #20]
 800690c:	2b02      	cmp	r3, #2
 800690e:	f73f aec9 	bgt.w	80066a4 <_dtoa_r+0x934>
 8006912:	9d00      	ldr	r5, [sp, #0]
 8006914:	4631      	mov	r1, r6
 8006916:	4658      	mov	r0, fp
 8006918:	f7ff f99c 	bl	8005c54 <quorem>
 800691c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006920:	f805 3b01 	strb.w	r3, [r5], #1
 8006924:	9a00      	ldr	r2, [sp, #0]
 8006926:	1aaa      	subs	r2, r5, r2
 8006928:	4591      	cmp	r9, r2
 800692a:	ddba      	ble.n	80068a2 <_dtoa_r+0xb32>
 800692c:	4659      	mov	r1, fp
 800692e:	2300      	movs	r3, #0
 8006930:	220a      	movs	r2, #10
 8006932:	4620      	mov	r0, r4
 8006934:	f000 faa4 	bl	8006e80 <__multadd>
 8006938:	4683      	mov	fp, r0
 800693a:	e7eb      	b.n	8006914 <_dtoa_r+0xba4>
 800693c:	080085cb 	.word	0x080085cb
 8006940:	08008524 	.word	0x08008524
 8006944:	08008548 	.word	0x08008548

08006948 <__sflush_r>:
 8006948:	898a      	ldrh	r2, [r1, #12]
 800694a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	4605      	mov	r5, r0
 8006950:	0710      	lsls	r0, r2, #28
 8006952:	460c      	mov	r4, r1
 8006954:	d458      	bmi.n	8006a08 <__sflush_r+0xc0>
 8006956:	684b      	ldr	r3, [r1, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dc05      	bgt.n	8006968 <__sflush_r+0x20>
 800695c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	dc02      	bgt.n	8006968 <__sflush_r+0x20>
 8006962:	2000      	movs	r0, #0
 8006964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800696a:	2e00      	cmp	r6, #0
 800696c:	d0f9      	beq.n	8006962 <__sflush_r+0x1a>
 800696e:	2300      	movs	r3, #0
 8006970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006974:	682f      	ldr	r7, [r5, #0]
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	d032      	beq.n	80069e0 <__sflush_r+0x98>
 800697a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	075a      	lsls	r2, r3, #29
 8006980:	d505      	bpl.n	800698e <__sflush_r+0x46>
 8006982:	6863      	ldr	r3, [r4, #4]
 8006984:	1ac0      	subs	r0, r0, r3
 8006986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006988:	b10b      	cbz	r3, 800698e <__sflush_r+0x46>
 800698a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800698c:	1ac0      	subs	r0, r0, r3
 800698e:	2300      	movs	r3, #0
 8006990:	4602      	mov	r2, r0
 8006992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006994:	6a21      	ldr	r1, [r4, #32]
 8006996:	4628      	mov	r0, r5
 8006998:	47b0      	blx	r6
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	d106      	bne.n	80069ae <__sflush_r+0x66>
 80069a0:	6829      	ldr	r1, [r5, #0]
 80069a2:	291d      	cmp	r1, #29
 80069a4:	d82c      	bhi.n	8006a00 <__sflush_r+0xb8>
 80069a6:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <__sflush_r+0x108>)
 80069a8:	40ca      	lsrs	r2, r1
 80069aa:	07d6      	lsls	r6, r2, #31
 80069ac:	d528      	bpl.n	8006a00 <__sflush_r+0xb8>
 80069ae:	2200      	movs	r2, #0
 80069b0:	6062      	str	r2, [r4, #4]
 80069b2:	04d9      	lsls	r1, r3, #19
 80069b4:	6922      	ldr	r2, [r4, #16]
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	d504      	bpl.n	80069c4 <__sflush_r+0x7c>
 80069ba:	1c42      	adds	r2, r0, #1
 80069bc:	d101      	bne.n	80069c2 <__sflush_r+0x7a>
 80069be:	682b      	ldr	r3, [r5, #0]
 80069c0:	b903      	cbnz	r3, 80069c4 <__sflush_r+0x7c>
 80069c2:	6560      	str	r0, [r4, #84]	; 0x54
 80069c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069c6:	602f      	str	r7, [r5, #0]
 80069c8:	2900      	cmp	r1, #0
 80069ca:	d0ca      	beq.n	8006962 <__sflush_r+0x1a>
 80069cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d0:	4299      	cmp	r1, r3
 80069d2:	d002      	beq.n	80069da <__sflush_r+0x92>
 80069d4:	4628      	mov	r0, r5
 80069d6:	f000 fd7f 	bl	80074d8 <_free_r>
 80069da:	2000      	movs	r0, #0
 80069dc:	6360      	str	r0, [r4, #52]	; 0x34
 80069de:	e7c1      	b.n	8006964 <__sflush_r+0x1c>
 80069e0:	6a21      	ldr	r1, [r4, #32]
 80069e2:	2301      	movs	r3, #1
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b0      	blx	r6
 80069e8:	1c41      	adds	r1, r0, #1
 80069ea:	d1c7      	bne.n	800697c <__sflush_r+0x34>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0c4      	beq.n	800697c <__sflush_r+0x34>
 80069f2:	2b1d      	cmp	r3, #29
 80069f4:	d001      	beq.n	80069fa <__sflush_r+0xb2>
 80069f6:	2b16      	cmp	r3, #22
 80069f8:	d101      	bne.n	80069fe <__sflush_r+0xb6>
 80069fa:	602f      	str	r7, [r5, #0]
 80069fc:	e7b1      	b.n	8006962 <__sflush_r+0x1a>
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	e7ad      	b.n	8006964 <__sflush_r+0x1c>
 8006a08:	690f      	ldr	r7, [r1, #16]
 8006a0a:	2f00      	cmp	r7, #0
 8006a0c:	d0a9      	beq.n	8006962 <__sflush_r+0x1a>
 8006a0e:	0793      	lsls	r3, r2, #30
 8006a10:	680e      	ldr	r6, [r1, #0]
 8006a12:	bf08      	it	eq
 8006a14:	694b      	ldreq	r3, [r1, #20]
 8006a16:	600f      	str	r7, [r1, #0]
 8006a18:	bf18      	it	ne
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	eba6 0807 	sub.w	r8, r6, r7
 8006a20:	608b      	str	r3, [r1, #8]
 8006a22:	f1b8 0f00 	cmp.w	r8, #0
 8006a26:	dd9c      	ble.n	8006962 <__sflush_r+0x1a>
 8006a28:	6a21      	ldr	r1, [r4, #32]
 8006a2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a2c:	4643      	mov	r3, r8
 8006a2e:	463a      	mov	r2, r7
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b0      	blx	r6
 8006a34:	2800      	cmp	r0, #0
 8006a36:	dc06      	bgt.n	8006a46 <__sflush_r+0xfe>
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3e:	81a3      	strh	r3, [r4, #12]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	e78e      	b.n	8006964 <__sflush_r+0x1c>
 8006a46:	4407      	add	r7, r0
 8006a48:	eba8 0800 	sub.w	r8, r8, r0
 8006a4c:	e7e9      	b.n	8006a22 <__sflush_r+0xda>
 8006a4e:	bf00      	nop
 8006a50:	20400001 	.word	0x20400001

08006a54 <_fflush_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	690b      	ldr	r3, [r1, #16]
 8006a58:	4605      	mov	r5, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	b913      	cbnz	r3, 8006a64 <_fflush_r+0x10>
 8006a5e:	2500      	movs	r5, #0
 8006a60:	4628      	mov	r0, r5
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	b118      	cbz	r0, 8006a6e <_fflush_r+0x1a>
 8006a66:	6983      	ldr	r3, [r0, #24]
 8006a68:	b90b      	cbnz	r3, 8006a6e <_fflush_r+0x1a>
 8006a6a:	f000 f887 	bl	8006b7c <__sinit>
 8006a6e:	4b14      	ldr	r3, [pc, #80]	; (8006ac0 <_fflush_r+0x6c>)
 8006a70:	429c      	cmp	r4, r3
 8006a72:	d11b      	bne.n	8006aac <_fflush_r+0x58>
 8006a74:	686c      	ldr	r4, [r5, #4]
 8006a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ef      	beq.n	8006a5e <_fflush_r+0xa>
 8006a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a80:	07d0      	lsls	r0, r2, #31
 8006a82:	d404      	bmi.n	8006a8e <_fflush_r+0x3a>
 8006a84:	0599      	lsls	r1, r3, #22
 8006a86:	d402      	bmi.n	8006a8e <_fflush_r+0x3a>
 8006a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a8a:	f000 f91a 	bl	8006cc2 <__retarget_lock_acquire_recursive>
 8006a8e:	4628      	mov	r0, r5
 8006a90:	4621      	mov	r1, r4
 8006a92:	f7ff ff59 	bl	8006948 <__sflush_r>
 8006a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a98:	07da      	lsls	r2, r3, #31
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	d4e0      	bmi.n	8006a60 <_fflush_r+0xc>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	059b      	lsls	r3, r3, #22
 8006aa2:	d4dd      	bmi.n	8006a60 <_fflush_r+0xc>
 8006aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aa6:	f000 f90d 	bl	8006cc4 <__retarget_lock_release_recursive>
 8006aaa:	e7d9      	b.n	8006a60 <_fflush_r+0xc>
 8006aac:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <_fflush_r+0x70>)
 8006aae:	429c      	cmp	r4, r3
 8006ab0:	d101      	bne.n	8006ab6 <_fflush_r+0x62>
 8006ab2:	68ac      	ldr	r4, [r5, #8]
 8006ab4:	e7df      	b.n	8006a76 <_fflush_r+0x22>
 8006ab6:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <_fflush_r+0x74>)
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	bf08      	it	eq
 8006abc:	68ec      	ldreq	r4, [r5, #12]
 8006abe:	e7da      	b.n	8006a76 <_fflush_r+0x22>
 8006ac0:	080085fc 	.word	0x080085fc
 8006ac4:	0800861c 	.word	0x0800861c
 8006ac8:	080085dc 	.word	0x080085dc

08006acc <std>:
 8006acc:	2300      	movs	r3, #0
 8006ace:	b510      	push	{r4, lr}
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ada:	6083      	str	r3, [r0, #8]
 8006adc:	8181      	strh	r1, [r0, #12]
 8006ade:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae0:	81c2      	strh	r2, [r0, #14]
 8006ae2:	6183      	str	r3, [r0, #24]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	305c      	adds	r0, #92	; 0x5c
 8006aea:	f7fe fb61 	bl	80051b0 <memset>
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <std+0x38>)
 8006af0:	6263      	str	r3, [r4, #36]	; 0x24
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <std+0x3c>)
 8006af4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <std+0x40>)
 8006af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x44>)
 8006afc:	6224      	str	r4, [r4, #32]
 8006afe:	6323      	str	r3, [r4, #48]	; 0x30
 8006b00:	bd10      	pop	{r4, pc}
 8006b02:	bf00      	nop
 8006b04:	08007905 	.word	0x08007905
 8006b08:	08007927 	.word	0x08007927
 8006b0c:	0800795f 	.word	0x0800795f
 8006b10:	08007983 	.word	0x08007983

08006b14 <_cleanup_r>:
 8006b14:	4901      	ldr	r1, [pc, #4]	; (8006b1c <_cleanup_r+0x8>)
 8006b16:	f000 b8af 	b.w	8006c78 <_fwalk_reent>
 8006b1a:	bf00      	nop
 8006b1c:	08006a55 	.word	0x08006a55

08006b20 <__sfmoreglue>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	1e4a      	subs	r2, r1, #1
 8006b24:	2568      	movs	r5, #104	; 0x68
 8006b26:	4355      	muls	r5, r2
 8006b28:	460e      	mov	r6, r1
 8006b2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b2e:	f000 fd23 	bl	8007578 <_malloc_r>
 8006b32:	4604      	mov	r4, r0
 8006b34:	b140      	cbz	r0, 8006b48 <__sfmoreglue+0x28>
 8006b36:	2100      	movs	r1, #0
 8006b38:	e9c0 1600 	strd	r1, r6, [r0]
 8006b3c:	300c      	adds	r0, #12
 8006b3e:	60a0      	str	r0, [r4, #8]
 8006b40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b44:	f7fe fb34 	bl	80051b0 <memset>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}

08006b4c <__sfp_lock_acquire>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	; (8006b54 <__sfp_lock_acquire+0x8>)
 8006b4e:	f000 b8b8 	b.w	8006cc2 <__retarget_lock_acquire_recursive>
 8006b52:	bf00      	nop
 8006b54:	20000566 	.word	0x20000566

08006b58 <__sfp_lock_release>:
 8006b58:	4801      	ldr	r0, [pc, #4]	; (8006b60 <__sfp_lock_release+0x8>)
 8006b5a:	f000 b8b3 	b.w	8006cc4 <__retarget_lock_release_recursive>
 8006b5e:	bf00      	nop
 8006b60:	20000566 	.word	0x20000566

08006b64 <__sinit_lock_acquire>:
 8006b64:	4801      	ldr	r0, [pc, #4]	; (8006b6c <__sinit_lock_acquire+0x8>)
 8006b66:	f000 b8ac 	b.w	8006cc2 <__retarget_lock_acquire_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	20000561 	.word	0x20000561

08006b70 <__sinit_lock_release>:
 8006b70:	4801      	ldr	r0, [pc, #4]	; (8006b78 <__sinit_lock_release+0x8>)
 8006b72:	f000 b8a7 	b.w	8006cc4 <__retarget_lock_release_recursive>
 8006b76:	bf00      	nop
 8006b78:	20000561 	.word	0x20000561

08006b7c <__sinit>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	4604      	mov	r4, r0
 8006b80:	f7ff fff0 	bl	8006b64 <__sinit_lock_acquire>
 8006b84:	69a3      	ldr	r3, [r4, #24]
 8006b86:	b11b      	cbz	r3, 8006b90 <__sinit+0x14>
 8006b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b8c:	f7ff bff0 	b.w	8006b70 <__sinit_lock_release>
 8006b90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b94:	6523      	str	r3, [r4, #80]	; 0x50
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <__sinit+0x68>)
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <__sinit+0x6c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	bf04      	itt	eq
 8006ba2:	2301      	moveq	r3, #1
 8006ba4:	61a3      	streq	r3, [r4, #24]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f820 	bl	8006bec <__sfp>
 8006bac:	6060      	str	r0, [r4, #4]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 f81c 	bl	8006bec <__sfp>
 8006bb4:	60a0      	str	r0, [r4, #8]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 f818 	bl	8006bec <__sfp>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	60e0      	str	r0, [r4, #12]
 8006bc0:	2104      	movs	r1, #4
 8006bc2:	6860      	ldr	r0, [r4, #4]
 8006bc4:	f7ff ff82 	bl	8006acc <std>
 8006bc8:	68a0      	ldr	r0, [r4, #8]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	2109      	movs	r1, #9
 8006bce:	f7ff ff7d 	bl	8006acc <std>
 8006bd2:	68e0      	ldr	r0, [r4, #12]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	2112      	movs	r1, #18
 8006bd8:	f7ff ff78 	bl	8006acc <std>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	61a3      	str	r3, [r4, #24]
 8006be0:	e7d2      	b.n	8006b88 <__sinit+0xc>
 8006be2:	bf00      	nop
 8006be4:	08008510 	.word	0x08008510
 8006be8:	08006b15 	.word	0x08006b15

08006bec <__sfp>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	4607      	mov	r7, r0
 8006bf0:	f7ff ffac 	bl	8006b4c <__sfp_lock_acquire>
 8006bf4:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <__sfp+0x84>)
 8006bf6:	681e      	ldr	r6, [r3, #0]
 8006bf8:	69b3      	ldr	r3, [r6, #24]
 8006bfa:	b913      	cbnz	r3, 8006c02 <__sfp+0x16>
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff ffbd 	bl	8006b7c <__sinit>
 8006c02:	3648      	adds	r6, #72	; 0x48
 8006c04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	d503      	bpl.n	8006c14 <__sfp+0x28>
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	b30b      	cbz	r3, 8006c54 <__sfp+0x68>
 8006c10:	6836      	ldr	r6, [r6, #0]
 8006c12:	e7f7      	b.n	8006c04 <__sfp+0x18>
 8006c14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c18:	b9d5      	cbnz	r5, 8006c50 <__sfp+0x64>
 8006c1a:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <__sfp+0x88>)
 8006c1c:	60e3      	str	r3, [r4, #12]
 8006c1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c22:	6665      	str	r5, [r4, #100]	; 0x64
 8006c24:	f000 f84c 	bl	8006cc0 <__retarget_lock_init_recursive>
 8006c28:	f7ff ff96 	bl	8006b58 <__sfp_lock_release>
 8006c2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c34:	6025      	str	r5, [r4, #0]
 8006c36:	61a5      	str	r5, [r4, #24]
 8006c38:	2208      	movs	r2, #8
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c40:	f7fe fab6 	bl	80051b0 <memset>
 8006c44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c50:	3468      	adds	r4, #104	; 0x68
 8006c52:	e7d9      	b.n	8006c08 <__sfp+0x1c>
 8006c54:	2104      	movs	r1, #4
 8006c56:	4638      	mov	r0, r7
 8006c58:	f7ff ff62 	bl	8006b20 <__sfmoreglue>
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	6030      	str	r0, [r6, #0]
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d1d5      	bne.n	8006c10 <__sfp+0x24>
 8006c64:	f7ff ff78 	bl	8006b58 <__sfp_lock_release>
 8006c68:	230c      	movs	r3, #12
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	e7ee      	b.n	8006c4c <__sfp+0x60>
 8006c6e:	bf00      	nop
 8006c70:	08008510 	.word	0x08008510
 8006c74:	ffff0001 	.word	0xffff0001

08006c78 <_fwalk_reent>:
 8006c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	4688      	mov	r8, r1
 8006c80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c84:	2700      	movs	r7, #0
 8006c86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006c8e:	d505      	bpl.n	8006c9c <_fwalk_reent+0x24>
 8006c90:	6824      	ldr	r4, [r4, #0]
 8006c92:	2c00      	cmp	r4, #0
 8006c94:	d1f7      	bne.n	8006c86 <_fwalk_reent+0xe>
 8006c96:	4638      	mov	r0, r7
 8006c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9c:	89ab      	ldrh	r3, [r5, #12]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d907      	bls.n	8006cb2 <_fwalk_reent+0x3a>
 8006ca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	d003      	beq.n	8006cb2 <_fwalk_reent+0x3a>
 8006caa:	4629      	mov	r1, r5
 8006cac:	4630      	mov	r0, r6
 8006cae:	47c0      	blx	r8
 8006cb0:	4307      	orrs	r7, r0
 8006cb2:	3568      	adds	r5, #104	; 0x68
 8006cb4:	e7e9      	b.n	8006c8a <_fwalk_reent+0x12>
	...

08006cb8 <_localeconv_r>:
 8006cb8:	4800      	ldr	r0, [pc, #0]	; (8006cbc <_localeconv_r+0x4>)
 8006cba:	4770      	bx	lr
 8006cbc:	20000164 	.word	0x20000164

08006cc0 <__retarget_lock_init_recursive>:
 8006cc0:	4770      	bx	lr

08006cc2 <__retarget_lock_acquire_recursive>:
 8006cc2:	4770      	bx	lr

08006cc4 <__retarget_lock_release_recursive>:
 8006cc4:	4770      	bx	lr

08006cc6 <__swhatbuf_r>:
 8006cc6:	b570      	push	{r4, r5, r6, lr}
 8006cc8:	460e      	mov	r6, r1
 8006cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cce:	2900      	cmp	r1, #0
 8006cd0:	b096      	sub	sp, #88	; 0x58
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	461d      	mov	r5, r3
 8006cd6:	da07      	bge.n	8006ce8 <__swhatbuf_r+0x22>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	89b3      	ldrh	r3, [r6, #12]
 8006cde:	061a      	lsls	r2, r3, #24
 8006ce0:	d410      	bmi.n	8006d04 <__swhatbuf_r+0x3e>
 8006ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce6:	e00e      	b.n	8006d06 <__swhatbuf_r+0x40>
 8006ce8:	466a      	mov	r2, sp
 8006cea:	f000 fea1 	bl	8007a30 <_fstat_r>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	dbf2      	blt.n	8006cd8 <__swhatbuf_r+0x12>
 8006cf2:	9a01      	ldr	r2, [sp, #4]
 8006cf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cfc:	425a      	negs	r2, r3
 8006cfe:	415a      	adcs	r2, r3
 8006d00:	602a      	str	r2, [r5, #0]
 8006d02:	e7ee      	b.n	8006ce2 <__swhatbuf_r+0x1c>
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	2000      	movs	r0, #0
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	b016      	add	sp, #88	; 0x58
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d10 <__smakebuf_r>:
 8006d10:	898b      	ldrh	r3, [r1, #12]
 8006d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d14:	079d      	lsls	r5, r3, #30
 8006d16:	4606      	mov	r6, r0
 8006d18:	460c      	mov	r4, r1
 8006d1a:	d507      	bpl.n	8006d2c <__smakebuf_r+0x1c>
 8006d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	2301      	movs	r3, #1
 8006d26:	6163      	str	r3, [r4, #20]
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	ab01      	add	r3, sp, #4
 8006d2e:	466a      	mov	r2, sp
 8006d30:	f7ff ffc9 	bl	8006cc6 <__swhatbuf_r>
 8006d34:	9900      	ldr	r1, [sp, #0]
 8006d36:	4605      	mov	r5, r0
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 fc1d 	bl	8007578 <_malloc_r>
 8006d3e:	b948      	cbnz	r0, 8006d54 <__smakebuf_r+0x44>
 8006d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d44:	059a      	lsls	r2, r3, #22
 8006d46:	d4ef      	bmi.n	8006d28 <__smakebuf_r+0x18>
 8006d48:	f023 0303 	bic.w	r3, r3, #3
 8006d4c:	f043 0302 	orr.w	r3, r3, #2
 8006d50:	81a3      	strh	r3, [r4, #12]
 8006d52:	e7e3      	b.n	8006d1c <__smakebuf_r+0xc>
 8006d54:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <__smakebuf_r+0x7c>)
 8006d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	6020      	str	r0, [r4, #0]
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	9b00      	ldr	r3, [sp, #0]
 8006d64:	6163      	str	r3, [r4, #20]
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	6120      	str	r0, [r4, #16]
 8006d6a:	b15b      	cbz	r3, 8006d84 <__smakebuf_r+0x74>
 8006d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d70:	4630      	mov	r0, r6
 8006d72:	f000 fe6f 	bl	8007a54 <_isatty_r>
 8006d76:	b128      	cbz	r0, 8006d84 <__smakebuf_r+0x74>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	89a0      	ldrh	r0, [r4, #12]
 8006d86:	4305      	orrs	r5, r0
 8006d88:	81a5      	strh	r5, [r4, #12]
 8006d8a:	e7cd      	b.n	8006d28 <__smakebuf_r+0x18>
 8006d8c:	08006b15 	.word	0x08006b15

08006d90 <malloc>:
 8006d90:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <malloc+0xc>)
 8006d92:	4601      	mov	r1, r0
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	f000 bbef 	b.w	8007578 <_malloc_r>
 8006d9a:	bf00      	nop
 8006d9c:	20000010 	.word	0x20000010

08006da0 <memcpy>:
 8006da0:	440a      	add	r2, r1
 8006da2:	4291      	cmp	r1, r2
 8006da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da8:	d100      	bne.n	8006dac <memcpy+0xc>
 8006daa:	4770      	bx	lr
 8006dac:	b510      	push	{r4, lr}
 8006dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db6:	4291      	cmp	r1, r2
 8006db8:	d1f9      	bne.n	8006dae <memcpy+0xe>
 8006dba:	bd10      	pop	{r4, pc}

08006dbc <_Balloc>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	b976      	cbnz	r6, 8006de4 <_Balloc+0x28>
 8006dc6:	2010      	movs	r0, #16
 8006dc8:	f7ff ffe2 	bl	8006d90 <malloc>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6260      	str	r0, [r4, #36]	; 0x24
 8006dd0:	b920      	cbnz	r0, 8006ddc <_Balloc+0x20>
 8006dd2:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <_Balloc+0x78>)
 8006dd4:	4818      	ldr	r0, [pc, #96]	; (8006e38 <_Balloc+0x7c>)
 8006dd6:	2166      	movs	r1, #102	; 0x66
 8006dd8:	f000 fdea 	bl	80079b0 <__assert_func>
 8006ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de0:	6006      	str	r6, [r0, #0]
 8006de2:	60c6      	str	r6, [r0, #12]
 8006de4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006de6:	68f3      	ldr	r3, [r6, #12]
 8006de8:	b183      	cbz	r3, 8006e0c <_Balloc+0x50>
 8006dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006df2:	b9b8      	cbnz	r0, 8006e24 <_Balloc+0x68>
 8006df4:	2101      	movs	r1, #1
 8006df6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dfa:	1d72      	adds	r2, r6, #5
 8006dfc:	0092      	lsls	r2, r2, #2
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 fb5a 	bl	80074b8 <_calloc_r>
 8006e04:	b160      	cbz	r0, 8006e20 <_Balloc+0x64>
 8006e06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e0a:	e00e      	b.n	8006e2a <_Balloc+0x6e>
 8006e0c:	2221      	movs	r2, #33	; 0x21
 8006e0e:	2104      	movs	r1, #4
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fb51 	bl	80074b8 <_calloc_r>
 8006e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e18:	60f0      	str	r0, [r6, #12]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e4      	bne.n	8006dea <_Balloc+0x2e>
 8006e20:	2000      	movs	r0, #0
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	6802      	ldr	r2, [r0, #0]
 8006e26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e30:	e7f7      	b.n	8006e22 <_Balloc+0x66>
 8006e32:	bf00      	nop
 8006e34:	08008555 	.word	0x08008555
 8006e38:	0800863c 	.word	0x0800863c

08006e3c <_Bfree>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b976      	cbnz	r6, 8006e64 <_Bfree+0x28>
 8006e46:	2010      	movs	r0, #16
 8006e48:	f7ff ffa2 	bl	8006d90 <malloc>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6268      	str	r0, [r5, #36]	; 0x24
 8006e50:	b920      	cbnz	r0, 8006e5c <_Bfree+0x20>
 8006e52:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <_Bfree+0x3c>)
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <_Bfree+0x40>)
 8006e56:	218a      	movs	r1, #138	; 0x8a
 8006e58:	f000 fdaa 	bl	80079b0 <__assert_func>
 8006e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e60:	6006      	str	r6, [r0, #0]
 8006e62:	60c6      	str	r6, [r0, #12]
 8006e64:	b13c      	cbz	r4, 8006e76 <_Bfree+0x3a>
 8006e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e68:	6862      	ldr	r2, [r4, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e70:	6021      	str	r1, [r4, #0]
 8006e72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	08008555 	.word	0x08008555
 8006e7c:	0800863c 	.word	0x0800863c

08006e80 <__multadd>:
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	690e      	ldr	r6, [r1, #16]
 8006e86:	4607      	mov	r7, r0
 8006e88:	4698      	mov	r8, r3
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	f101 0014 	add.w	r0, r1, #20
 8006e90:	2300      	movs	r3, #0
 8006e92:	6805      	ldr	r5, [r0, #0]
 8006e94:	b2a9      	uxth	r1, r5
 8006e96:	fb02 8101 	mla	r1, r2, r1, r8
 8006e9a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e9e:	0c2d      	lsrs	r5, r5, #16
 8006ea0:	fb02 c505 	mla	r5, r2, r5, ip
 8006ea4:	b289      	uxth	r1, r1
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006eac:	429e      	cmp	r6, r3
 8006eae:	f840 1b04 	str.w	r1, [r0], #4
 8006eb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006eb6:	dcec      	bgt.n	8006e92 <__multadd+0x12>
 8006eb8:	f1b8 0f00 	cmp.w	r8, #0
 8006ebc:	d022      	beq.n	8006f04 <__multadd+0x84>
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	42b3      	cmp	r3, r6
 8006ec2:	dc19      	bgt.n	8006ef8 <__multadd+0x78>
 8006ec4:	6861      	ldr	r1, [r4, #4]
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	3101      	adds	r1, #1
 8006eca:	f7ff ff77 	bl	8006dbc <_Balloc>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	b928      	cbnz	r0, 8006ede <__multadd+0x5e>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <__multadd+0x8c>)
 8006ed6:	480e      	ldr	r0, [pc, #56]	; (8006f10 <__multadd+0x90>)
 8006ed8:	21b5      	movs	r1, #181	; 0xb5
 8006eda:	f000 fd69 	bl	80079b0 <__assert_func>
 8006ede:	6922      	ldr	r2, [r4, #16]
 8006ee0:	3202      	adds	r2, #2
 8006ee2:	f104 010c 	add.w	r1, r4, #12
 8006ee6:	0092      	lsls	r2, r2, #2
 8006ee8:	300c      	adds	r0, #12
 8006eea:	f7ff ff59 	bl	8006da0 <memcpy>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f7ff ffa3 	bl	8006e3c <_Bfree>
 8006ef6:	462c      	mov	r4, r5
 8006ef8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006efc:	3601      	adds	r6, #1
 8006efe:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f02:	6126      	str	r6, [r4, #16]
 8006f04:	4620      	mov	r0, r4
 8006f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f0a:	bf00      	nop
 8006f0c:	080085cb 	.word	0x080085cb
 8006f10:	0800863c 	.word	0x0800863c

08006f14 <__hi0bits>:
 8006f14:	0c03      	lsrs	r3, r0, #16
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	b9d3      	cbnz	r3, 8006f50 <__hi0bits+0x3c>
 8006f1a:	0400      	lsls	r0, r0, #16
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f22:	bf04      	itt	eq
 8006f24:	0200      	lsleq	r0, r0, #8
 8006f26:	3308      	addeq	r3, #8
 8006f28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f2c:	bf04      	itt	eq
 8006f2e:	0100      	lsleq	r0, r0, #4
 8006f30:	3304      	addeq	r3, #4
 8006f32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f36:	bf04      	itt	eq
 8006f38:	0080      	lsleq	r0, r0, #2
 8006f3a:	3302      	addeq	r3, #2
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	db05      	blt.n	8006f4c <__hi0bits+0x38>
 8006f40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f44:	f103 0301 	add.w	r3, r3, #1
 8006f48:	bf08      	it	eq
 8006f4a:	2320      	moveq	r3, #32
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	4770      	bx	lr
 8006f50:	2300      	movs	r3, #0
 8006f52:	e7e4      	b.n	8006f1e <__hi0bits+0xa>

08006f54 <__lo0bits>:
 8006f54:	6803      	ldr	r3, [r0, #0]
 8006f56:	f013 0207 	ands.w	r2, r3, #7
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	d00b      	beq.n	8006f76 <__lo0bits+0x22>
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	d424      	bmi.n	8006fac <__lo0bits+0x58>
 8006f62:	0798      	lsls	r0, r3, #30
 8006f64:	bf49      	itett	mi
 8006f66:	085b      	lsrmi	r3, r3, #1
 8006f68:	089b      	lsrpl	r3, r3, #2
 8006f6a:	2001      	movmi	r0, #1
 8006f6c:	600b      	strmi	r3, [r1, #0]
 8006f6e:	bf5c      	itt	pl
 8006f70:	600b      	strpl	r3, [r1, #0]
 8006f72:	2002      	movpl	r0, #2
 8006f74:	4770      	bx	lr
 8006f76:	b298      	uxth	r0, r3
 8006f78:	b9b0      	cbnz	r0, 8006fa8 <__lo0bits+0x54>
 8006f7a:	0c1b      	lsrs	r3, r3, #16
 8006f7c:	2010      	movs	r0, #16
 8006f7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f82:	bf04      	itt	eq
 8006f84:	0a1b      	lsreq	r3, r3, #8
 8006f86:	3008      	addeq	r0, #8
 8006f88:	071a      	lsls	r2, r3, #28
 8006f8a:	bf04      	itt	eq
 8006f8c:	091b      	lsreq	r3, r3, #4
 8006f8e:	3004      	addeq	r0, #4
 8006f90:	079a      	lsls	r2, r3, #30
 8006f92:	bf04      	itt	eq
 8006f94:	089b      	lsreq	r3, r3, #2
 8006f96:	3002      	addeq	r0, #2
 8006f98:	07da      	lsls	r2, r3, #31
 8006f9a:	d403      	bmi.n	8006fa4 <__lo0bits+0x50>
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	f100 0001 	add.w	r0, r0, #1
 8006fa2:	d005      	beq.n	8006fb0 <__lo0bits+0x5c>
 8006fa4:	600b      	str	r3, [r1, #0]
 8006fa6:	4770      	bx	lr
 8006fa8:	4610      	mov	r0, r2
 8006faa:	e7e8      	b.n	8006f7e <__lo0bits+0x2a>
 8006fac:	2000      	movs	r0, #0
 8006fae:	4770      	bx	lr
 8006fb0:	2020      	movs	r0, #32
 8006fb2:	4770      	bx	lr

08006fb4 <__i2b>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	2101      	movs	r1, #1
 8006fba:	f7ff feff 	bl	8006dbc <_Balloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	b928      	cbnz	r0, 8006fce <__i2b+0x1a>
 8006fc2:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <__i2b+0x24>)
 8006fc4:	4805      	ldr	r0, [pc, #20]	; (8006fdc <__i2b+0x28>)
 8006fc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fca:	f000 fcf1 	bl	80079b0 <__assert_func>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	6144      	str	r4, [r0, #20]
 8006fd2:	6103      	str	r3, [r0, #16]
 8006fd4:	bd10      	pop	{r4, pc}
 8006fd6:	bf00      	nop
 8006fd8:	080085cb 	.word	0x080085cb
 8006fdc:	0800863c 	.word	0x0800863c

08006fe0 <__multiply>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	690a      	ldr	r2, [r1, #16]
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	bfb8      	it	lt
 8006fee:	460b      	movlt	r3, r1
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	bfbc      	itt	lt
 8006ff4:	4625      	movlt	r5, r4
 8006ff6:	461c      	movlt	r4, r3
 8006ff8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ffc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007000:	68ab      	ldr	r3, [r5, #8]
 8007002:	6869      	ldr	r1, [r5, #4]
 8007004:	eb0a 0709 	add.w	r7, sl, r9
 8007008:	42bb      	cmp	r3, r7
 800700a:	b085      	sub	sp, #20
 800700c:	bfb8      	it	lt
 800700e:	3101      	addlt	r1, #1
 8007010:	f7ff fed4 	bl	8006dbc <_Balloc>
 8007014:	b930      	cbnz	r0, 8007024 <__multiply+0x44>
 8007016:	4602      	mov	r2, r0
 8007018:	4b42      	ldr	r3, [pc, #264]	; (8007124 <__multiply+0x144>)
 800701a:	4843      	ldr	r0, [pc, #268]	; (8007128 <__multiply+0x148>)
 800701c:	f240 115d 	movw	r1, #349	; 0x15d
 8007020:	f000 fcc6 	bl	80079b0 <__assert_func>
 8007024:	f100 0614 	add.w	r6, r0, #20
 8007028:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800702c:	4633      	mov	r3, r6
 800702e:	2200      	movs	r2, #0
 8007030:	4543      	cmp	r3, r8
 8007032:	d31e      	bcc.n	8007072 <__multiply+0x92>
 8007034:	f105 0c14 	add.w	ip, r5, #20
 8007038:	f104 0314 	add.w	r3, r4, #20
 800703c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007040:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007044:	9202      	str	r2, [sp, #8]
 8007046:	ebac 0205 	sub.w	r2, ip, r5
 800704a:	3a15      	subs	r2, #21
 800704c:	f022 0203 	bic.w	r2, r2, #3
 8007050:	3204      	adds	r2, #4
 8007052:	f105 0115 	add.w	r1, r5, #21
 8007056:	458c      	cmp	ip, r1
 8007058:	bf38      	it	cc
 800705a:	2204      	movcc	r2, #4
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9a02      	ldr	r2, [sp, #8]
 8007060:	9303      	str	r3, [sp, #12]
 8007062:	429a      	cmp	r2, r3
 8007064:	d808      	bhi.n	8007078 <__multiply+0x98>
 8007066:	2f00      	cmp	r7, #0
 8007068:	dc55      	bgt.n	8007116 <__multiply+0x136>
 800706a:	6107      	str	r7, [r0, #16]
 800706c:	b005      	add	sp, #20
 800706e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007072:	f843 2b04 	str.w	r2, [r3], #4
 8007076:	e7db      	b.n	8007030 <__multiply+0x50>
 8007078:	f8b3 a000 	ldrh.w	sl, [r3]
 800707c:	f1ba 0f00 	cmp.w	sl, #0
 8007080:	d020      	beq.n	80070c4 <__multiply+0xe4>
 8007082:	f105 0e14 	add.w	lr, r5, #20
 8007086:	46b1      	mov	r9, r6
 8007088:	2200      	movs	r2, #0
 800708a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800708e:	f8d9 b000 	ldr.w	fp, [r9]
 8007092:	b2a1      	uxth	r1, r4
 8007094:	fa1f fb8b 	uxth.w	fp, fp
 8007098:	fb0a b101 	mla	r1, sl, r1, fp
 800709c:	4411      	add	r1, r2
 800709e:	f8d9 2000 	ldr.w	r2, [r9]
 80070a2:	0c24      	lsrs	r4, r4, #16
 80070a4:	0c12      	lsrs	r2, r2, #16
 80070a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80070aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80070ae:	b289      	uxth	r1, r1
 80070b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070b4:	45f4      	cmp	ip, lr
 80070b6:	f849 1b04 	str.w	r1, [r9], #4
 80070ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80070be:	d8e4      	bhi.n	800708a <__multiply+0xaa>
 80070c0:	9901      	ldr	r1, [sp, #4]
 80070c2:	5072      	str	r2, [r6, r1]
 80070c4:	9a03      	ldr	r2, [sp, #12]
 80070c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070ca:	3304      	adds	r3, #4
 80070cc:	f1b9 0f00 	cmp.w	r9, #0
 80070d0:	d01f      	beq.n	8007112 <__multiply+0x132>
 80070d2:	6834      	ldr	r4, [r6, #0]
 80070d4:	f105 0114 	add.w	r1, r5, #20
 80070d8:	46b6      	mov	lr, r6
 80070da:	f04f 0a00 	mov.w	sl, #0
 80070de:	880a      	ldrh	r2, [r1, #0]
 80070e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80070e4:	fb09 b202 	mla	r2, r9, r2, fp
 80070e8:	4492      	add	sl, r2
 80070ea:	b2a4      	uxth	r4, r4
 80070ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80070f0:	f84e 4b04 	str.w	r4, [lr], #4
 80070f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80070f8:	f8be 2000 	ldrh.w	r2, [lr]
 80070fc:	0c24      	lsrs	r4, r4, #16
 80070fe:	fb09 2404 	mla	r4, r9, r4, r2
 8007102:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007106:	458c      	cmp	ip, r1
 8007108:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800710c:	d8e7      	bhi.n	80070de <__multiply+0xfe>
 800710e:	9a01      	ldr	r2, [sp, #4]
 8007110:	50b4      	str	r4, [r6, r2]
 8007112:	3604      	adds	r6, #4
 8007114:	e7a3      	b.n	800705e <__multiply+0x7e>
 8007116:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1a5      	bne.n	800706a <__multiply+0x8a>
 800711e:	3f01      	subs	r7, #1
 8007120:	e7a1      	b.n	8007066 <__multiply+0x86>
 8007122:	bf00      	nop
 8007124:	080085cb 	.word	0x080085cb
 8007128:	0800863c 	.word	0x0800863c

0800712c <__pow5mult>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4615      	mov	r5, r2
 8007132:	f012 0203 	ands.w	r2, r2, #3
 8007136:	4606      	mov	r6, r0
 8007138:	460f      	mov	r7, r1
 800713a:	d007      	beq.n	800714c <__pow5mult+0x20>
 800713c:	4c25      	ldr	r4, [pc, #148]	; (80071d4 <__pow5mult+0xa8>)
 800713e:	3a01      	subs	r2, #1
 8007140:	2300      	movs	r3, #0
 8007142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007146:	f7ff fe9b 	bl	8006e80 <__multadd>
 800714a:	4607      	mov	r7, r0
 800714c:	10ad      	asrs	r5, r5, #2
 800714e:	d03d      	beq.n	80071cc <__pow5mult+0xa0>
 8007150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007152:	b97c      	cbnz	r4, 8007174 <__pow5mult+0x48>
 8007154:	2010      	movs	r0, #16
 8007156:	f7ff fe1b 	bl	8006d90 <malloc>
 800715a:	4602      	mov	r2, r0
 800715c:	6270      	str	r0, [r6, #36]	; 0x24
 800715e:	b928      	cbnz	r0, 800716c <__pow5mult+0x40>
 8007160:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <__pow5mult+0xac>)
 8007162:	481e      	ldr	r0, [pc, #120]	; (80071dc <__pow5mult+0xb0>)
 8007164:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007168:	f000 fc22 	bl	80079b0 <__assert_func>
 800716c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007170:	6004      	str	r4, [r0, #0]
 8007172:	60c4      	str	r4, [r0, #12]
 8007174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800717c:	b94c      	cbnz	r4, 8007192 <__pow5mult+0x66>
 800717e:	f240 2171 	movw	r1, #625	; 0x271
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ff16 	bl	8006fb4 <__i2b>
 8007188:	2300      	movs	r3, #0
 800718a:	f8c8 0008 	str.w	r0, [r8, #8]
 800718e:	4604      	mov	r4, r0
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	f04f 0900 	mov.w	r9, #0
 8007196:	07eb      	lsls	r3, r5, #31
 8007198:	d50a      	bpl.n	80071b0 <__pow5mult+0x84>
 800719a:	4639      	mov	r1, r7
 800719c:	4622      	mov	r2, r4
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ff1e 	bl	8006fe0 <__multiply>
 80071a4:	4639      	mov	r1, r7
 80071a6:	4680      	mov	r8, r0
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7ff fe47 	bl	8006e3c <_Bfree>
 80071ae:	4647      	mov	r7, r8
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	d00b      	beq.n	80071cc <__pow5mult+0xa0>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	b938      	cbnz	r0, 80071c8 <__pow5mult+0x9c>
 80071b8:	4622      	mov	r2, r4
 80071ba:	4621      	mov	r1, r4
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ff0f 	bl	8006fe0 <__multiply>
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	f8c0 9000 	str.w	r9, [r0]
 80071c8:	4604      	mov	r4, r0
 80071ca:	e7e4      	b.n	8007196 <__pow5mult+0x6a>
 80071cc:	4638      	mov	r0, r7
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	bf00      	nop
 80071d4:	08008790 	.word	0x08008790
 80071d8:	08008555 	.word	0x08008555
 80071dc:	0800863c 	.word	0x0800863c

080071e0 <__lshift>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	460c      	mov	r4, r1
 80071e6:	6849      	ldr	r1, [r1, #4]
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	4607      	mov	r7, r0
 80071f2:	4691      	mov	r9, r2
 80071f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071f8:	f108 0601 	add.w	r6, r8, #1
 80071fc:	42b3      	cmp	r3, r6
 80071fe:	db0b      	blt.n	8007218 <__lshift+0x38>
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff fddb 	bl	8006dbc <_Balloc>
 8007206:	4605      	mov	r5, r0
 8007208:	b948      	cbnz	r0, 800721e <__lshift+0x3e>
 800720a:	4602      	mov	r2, r0
 800720c:	4b28      	ldr	r3, [pc, #160]	; (80072b0 <__lshift+0xd0>)
 800720e:	4829      	ldr	r0, [pc, #164]	; (80072b4 <__lshift+0xd4>)
 8007210:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007214:	f000 fbcc 	bl	80079b0 <__assert_func>
 8007218:	3101      	adds	r1, #1
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	e7ee      	b.n	80071fc <__lshift+0x1c>
 800721e:	2300      	movs	r3, #0
 8007220:	f100 0114 	add.w	r1, r0, #20
 8007224:	f100 0210 	add.w	r2, r0, #16
 8007228:	4618      	mov	r0, r3
 800722a:	4553      	cmp	r3, sl
 800722c:	db33      	blt.n	8007296 <__lshift+0xb6>
 800722e:	6920      	ldr	r0, [r4, #16]
 8007230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007234:	f104 0314 	add.w	r3, r4, #20
 8007238:	f019 091f 	ands.w	r9, r9, #31
 800723c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007244:	d02b      	beq.n	800729e <__lshift+0xbe>
 8007246:	f1c9 0e20 	rsb	lr, r9, #32
 800724a:	468a      	mov	sl, r1
 800724c:	2200      	movs	r2, #0
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	fa00 f009 	lsl.w	r0, r0, r9
 8007254:	4302      	orrs	r2, r0
 8007256:	f84a 2b04 	str.w	r2, [sl], #4
 800725a:	f853 2b04 	ldr.w	r2, [r3], #4
 800725e:	459c      	cmp	ip, r3
 8007260:	fa22 f20e 	lsr.w	r2, r2, lr
 8007264:	d8f3      	bhi.n	800724e <__lshift+0x6e>
 8007266:	ebac 0304 	sub.w	r3, ip, r4
 800726a:	3b15      	subs	r3, #21
 800726c:	f023 0303 	bic.w	r3, r3, #3
 8007270:	3304      	adds	r3, #4
 8007272:	f104 0015 	add.w	r0, r4, #21
 8007276:	4584      	cmp	ip, r0
 8007278:	bf38      	it	cc
 800727a:	2304      	movcc	r3, #4
 800727c:	50ca      	str	r2, [r1, r3]
 800727e:	b10a      	cbz	r2, 8007284 <__lshift+0xa4>
 8007280:	f108 0602 	add.w	r6, r8, #2
 8007284:	3e01      	subs	r6, #1
 8007286:	4638      	mov	r0, r7
 8007288:	612e      	str	r6, [r5, #16]
 800728a:	4621      	mov	r1, r4
 800728c:	f7ff fdd6 	bl	8006e3c <_Bfree>
 8007290:	4628      	mov	r0, r5
 8007292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007296:	f842 0f04 	str.w	r0, [r2, #4]!
 800729a:	3301      	adds	r3, #1
 800729c:	e7c5      	b.n	800722a <__lshift+0x4a>
 800729e:	3904      	subs	r1, #4
 80072a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80072a8:	459c      	cmp	ip, r3
 80072aa:	d8f9      	bhi.n	80072a0 <__lshift+0xc0>
 80072ac:	e7ea      	b.n	8007284 <__lshift+0xa4>
 80072ae:	bf00      	nop
 80072b0:	080085cb 	.word	0x080085cb
 80072b4:	0800863c 	.word	0x0800863c

080072b8 <__mcmp>:
 80072b8:	b530      	push	{r4, r5, lr}
 80072ba:	6902      	ldr	r2, [r0, #16]
 80072bc:	690c      	ldr	r4, [r1, #16]
 80072be:	1b12      	subs	r2, r2, r4
 80072c0:	d10e      	bne.n	80072e0 <__mcmp+0x28>
 80072c2:	f100 0314 	add.w	r3, r0, #20
 80072c6:	3114      	adds	r1, #20
 80072c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072d8:	42a5      	cmp	r5, r4
 80072da:	d003      	beq.n	80072e4 <__mcmp+0x2c>
 80072dc:	d305      	bcc.n	80072ea <__mcmp+0x32>
 80072de:	2201      	movs	r2, #1
 80072e0:	4610      	mov	r0, r2
 80072e2:	bd30      	pop	{r4, r5, pc}
 80072e4:	4283      	cmp	r3, r0
 80072e6:	d3f3      	bcc.n	80072d0 <__mcmp+0x18>
 80072e8:	e7fa      	b.n	80072e0 <__mcmp+0x28>
 80072ea:	f04f 32ff 	mov.w	r2, #4294967295
 80072ee:	e7f7      	b.n	80072e0 <__mcmp+0x28>

080072f0 <__mdiff>:
 80072f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	460c      	mov	r4, r1
 80072f6:	4606      	mov	r6, r0
 80072f8:	4611      	mov	r1, r2
 80072fa:	4620      	mov	r0, r4
 80072fc:	4617      	mov	r7, r2
 80072fe:	f7ff ffdb 	bl	80072b8 <__mcmp>
 8007302:	1e05      	subs	r5, r0, #0
 8007304:	d110      	bne.n	8007328 <__mdiff+0x38>
 8007306:	4629      	mov	r1, r5
 8007308:	4630      	mov	r0, r6
 800730a:	f7ff fd57 	bl	8006dbc <_Balloc>
 800730e:	b930      	cbnz	r0, 800731e <__mdiff+0x2e>
 8007310:	4b39      	ldr	r3, [pc, #228]	; (80073f8 <__mdiff+0x108>)
 8007312:	4602      	mov	r2, r0
 8007314:	f240 2132 	movw	r1, #562	; 0x232
 8007318:	4838      	ldr	r0, [pc, #224]	; (80073fc <__mdiff+0x10c>)
 800731a:	f000 fb49 	bl	80079b0 <__assert_func>
 800731e:	2301      	movs	r3, #1
 8007320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	bfa4      	itt	ge
 800732a:	463b      	movge	r3, r7
 800732c:	4627      	movge	r7, r4
 800732e:	4630      	mov	r0, r6
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	bfa6      	itte	ge
 8007334:	461c      	movge	r4, r3
 8007336:	2500      	movge	r5, #0
 8007338:	2501      	movlt	r5, #1
 800733a:	f7ff fd3f 	bl	8006dbc <_Balloc>
 800733e:	b920      	cbnz	r0, 800734a <__mdiff+0x5a>
 8007340:	4b2d      	ldr	r3, [pc, #180]	; (80073f8 <__mdiff+0x108>)
 8007342:	4602      	mov	r2, r0
 8007344:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007348:	e7e6      	b.n	8007318 <__mdiff+0x28>
 800734a:	693e      	ldr	r6, [r7, #16]
 800734c:	60c5      	str	r5, [r0, #12]
 800734e:	6925      	ldr	r5, [r4, #16]
 8007350:	f107 0114 	add.w	r1, r7, #20
 8007354:	f104 0914 	add.w	r9, r4, #20
 8007358:	f100 0e14 	add.w	lr, r0, #20
 800735c:	f107 0210 	add.w	r2, r7, #16
 8007360:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007364:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007368:	46f2      	mov	sl, lr
 800736a:	2700      	movs	r7, #0
 800736c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007370:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007374:	fa1f f883 	uxth.w	r8, r3
 8007378:	fa17 f78b 	uxtah	r7, r7, fp
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	eba7 0808 	sub.w	r8, r7, r8
 8007382:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007386:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800738a:	fa1f f888 	uxth.w	r8, r8
 800738e:	141f      	asrs	r7, r3, #16
 8007390:	454d      	cmp	r5, r9
 8007392:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007396:	f84a 3b04 	str.w	r3, [sl], #4
 800739a:	d8e7      	bhi.n	800736c <__mdiff+0x7c>
 800739c:	1b2b      	subs	r3, r5, r4
 800739e:	3b15      	subs	r3, #21
 80073a0:	f023 0303 	bic.w	r3, r3, #3
 80073a4:	3304      	adds	r3, #4
 80073a6:	3415      	adds	r4, #21
 80073a8:	42a5      	cmp	r5, r4
 80073aa:	bf38      	it	cc
 80073ac:	2304      	movcc	r3, #4
 80073ae:	4419      	add	r1, r3
 80073b0:	4473      	add	r3, lr
 80073b2:	469e      	mov	lr, r3
 80073b4:	460d      	mov	r5, r1
 80073b6:	4565      	cmp	r5, ip
 80073b8:	d30e      	bcc.n	80073d8 <__mdiff+0xe8>
 80073ba:	f10c 0203 	add.w	r2, ip, #3
 80073be:	1a52      	subs	r2, r2, r1
 80073c0:	f022 0203 	bic.w	r2, r2, #3
 80073c4:	3903      	subs	r1, #3
 80073c6:	458c      	cmp	ip, r1
 80073c8:	bf38      	it	cc
 80073ca:	2200      	movcc	r2, #0
 80073cc:	441a      	add	r2, r3
 80073ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073d2:	b17b      	cbz	r3, 80073f4 <__mdiff+0x104>
 80073d4:	6106      	str	r6, [r0, #16]
 80073d6:	e7a5      	b.n	8007324 <__mdiff+0x34>
 80073d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80073dc:	fa17 f488 	uxtah	r4, r7, r8
 80073e0:	1422      	asrs	r2, r4, #16
 80073e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80073e6:	b2a4      	uxth	r4, r4
 80073e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80073ec:	f84e 4b04 	str.w	r4, [lr], #4
 80073f0:	1417      	asrs	r7, r2, #16
 80073f2:	e7e0      	b.n	80073b6 <__mdiff+0xc6>
 80073f4:	3e01      	subs	r6, #1
 80073f6:	e7ea      	b.n	80073ce <__mdiff+0xde>
 80073f8:	080085cb 	.word	0x080085cb
 80073fc:	0800863c 	.word	0x0800863c

08007400 <__d2b>:
 8007400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007404:	4689      	mov	r9, r1
 8007406:	2101      	movs	r1, #1
 8007408:	ec57 6b10 	vmov	r6, r7, d0
 800740c:	4690      	mov	r8, r2
 800740e:	f7ff fcd5 	bl	8006dbc <_Balloc>
 8007412:	4604      	mov	r4, r0
 8007414:	b930      	cbnz	r0, 8007424 <__d2b+0x24>
 8007416:	4602      	mov	r2, r0
 8007418:	4b25      	ldr	r3, [pc, #148]	; (80074b0 <__d2b+0xb0>)
 800741a:	4826      	ldr	r0, [pc, #152]	; (80074b4 <__d2b+0xb4>)
 800741c:	f240 310a 	movw	r1, #778	; 0x30a
 8007420:	f000 fac6 	bl	80079b0 <__assert_func>
 8007424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800742c:	bb35      	cbnz	r5, 800747c <__d2b+0x7c>
 800742e:	2e00      	cmp	r6, #0
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	d028      	beq.n	8007486 <__d2b+0x86>
 8007434:	4668      	mov	r0, sp
 8007436:	9600      	str	r6, [sp, #0]
 8007438:	f7ff fd8c 	bl	8006f54 <__lo0bits>
 800743c:	9900      	ldr	r1, [sp, #0]
 800743e:	b300      	cbz	r0, 8007482 <__d2b+0x82>
 8007440:	9a01      	ldr	r2, [sp, #4]
 8007442:	f1c0 0320 	rsb	r3, r0, #32
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	430b      	orrs	r3, r1
 800744c:	40c2      	lsrs	r2, r0
 800744e:	6163      	str	r3, [r4, #20]
 8007450:	9201      	str	r2, [sp, #4]
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	61a3      	str	r3, [r4, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	bf14      	ite	ne
 800745a:	2202      	movne	r2, #2
 800745c:	2201      	moveq	r2, #1
 800745e:	6122      	str	r2, [r4, #16]
 8007460:	b1d5      	cbz	r5, 8007498 <__d2b+0x98>
 8007462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007466:	4405      	add	r5, r0
 8007468:	f8c9 5000 	str.w	r5, [r9]
 800746c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007470:	f8c8 0000 	str.w	r0, [r8]
 8007474:	4620      	mov	r0, r4
 8007476:	b003      	add	sp, #12
 8007478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800747c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007480:	e7d5      	b.n	800742e <__d2b+0x2e>
 8007482:	6161      	str	r1, [r4, #20]
 8007484:	e7e5      	b.n	8007452 <__d2b+0x52>
 8007486:	a801      	add	r0, sp, #4
 8007488:	f7ff fd64 	bl	8006f54 <__lo0bits>
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	6163      	str	r3, [r4, #20]
 8007490:	2201      	movs	r2, #1
 8007492:	6122      	str	r2, [r4, #16]
 8007494:	3020      	adds	r0, #32
 8007496:	e7e3      	b.n	8007460 <__d2b+0x60>
 8007498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800749c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074a0:	f8c9 0000 	str.w	r0, [r9]
 80074a4:	6918      	ldr	r0, [r3, #16]
 80074a6:	f7ff fd35 	bl	8006f14 <__hi0bits>
 80074aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074ae:	e7df      	b.n	8007470 <__d2b+0x70>
 80074b0:	080085cb 	.word	0x080085cb
 80074b4:	0800863c 	.word	0x0800863c

080074b8 <_calloc_r>:
 80074b8:	b513      	push	{r0, r1, r4, lr}
 80074ba:	434a      	muls	r2, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	9201      	str	r2, [sp, #4]
 80074c0:	f000 f85a 	bl	8007578 <_malloc_r>
 80074c4:	4604      	mov	r4, r0
 80074c6:	b118      	cbz	r0, 80074d0 <_calloc_r+0x18>
 80074c8:	9a01      	ldr	r2, [sp, #4]
 80074ca:	2100      	movs	r1, #0
 80074cc:	f7fd fe70 	bl	80051b0 <memset>
 80074d0:	4620      	mov	r0, r4
 80074d2:	b002      	add	sp, #8
 80074d4:	bd10      	pop	{r4, pc}
	...

080074d8 <_free_r>:
 80074d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074da:	2900      	cmp	r1, #0
 80074dc:	d048      	beq.n	8007570 <_free_r+0x98>
 80074de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e2:	9001      	str	r0, [sp, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f1a1 0404 	sub.w	r4, r1, #4
 80074ea:	bfb8      	it	lt
 80074ec:	18e4      	addlt	r4, r4, r3
 80074ee:	f000 faff 	bl	8007af0 <__malloc_lock>
 80074f2:	4a20      	ldr	r2, [pc, #128]	; (8007574 <_free_r+0x9c>)
 80074f4:	9801      	ldr	r0, [sp, #4]
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	4615      	mov	r5, r2
 80074fa:	b933      	cbnz	r3, 800750a <_free_r+0x32>
 80074fc:	6063      	str	r3, [r4, #4]
 80074fe:	6014      	str	r4, [r2, #0]
 8007500:	b003      	add	sp, #12
 8007502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007506:	f000 baf9 	b.w	8007afc <__malloc_unlock>
 800750a:	42a3      	cmp	r3, r4
 800750c:	d90b      	bls.n	8007526 <_free_r+0x4e>
 800750e:	6821      	ldr	r1, [r4, #0]
 8007510:	1862      	adds	r2, r4, r1
 8007512:	4293      	cmp	r3, r2
 8007514:	bf04      	itt	eq
 8007516:	681a      	ldreq	r2, [r3, #0]
 8007518:	685b      	ldreq	r3, [r3, #4]
 800751a:	6063      	str	r3, [r4, #4]
 800751c:	bf04      	itt	eq
 800751e:	1852      	addeq	r2, r2, r1
 8007520:	6022      	streq	r2, [r4, #0]
 8007522:	602c      	str	r4, [r5, #0]
 8007524:	e7ec      	b.n	8007500 <_free_r+0x28>
 8007526:	461a      	mov	r2, r3
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	b10b      	cbz	r3, 8007530 <_free_r+0x58>
 800752c:	42a3      	cmp	r3, r4
 800752e:	d9fa      	bls.n	8007526 <_free_r+0x4e>
 8007530:	6811      	ldr	r1, [r2, #0]
 8007532:	1855      	adds	r5, r2, r1
 8007534:	42a5      	cmp	r5, r4
 8007536:	d10b      	bne.n	8007550 <_free_r+0x78>
 8007538:	6824      	ldr	r4, [r4, #0]
 800753a:	4421      	add	r1, r4
 800753c:	1854      	adds	r4, r2, r1
 800753e:	42a3      	cmp	r3, r4
 8007540:	6011      	str	r1, [r2, #0]
 8007542:	d1dd      	bne.n	8007500 <_free_r+0x28>
 8007544:	681c      	ldr	r4, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	6053      	str	r3, [r2, #4]
 800754a:	4421      	add	r1, r4
 800754c:	6011      	str	r1, [r2, #0]
 800754e:	e7d7      	b.n	8007500 <_free_r+0x28>
 8007550:	d902      	bls.n	8007558 <_free_r+0x80>
 8007552:	230c      	movs	r3, #12
 8007554:	6003      	str	r3, [r0, #0]
 8007556:	e7d3      	b.n	8007500 <_free_r+0x28>
 8007558:	6825      	ldr	r5, [r4, #0]
 800755a:	1961      	adds	r1, r4, r5
 800755c:	428b      	cmp	r3, r1
 800755e:	bf04      	itt	eq
 8007560:	6819      	ldreq	r1, [r3, #0]
 8007562:	685b      	ldreq	r3, [r3, #4]
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	bf04      	itt	eq
 8007568:	1949      	addeq	r1, r1, r5
 800756a:	6021      	streq	r1, [r4, #0]
 800756c:	6054      	str	r4, [r2, #4]
 800756e:	e7c7      	b.n	8007500 <_free_r+0x28>
 8007570:	b003      	add	sp, #12
 8007572:	bd30      	pop	{r4, r5, pc}
 8007574:	20000404 	.word	0x20000404

08007578 <_malloc_r>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	1ccd      	adds	r5, r1, #3
 800757c:	f025 0503 	bic.w	r5, r5, #3
 8007580:	3508      	adds	r5, #8
 8007582:	2d0c      	cmp	r5, #12
 8007584:	bf38      	it	cc
 8007586:	250c      	movcc	r5, #12
 8007588:	2d00      	cmp	r5, #0
 800758a:	4606      	mov	r6, r0
 800758c:	db01      	blt.n	8007592 <_malloc_r+0x1a>
 800758e:	42a9      	cmp	r1, r5
 8007590:	d903      	bls.n	800759a <_malloc_r+0x22>
 8007592:	230c      	movs	r3, #12
 8007594:	6033      	str	r3, [r6, #0]
 8007596:	2000      	movs	r0, #0
 8007598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759a:	f000 faa9 	bl	8007af0 <__malloc_lock>
 800759e:	4921      	ldr	r1, [pc, #132]	; (8007624 <_malloc_r+0xac>)
 80075a0:	680a      	ldr	r2, [r1, #0]
 80075a2:	4614      	mov	r4, r2
 80075a4:	b99c      	cbnz	r4, 80075ce <_malloc_r+0x56>
 80075a6:	4f20      	ldr	r7, [pc, #128]	; (8007628 <_malloc_r+0xb0>)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	b923      	cbnz	r3, 80075b6 <_malloc_r+0x3e>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4630      	mov	r0, r6
 80075b0:	f000 f998 	bl	80078e4 <_sbrk_r>
 80075b4:	6038      	str	r0, [r7, #0]
 80075b6:	4629      	mov	r1, r5
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 f993 	bl	80078e4 <_sbrk_r>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d123      	bne.n	800760a <_malloc_r+0x92>
 80075c2:	230c      	movs	r3, #12
 80075c4:	6033      	str	r3, [r6, #0]
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 fa98 	bl	8007afc <__malloc_unlock>
 80075cc:	e7e3      	b.n	8007596 <_malloc_r+0x1e>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	1b5b      	subs	r3, r3, r5
 80075d2:	d417      	bmi.n	8007604 <_malloc_r+0x8c>
 80075d4:	2b0b      	cmp	r3, #11
 80075d6:	d903      	bls.n	80075e0 <_malloc_r+0x68>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	441c      	add	r4, r3
 80075dc:	6025      	str	r5, [r4, #0]
 80075de:	e004      	b.n	80075ea <_malloc_r+0x72>
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	42a2      	cmp	r2, r4
 80075e4:	bf0c      	ite	eq
 80075e6:	600b      	streq	r3, [r1, #0]
 80075e8:	6053      	strne	r3, [r2, #4]
 80075ea:	4630      	mov	r0, r6
 80075ec:	f000 fa86 	bl	8007afc <__malloc_unlock>
 80075f0:	f104 000b 	add.w	r0, r4, #11
 80075f4:	1d23      	adds	r3, r4, #4
 80075f6:	f020 0007 	bic.w	r0, r0, #7
 80075fa:	1ac2      	subs	r2, r0, r3
 80075fc:	d0cc      	beq.n	8007598 <_malloc_r+0x20>
 80075fe:	1a1b      	subs	r3, r3, r0
 8007600:	50a3      	str	r3, [r4, r2]
 8007602:	e7c9      	b.n	8007598 <_malloc_r+0x20>
 8007604:	4622      	mov	r2, r4
 8007606:	6864      	ldr	r4, [r4, #4]
 8007608:	e7cc      	b.n	80075a4 <_malloc_r+0x2c>
 800760a:	1cc4      	adds	r4, r0, #3
 800760c:	f024 0403 	bic.w	r4, r4, #3
 8007610:	42a0      	cmp	r0, r4
 8007612:	d0e3      	beq.n	80075dc <_malloc_r+0x64>
 8007614:	1a21      	subs	r1, r4, r0
 8007616:	4630      	mov	r0, r6
 8007618:	f000 f964 	bl	80078e4 <_sbrk_r>
 800761c:	3001      	adds	r0, #1
 800761e:	d1dd      	bne.n	80075dc <_malloc_r+0x64>
 8007620:	e7cf      	b.n	80075c2 <_malloc_r+0x4a>
 8007622:	bf00      	nop
 8007624:	20000404 	.word	0x20000404
 8007628:	20000408 	.word	0x20000408

0800762c <__ssputs_r>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	688e      	ldr	r6, [r1, #8]
 8007632:	429e      	cmp	r6, r3
 8007634:	4682      	mov	sl, r0
 8007636:	460c      	mov	r4, r1
 8007638:	4690      	mov	r8, r2
 800763a:	461f      	mov	r7, r3
 800763c:	d838      	bhi.n	80076b0 <__ssputs_r+0x84>
 800763e:	898a      	ldrh	r2, [r1, #12]
 8007640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007644:	d032      	beq.n	80076ac <__ssputs_r+0x80>
 8007646:	6825      	ldr	r5, [r4, #0]
 8007648:	6909      	ldr	r1, [r1, #16]
 800764a:	eba5 0901 	sub.w	r9, r5, r1
 800764e:	6965      	ldr	r5, [r4, #20]
 8007650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007658:	3301      	adds	r3, #1
 800765a:	444b      	add	r3, r9
 800765c:	106d      	asrs	r5, r5, #1
 800765e:	429d      	cmp	r5, r3
 8007660:	bf38      	it	cc
 8007662:	461d      	movcc	r5, r3
 8007664:	0553      	lsls	r3, r2, #21
 8007666:	d531      	bpl.n	80076cc <__ssputs_r+0xa0>
 8007668:	4629      	mov	r1, r5
 800766a:	f7ff ff85 	bl	8007578 <_malloc_r>
 800766e:	4606      	mov	r6, r0
 8007670:	b950      	cbnz	r0, 8007688 <__ssputs_r+0x5c>
 8007672:	230c      	movs	r3, #12
 8007674:	f8ca 3000 	str.w	r3, [sl]
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007688:	6921      	ldr	r1, [r4, #16]
 800768a:	464a      	mov	r2, r9
 800768c:	f7ff fb88 	bl	8006da0 <memcpy>
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	6126      	str	r6, [r4, #16]
 800769e:	6165      	str	r5, [r4, #20]
 80076a0:	444e      	add	r6, r9
 80076a2:	eba5 0509 	sub.w	r5, r5, r9
 80076a6:	6026      	str	r6, [r4, #0]
 80076a8:	60a5      	str	r5, [r4, #8]
 80076aa:	463e      	mov	r6, r7
 80076ac:	42be      	cmp	r6, r7
 80076ae:	d900      	bls.n	80076b2 <__ssputs_r+0x86>
 80076b0:	463e      	mov	r6, r7
 80076b2:	4632      	mov	r2, r6
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	4641      	mov	r1, r8
 80076b8:	f000 fa00 	bl	8007abc <memmove>
 80076bc:	68a3      	ldr	r3, [r4, #8]
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	1b9b      	subs	r3, r3, r6
 80076c2:	4432      	add	r2, r6
 80076c4:	60a3      	str	r3, [r4, #8]
 80076c6:	6022      	str	r2, [r4, #0]
 80076c8:	2000      	movs	r0, #0
 80076ca:	e7db      	b.n	8007684 <__ssputs_r+0x58>
 80076cc:	462a      	mov	r2, r5
 80076ce:	f000 fa1b 	bl	8007b08 <_realloc_r>
 80076d2:	4606      	mov	r6, r0
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d1e1      	bne.n	800769c <__ssputs_r+0x70>
 80076d8:	6921      	ldr	r1, [r4, #16]
 80076da:	4650      	mov	r0, sl
 80076dc:	f7ff fefc 	bl	80074d8 <_free_r>
 80076e0:	e7c7      	b.n	8007672 <__ssputs_r+0x46>
	...

080076e4 <_svfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4698      	mov	r8, r3
 80076ea:	898b      	ldrh	r3, [r1, #12]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	b09d      	sub	sp, #116	; 0x74
 80076f0:	4607      	mov	r7, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	4614      	mov	r4, r2
 80076f6:	d50e      	bpl.n	8007716 <_svfiprintf_r+0x32>
 80076f8:	690b      	ldr	r3, [r1, #16]
 80076fa:	b963      	cbnz	r3, 8007716 <_svfiprintf_r+0x32>
 80076fc:	2140      	movs	r1, #64	; 0x40
 80076fe:	f7ff ff3b 	bl	8007578 <_malloc_r>
 8007702:	6028      	str	r0, [r5, #0]
 8007704:	6128      	str	r0, [r5, #16]
 8007706:	b920      	cbnz	r0, 8007712 <_svfiprintf_r+0x2e>
 8007708:	230c      	movs	r3, #12
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	e0d1      	b.n	80078b6 <_svfiprintf_r+0x1d2>
 8007712:	2340      	movs	r3, #64	; 0x40
 8007714:	616b      	str	r3, [r5, #20]
 8007716:	2300      	movs	r3, #0
 8007718:	9309      	str	r3, [sp, #36]	; 0x24
 800771a:	2320      	movs	r3, #32
 800771c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007720:	f8cd 800c 	str.w	r8, [sp, #12]
 8007724:	2330      	movs	r3, #48	; 0x30
 8007726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078d0 <_svfiprintf_r+0x1ec>
 800772a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800772e:	f04f 0901 	mov.w	r9, #1
 8007732:	4623      	mov	r3, r4
 8007734:	469a      	mov	sl, r3
 8007736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773a:	b10a      	cbz	r2, 8007740 <_svfiprintf_r+0x5c>
 800773c:	2a25      	cmp	r2, #37	; 0x25
 800773e:	d1f9      	bne.n	8007734 <_svfiprintf_r+0x50>
 8007740:	ebba 0b04 	subs.w	fp, sl, r4
 8007744:	d00b      	beq.n	800775e <_svfiprintf_r+0x7a>
 8007746:	465b      	mov	r3, fp
 8007748:	4622      	mov	r2, r4
 800774a:	4629      	mov	r1, r5
 800774c:	4638      	mov	r0, r7
 800774e:	f7ff ff6d 	bl	800762c <__ssputs_r>
 8007752:	3001      	adds	r0, #1
 8007754:	f000 80aa 	beq.w	80078ac <_svfiprintf_r+0x1c8>
 8007758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800775a:	445a      	add	r2, fp
 800775c:	9209      	str	r2, [sp, #36]	; 0x24
 800775e:	f89a 3000 	ldrb.w	r3, [sl]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 80a2 	beq.w	80078ac <_svfiprintf_r+0x1c8>
 8007768:	2300      	movs	r3, #0
 800776a:	f04f 32ff 	mov.w	r2, #4294967295
 800776e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007772:	f10a 0a01 	add.w	sl, sl, #1
 8007776:	9304      	str	r3, [sp, #16]
 8007778:	9307      	str	r3, [sp, #28]
 800777a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800777e:	931a      	str	r3, [sp, #104]	; 0x68
 8007780:	4654      	mov	r4, sl
 8007782:	2205      	movs	r2, #5
 8007784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007788:	4851      	ldr	r0, [pc, #324]	; (80078d0 <_svfiprintf_r+0x1ec>)
 800778a:	f7f8 fd49 	bl	8000220 <memchr>
 800778e:	9a04      	ldr	r2, [sp, #16]
 8007790:	b9d8      	cbnz	r0, 80077ca <_svfiprintf_r+0xe6>
 8007792:	06d0      	lsls	r0, r2, #27
 8007794:	bf44      	itt	mi
 8007796:	2320      	movmi	r3, #32
 8007798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800779c:	0711      	lsls	r1, r2, #28
 800779e:	bf44      	itt	mi
 80077a0:	232b      	movmi	r3, #43	; 0x2b
 80077a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a6:	f89a 3000 	ldrb.w	r3, [sl]
 80077aa:	2b2a      	cmp	r3, #42	; 0x2a
 80077ac:	d015      	beq.n	80077da <_svfiprintf_r+0xf6>
 80077ae:	9a07      	ldr	r2, [sp, #28]
 80077b0:	4654      	mov	r4, sl
 80077b2:	2000      	movs	r0, #0
 80077b4:	f04f 0c0a 	mov.w	ip, #10
 80077b8:	4621      	mov	r1, r4
 80077ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077be:	3b30      	subs	r3, #48	; 0x30
 80077c0:	2b09      	cmp	r3, #9
 80077c2:	d94e      	bls.n	8007862 <_svfiprintf_r+0x17e>
 80077c4:	b1b0      	cbz	r0, 80077f4 <_svfiprintf_r+0x110>
 80077c6:	9207      	str	r2, [sp, #28]
 80077c8:	e014      	b.n	80077f4 <_svfiprintf_r+0x110>
 80077ca:	eba0 0308 	sub.w	r3, r0, r8
 80077ce:	fa09 f303 	lsl.w	r3, r9, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	46a2      	mov	sl, r4
 80077d8:	e7d2      	b.n	8007780 <_svfiprintf_r+0x9c>
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	1d19      	adds	r1, r3, #4
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	9103      	str	r1, [sp, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bfbb      	ittet	lt
 80077e6:	425b      	neglt	r3, r3
 80077e8:	f042 0202 	orrlt.w	r2, r2, #2
 80077ec:	9307      	strge	r3, [sp, #28]
 80077ee:	9307      	strlt	r3, [sp, #28]
 80077f0:	bfb8      	it	lt
 80077f2:	9204      	strlt	r2, [sp, #16]
 80077f4:	7823      	ldrb	r3, [r4, #0]
 80077f6:	2b2e      	cmp	r3, #46	; 0x2e
 80077f8:	d10c      	bne.n	8007814 <_svfiprintf_r+0x130>
 80077fa:	7863      	ldrb	r3, [r4, #1]
 80077fc:	2b2a      	cmp	r3, #42	; 0x2a
 80077fe:	d135      	bne.n	800786c <_svfiprintf_r+0x188>
 8007800:	9b03      	ldr	r3, [sp, #12]
 8007802:	1d1a      	adds	r2, r3, #4
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	9203      	str	r2, [sp, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	bfb8      	it	lt
 800780c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007810:	3402      	adds	r4, #2
 8007812:	9305      	str	r3, [sp, #20]
 8007814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078e0 <_svfiprintf_r+0x1fc>
 8007818:	7821      	ldrb	r1, [r4, #0]
 800781a:	2203      	movs	r2, #3
 800781c:	4650      	mov	r0, sl
 800781e:	f7f8 fcff 	bl	8000220 <memchr>
 8007822:	b140      	cbz	r0, 8007836 <_svfiprintf_r+0x152>
 8007824:	2340      	movs	r3, #64	; 0x40
 8007826:	eba0 000a 	sub.w	r0, r0, sl
 800782a:	fa03 f000 	lsl.w	r0, r3, r0
 800782e:	9b04      	ldr	r3, [sp, #16]
 8007830:	4303      	orrs	r3, r0
 8007832:	3401      	adds	r4, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783a:	4826      	ldr	r0, [pc, #152]	; (80078d4 <_svfiprintf_r+0x1f0>)
 800783c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007840:	2206      	movs	r2, #6
 8007842:	f7f8 fced 	bl	8000220 <memchr>
 8007846:	2800      	cmp	r0, #0
 8007848:	d038      	beq.n	80078bc <_svfiprintf_r+0x1d8>
 800784a:	4b23      	ldr	r3, [pc, #140]	; (80078d8 <_svfiprintf_r+0x1f4>)
 800784c:	bb1b      	cbnz	r3, 8007896 <_svfiprintf_r+0x1b2>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	3307      	adds	r3, #7
 8007852:	f023 0307 	bic.w	r3, r3, #7
 8007856:	3308      	adds	r3, #8
 8007858:	9303      	str	r3, [sp, #12]
 800785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785c:	4433      	add	r3, r6
 800785e:	9309      	str	r3, [sp, #36]	; 0x24
 8007860:	e767      	b.n	8007732 <_svfiprintf_r+0x4e>
 8007862:	fb0c 3202 	mla	r2, ip, r2, r3
 8007866:	460c      	mov	r4, r1
 8007868:	2001      	movs	r0, #1
 800786a:	e7a5      	b.n	80077b8 <_svfiprintf_r+0xd4>
 800786c:	2300      	movs	r3, #0
 800786e:	3401      	adds	r4, #1
 8007870:	9305      	str	r3, [sp, #20]
 8007872:	4619      	mov	r1, r3
 8007874:	f04f 0c0a 	mov.w	ip, #10
 8007878:	4620      	mov	r0, r4
 800787a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787e:	3a30      	subs	r2, #48	; 0x30
 8007880:	2a09      	cmp	r2, #9
 8007882:	d903      	bls.n	800788c <_svfiprintf_r+0x1a8>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0c5      	beq.n	8007814 <_svfiprintf_r+0x130>
 8007888:	9105      	str	r1, [sp, #20]
 800788a:	e7c3      	b.n	8007814 <_svfiprintf_r+0x130>
 800788c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007890:	4604      	mov	r4, r0
 8007892:	2301      	movs	r3, #1
 8007894:	e7f0      	b.n	8007878 <_svfiprintf_r+0x194>
 8007896:	ab03      	add	r3, sp, #12
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	462a      	mov	r2, r5
 800789c:	4b0f      	ldr	r3, [pc, #60]	; (80078dc <_svfiprintf_r+0x1f8>)
 800789e:	a904      	add	r1, sp, #16
 80078a0:	4638      	mov	r0, r7
 80078a2:	f7fd fd2d 	bl	8005300 <_printf_float>
 80078a6:	1c42      	adds	r2, r0, #1
 80078a8:	4606      	mov	r6, r0
 80078aa:	d1d6      	bne.n	800785a <_svfiprintf_r+0x176>
 80078ac:	89ab      	ldrh	r3, [r5, #12]
 80078ae:	065b      	lsls	r3, r3, #25
 80078b0:	f53f af2c 	bmi.w	800770c <_svfiprintf_r+0x28>
 80078b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078b6:	b01d      	add	sp, #116	; 0x74
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	ab03      	add	r3, sp, #12
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	462a      	mov	r2, r5
 80078c2:	4b06      	ldr	r3, [pc, #24]	; (80078dc <_svfiprintf_r+0x1f8>)
 80078c4:	a904      	add	r1, sp, #16
 80078c6:	4638      	mov	r0, r7
 80078c8:	f7fd ffbe 	bl	8005848 <_printf_i>
 80078cc:	e7eb      	b.n	80078a6 <_svfiprintf_r+0x1c2>
 80078ce:	bf00      	nop
 80078d0:	0800879c 	.word	0x0800879c
 80078d4:	080087a6 	.word	0x080087a6
 80078d8:	08005301 	.word	0x08005301
 80078dc:	0800762d 	.word	0x0800762d
 80078e0:	080087a2 	.word	0x080087a2

080078e4 <_sbrk_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d06      	ldr	r5, [pc, #24]	; (8007900 <_sbrk_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7f9 fe9a 	bl	8001628 <_sbrk>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_sbrk_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_sbrk_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20000568 	.word	0x20000568

08007904 <__sread>:
 8007904:	b510      	push	{r4, lr}
 8007906:	460c      	mov	r4, r1
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	f000 fa7c 	bl	8007e08 <_read_r>
 8007910:	2800      	cmp	r0, #0
 8007912:	bfab      	itete	ge
 8007914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007916:	89a3      	ldrhlt	r3, [r4, #12]
 8007918:	181b      	addge	r3, r3, r0
 800791a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800791e:	bfac      	ite	ge
 8007920:	6563      	strge	r3, [r4, #84]	; 0x54
 8007922:	81a3      	strhlt	r3, [r4, #12]
 8007924:	bd10      	pop	{r4, pc}

08007926 <__swrite>:
 8007926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792a:	461f      	mov	r7, r3
 800792c:	898b      	ldrh	r3, [r1, #12]
 800792e:	05db      	lsls	r3, r3, #23
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	4616      	mov	r6, r2
 8007936:	d505      	bpl.n	8007944 <__swrite+0x1e>
 8007938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793c:	2302      	movs	r3, #2
 800793e:	2200      	movs	r2, #0
 8007940:	f000 f898 	bl	8007a74 <_lseek_r>
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800794a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	4632      	mov	r2, r6
 8007952:	463b      	mov	r3, r7
 8007954:	4628      	mov	r0, r5
 8007956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800795a:	f000 b817 	b.w	800798c <_write_r>

0800795e <__sseek>:
 800795e:	b510      	push	{r4, lr}
 8007960:	460c      	mov	r4, r1
 8007962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007966:	f000 f885 	bl	8007a74 <_lseek_r>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	bf15      	itete	ne
 8007970:	6560      	strne	r0, [r4, #84]	; 0x54
 8007972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800797a:	81a3      	strheq	r3, [r4, #12]
 800797c:	bf18      	it	ne
 800797e:	81a3      	strhne	r3, [r4, #12]
 8007980:	bd10      	pop	{r4, pc}

08007982 <__sclose>:
 8007982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007986:	f000 b831 	b.w	80079ec <_close_r>
	...

0800798c <_write_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d07      	ldr	r5, [pc, #28]	; (80079ac <_write_r+0x20>)
 8007990:	4604      	mov	r4, r0
 8007992:	4608      	mov	r0, r1
 8007994:	4611      	mov	r1, r2
 8007996:	2200      	movs	r2, #0
 8007998:	602a      	str	r2, [r5, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	f7f9 fcac 	bl	80012f8 <_write>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_write_r+0x1e>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_write_r+0x1e>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	20000568 	.word	0x20000568

080079b0 <__assert_func>:
 80079b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079b2:	4614      	mov	r4, r2
 80079b4:	461a      	mov	r2, r3
 80079b6:	4b09      	ldr	r3, [pc, #36]	; (80079dc <__assert_func+0x2c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4605      	mov	r5, r0
 80079bc:	68d8      	ldr	r0, [r3, #12]
 80079be:	b14c      	cbz	r4, 80079d4 <__assert_func+0x24>
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <__assert_func+0x30>)
 80079c2:	9100      	str	r1, [sp, #0]
 80079c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079c8:	4906      	ldr	r1, [pc, #24]	; (80079e4 <__assert_func+0x34>)
 80079ca:	462b      	mov	r3, r5
 80079cc:	f000 f81e 	bl	8007a0c <fiprintf>
 80079d0:	f000 fa39 	bl	8007e46 <abort>
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <__assert_func+0x38>)
 80079d6:	461c      	mov	r4, r3
 80079d8:	e7f3      	b.n	80079c2 <__assert_func+0x12>
 80079da:	bf00      	nop
 80079dc:	20000010 	.word	0x20000010
 80079e0:	080087ad 	.word	0x080087ad
 80079e4:	080087ba 	.word	0x080087ba
 80079e8:	080087e8 	.word	0x080087e8

080079ec <_close_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d06      	ldr	r5, [pc, #24]	; (8007a08 <_close_r+0x1c>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	4604      	mov	r4, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	f7f9 fde1 	bl	80015be <_close>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d102      	bne.n	8007a06 <_close_r+0x1a>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b103      	cbz	r3, 8007a06 <_close_r+0x1a>
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	20000568 	.word	0x20000568

08007a0c <fiprintf>:
 8007a0c:	b40e      	push	{r1, r2, r3}
 8007a0e:	b503      	push	{r0, r1, lr}
 8007a10:	4601      	mov	r1, r0
 8007a12:	ab03      	add	r3, sp, #12
 8007a14:	4805      	ldr	r0, [pc, #20]	; (8007a2c <fiprintf+0x20>)
 8007a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a1a:	6800      	ldr	r0, [r0, #0]
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	f000 f8c3 	bl	8007ba8 <_vfiprintf_r>
 8007a22:	b002      	add	sp, #8
 8007a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a28:	b003      	add	sp, #12
 8007a2a:	4770      	bx	lr
 8007a2c:	20000010 	.word	0x20000010

08007a30 <_fstat_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	; (8007a50 <_fstat_r+0x20>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	602b      	str	r3, [r5, #0]
 8007a3e:	f7f9 fdca 	bl	80015d6 <_fstat>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d102      	bne.n	8007a4c <_fstat_r+0x1c>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b103      	cbz	r3, 8007a4c <_fstat_r+0x1c>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000568 	.word	0x20000568

08007a54 <_isatty_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d06      	ldr	r5, [pc, #24]	; (8007a70 <_isatty_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7f9 fdc9 	bl	80015f6 <_isatty>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_isatty_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_isatty_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20000568 	.word	0x20000568

08007a74 <_lseek_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d07      	ldr	r5, [pc, #28]	; (8007a94 <_lseek_r+0x20>)
 8007a78:	4604      	mov	r4, r0
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	602a      	str	r2, [r5, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f7f9 fdc2 	bl	800160c <_lseek>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_lseek_r+0x1e>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_lseek_r+0x1e>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	20000568 	.word	0x20000568

08007a98 <__ascii_mbtowc>:
 8007a98:	b082      	sub	sp, #8
 8007a9a:	b901      	cbnz	r1, 8007a9e <__ascii_mbtowc+0x6>
 8007a9c:	a901      	add	r1, sp, #4
 8007a9e:	b142      	cbz	r2, 8007ab2 <__ascii_mbtowc+0x1a>
 8007aa0:	b14b      	cbz	r3, 8007ab6 <__ascii_mbtowc+0x1e>
 8007aa2:	7813      	ldrb	r3, [r2, #0]
 8007aa4:	600b      	str	r3, [r1, #0]
 8007aa6:	7812      	ldrb	r2, [r2, #0]
 8007aa8:	1e10      	subs	r0, r2, #0
 8007aaa:	bf18      	it	ne
 8007aac:	2001      	movne	r0, #1
 8007aae:	b002      	add	sp, #8
 8007ab0:	4770      	bx	lr
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	e7fb      	b.n	8007aae <__ascii_mbtowc+0x16>
 8007ab6:	f06f 0001 	mvn.w	r0, #1
 8007aba:	e7f8      	b.n	8007aae <__ascii_mbtowc+0x16>

08007abc <memmove>:
 8007abc:	4288      	cmp	r0, r1
 8007abe:	b510      	push	{r4, lr}
 8007ac0:	eb01 0402 	add.w	r4, r1, r2
 8007ac4:	d902      	bls.n	8007acc <memmove+0x10>
 8007ac6:	4284      	cmp	r4, r0
 8007ac8:	4623      	mov	r3, r4
 8007aca:	d807      	bhi.n	8007adc <memmove+0x20>
 8007acc:	1e43      	subs	r3, r0, #1
 8007ace:	42a1      	cmp	r1, r4
 8007ad0:	d008      	beq.n	8007ae4 <memmove+0x28>
 8007ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ada:	e7f8      	b.n	8007ace <memmove+0x12>
 8007adc:	4402      	add	r2, r0
 8007ade:	4601      	mov	r1, r0
 8007ae0:	428a      	cmp	r2, r1
 8007ae2:	d100      	bne.n	8007ae6 <memmove+0x2a>
 8007ae4:	bd10      	pop	{r4, pc}
 8007ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aee:	e7f7      	b.n	8007ae0 <memmove+0x24>

08007af0 <__malloc_lock>:
 8007af0:	4801      	ldr	r0, [pc, #4]	; (8007af8 <__malloc_lock+0x8>)
 8007af2:	f7ff b8e6 	b.w	8006cc2 <__retarget_lock_acquire_recursive>
 8007af6:	bf00      	nop
 8007af8:	20000562 	.word	0x20000562

08007afc <__malloc_unlock>:
 8007afc:	4801      	ldr	r0, [pc, #4]	; (8007b04 <__malloc_unlock+0x8>)
 8007afe:	f7ff b8e1 	b.w	8006cc4 <__retarget_lock_release_recursive>
 8007b02:	bf00      	nop
 8007b04:	20000562 	.word	0x20000562

08007b08 <_realloc_r>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	460e      	mov	r6, r1
 8007b10:	b921      	cbnz	r1, 8007b1c <_realloc_r+0x14>
 8007b12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b16:	4611      	mov	r1, r2
 8007b18:	f7ff bd2e 	b.w	8007578 <_malloc_r>
 8007b1c:	b922      	cbnz	r2, 8007b28 <_realloc_r+0x20>
 8007b1e:	f7ff fcdb 	bl	80074d8 <_free_r>
 8007b22:	4625      	mov	r5, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b28:	f000 f994 	bl	8007e54 <_malloc_usable_size_r>
 8007b2c:	42a0      	cmp	r0, r4
 8007b2e:	d20f      	bcs.n	8007b50 <_realloc_r+0x48>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4638      	mov	r0, r7
 8007b34:	f7ff fd20 	bl	8007578 <_malloc_r>
 8007b38:	4605      	mov	r5, r0
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d0f2      	beq.n	8007b24 <_realloc_r+0x1c>
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4622      	mov	r2, r4
 8007b42:	f7ff f92d 	bl	8006da0 <memcpy>
 8007b46:	4631      	mov	r1, r6
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7ff fcc5 	bl	80074d8 <_free_r>
 8007b4e:	e7e9      	b.n	8007b24 <_realloc_r+0x1c>
 8007b50:	4635      	mov	r5, r6
 8007b52:	e7e7      	b.n	8007b24 <_realloc_r+0x1c>

08007b54 <__sfputc_r>:
 8007b54:	6893      	ldr	r3, [r2, #8]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	b410      	push	{r4}
 8007b5c:	6093      	str	r3, [r2, #8]
 8007b5e:	da08      	bge.n	8007b72 <__sfputc_r+0x1e>
 8007b60:	6994      	ldr	r4, [r2, #24]
 8007b62:	42a3      	cmp	r3, r4
 8007b64:	db01      	blt.n	8007b6a <__sfputc_r+0x16>
 8007b66:	290a      	cmp	r1, #10
 8007b68:	d103      	bne.n	8007b72 <__sfputc_r+0x1e>
 8007b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b6e:	f7fd bfb1 	b.w	8005ad4 <__swbuf_r>
 8007b72:	6813      	ldr	r3, [r2, #0]
 8007b74:	1c58      	adds	r0, r3, #1
 8007b76:	6010      	str	r0, [r2, #0]
 8007b78:	7019      	strb	r1, [r3, #0]
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <__sfputs_r>:
 8007b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b84:	4606      	mov	r6, r0
 8007b86:	460f      	mov	r7, r1
 8007b88:	4614      	mov	r4, r2
 8007b8a:	18d5      	adds	r5, r2, r3
 8007b8c:	42ac      	cmp	r4, r5
 8007b8e:	d101      	bne.n	8007b94 <__sfputs_r+0x12>
 8007b90:	2000      	movs	r0, #0
 8007b92:	e007      	b.n	8007ba4 <__sfputs_r+0x22>
 8007b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b98:	463a      	mov	r2, r7
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7ff ffda 	bl	8007b54 <__sfputc_r>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d1f3      	bne.n	8007b8c <__sfputs_r+0xa>
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ba8 <_vfiprintf_r>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	460d      	mov	r5, r1
 8007bae:	b09d      	sub	sp, #116	; 0x74
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	4698      	mov	r8, r3
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	b118      	cbz	r0, 8007bc0 <_vfiprintf_r+0x18>
 8007bb8:	6983      	ldr	r3, [r0, #24]
 8007bba:	b90b      	cbnz	r3, 8007bc0 <_vfiprintf_r+0x18>
 8007bbc:	f7fe ffde 	bl	8006b7c <__sinit>
 8007bc0:	4b89      	ldr	r3, [pc, #548]	; (8007de8 <_vfiprintf_r+0x240>)
 8007bc2:	429d      	cmp	r5, r3
 8007bc4:	d11b      	bne.n	8007bfe <_vfiprintf_r+0x56>
 8007bc6:	6875      	ldr	r5, [r6, #4]
 8007bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bca:	07d9      	lsls	r1, r3, #31
 8007bcc:	d405      	bmi.n	8007bda <_vfiprintf_r+0x32>
 8007bce:	89ab      	ldrh	r3, [r5, #12]
 8007bd0:	059a      	lsls	r2, r3, #22
 8007bd2:	d402      	bmi.n	8007bda <_vfiprintf_r+0x32>
 8007bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bd6:	f7ff f874 	bl	8006cc2 <__retarget_lock_acquire_recursive>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	071b      	lsls	r3, r3, #28
 8007bde:	d501      	bpl.n	8007be4 <_vfiprintf_r+0x3c>
 8007be0:	692b      	ldr	r3, [r5, #16]
 8007be2:	b9eb      	cbnz	r3, 8007c20 <_vfiprintf_r+0x78>
 8007be4:	4629      	mov	r1, r5
 8007be6:	4630      	mov	r0, r6
 8007be8:	f7fd ffc6 	bl	8005b78 <__swsetup_r>
 8007bec:	b1c0      	cbz	r0, 8007c20 <_vfiprintf_r+0x78>
 8007bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bf0:	07dc      	lsls	r4, r3, #31
 8007bf2:	d50e      	bpl.n	8007c12 <_vfiprintf_r+0x6a>
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	b01d      	add	sp, #116	; 0x74
 8007bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfe:	4b7b      	ldr	r3, [pc, #492]	; (8007dec <_vfiprintf_r+0x244>)
 8007c00:	429d      	cmp	r5, r3
 8007c02:	d101      	bne.n	8007c08 <_vfiprintf_r+0x60>
 8007c04:	68b5      	ldr	r5, [r6, #8]
 8007c06:	e7df      	b.n	8007bc8 <_vfiprintf_r+0x20>
 8007c08:	4b79      	ldr	r3, [pc, #484]	; (8007df0 <_vfiprintf_r+0x248>)
 8007c0a:	429d      	cmp	r5, r3
 8007c0c:	bf08      	it	eq
 8007c0e:	68f5      	ldreq	r5, [r6, #12]
 8007c10:	e7da      	b.n	8007bc8 <_vfiprintf_r+0x20>
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	0598      	lsls	r0, r3, #22
 8007c16:	d4ed      	bmi.n	8007bf4 <_vfiprintf_r+0x4c>
 8007c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c1a:	f7ff f853 	bl	8006cc4 <__retarget_lock_release_recursive>
 8007c1e:	e7e9      	b.n	8007bf4 <_vfiprintf_r+0x4c>
 8007c20:	2300      	movs	r3, #0
 8007c22:	9309      	str	r3, [sp, #36]	; 0x24
 8007c24:	2320      	movs	r3, #32
 8007c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c2e:	2330      	movs	r3, #48	; 0x30
 8007c30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007df4 <_vfiprintf_r+0x24c>
 8007c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c38:	f04f 0901 	mov.w	r9, #1
 8007c3c:	4623      	mov	r3, r4
 8007c3e:	469a      	mov	sl, r3
 8007c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c44:	b10a      	cbz	r2, 8007c4a <_vfiprintf_r+0xa2>
 8007c46:	2a25      	cmp	r2, #37	; 0x25
 8007c48:	d1f9      	bne.n	8007c3e <_vfiprintf_r+0x96>
 8007c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c4e:	d00b      	beq.n	8007c68 <_vfiprintf_r+0xc0>
 8007c50:	465b      	mov	r3, fp
 8007c52:	4622      	mov	r2, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff ff93 	bl	8007b82 <__sfputs_r>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f000 80aa 	beq.w	8007db6 <_vfiprintf_r+0x20e>
 8007c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c64:	445a      	add	r2, fp
 8007c66:	9209      	str	r2, [sp, #36]	; 0x24
 8007c68:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 80a2 	beq.w	8007db6 <_vfiprintf_r+0x20e>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c7c:	f10a 0a01 	add.w	sl, sl, #1
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	9307      	str	r3, [sp, #28]
 8007c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c88:	931a      	str	r3, [sp, #104]	; 0x68
 8007c8a:	4654      	mov	r4, sl
 8007c8c:	2205      	movs	r2, #5
 8007c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c92:	4858      	ldr	r0, [pc, #352]	; (8007df4 <_vfiprintf_r+0x24c>)
 8007c94:	f7f8 fac4 	bl	8000220 <memchr>
 8007c98:	9a04      	ldr	r2, [sp, #16]
 8007c9a:	b9d8      	cbnz	r0, 8007cd4 <_vfiprintf_r+0x12c>
 8007c9c:	06d1      	lsls	r1, r2, #27
 8007c9e:	bf44      	itt	mi
 8007ca0:	2320      	movmi	r3, #32
 8007ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ca6:	0713      	lsls	r3, r2, #28
 8007ca8:	bf44      	itt	mi
 8007caa:	232b      	movmi	r3, #43	; 0x2b
 8007cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb6:	d015      	beq.n	8007ce4 <_vfiprintf_r+0x13c>
 8007cb8:	9a07      	ldr	r2, [sp, #28]
 8007cba:	4654      	mov	r4, sl
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f04f 0c0a 	mov.w	ip, #10
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc8:	3b30      	subs	r3, #48	; 0x30
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	d94e      	bls.n	8007d6c <_vfiprintf_r+0x1c4>
 8007cce:	b1b0      	cbz	r0, 8007cfe <_vfiprintf_r+0x156>
 8007cd0:	9207      	str	r2, [sp, #28]
 8007cd2:	e014      	b.n	8007cfe <_vfiprintf_r+0x156>
 8007cd4:	eba0 0308 	sub.w	r3, r0, r8
 8007cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	9304      	str	r3, [sp, #16]
 8007ce0:	46a2      	mov	sl, r4
 8007ce2:	e7d2      	b.n	8007c8a <_vfiprintf_r+0xe2>
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	1d19      	adds	r1, r3, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	9103      	str	r1, [sp, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bfbb      	ittet	lt
 8007cf0:	425b      	neglt	r3, r3
 8007cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8007cf6:	9307      	strge	r3, [sp, #28]
 8007cf8:	9307      	strlt	r3, [sp, #28]
 8007cfa:	bfb8      	it	lt
 8007cfc:	9204      	strlt	r2, [sp, #16]
 8007cfe:	7823      	ldrb	r3, [r4, #0]
 8007d00:	2b2e      	cmp	r3, #46	; 0x2e
 8007d02:	d10c      	bne.n	8007d1e <_vfiprintf_r+0x176>
 8007d04:	7863      	ldrb	r3, [r4, #1]
 8007d06:	2b2a      	cmp	r3, #42	; 0x2a
 8007d08:	d135      	bne.n	8007d76 <_vfiprintf_r+0x1ce>
 8007d0a:	9b03      	ldr	r3, [sp, #12]
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	9203      	str	r2, [sp, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bfb8      	it	lt
 8007d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d1a:	3402      	adds	r4, #2
 8007d1c:	9305      	str	r3, [sp, #20]
 8007d1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e04 <_vfiprintf_r+0x25c>
 8007d22:	7821      	ldrb	r1, [r4, #0]
 8007d24:	2203      	movs	r2, #3
 8007d26:	4650      	mov	r0, sl
 8007d28:	f7f8 fa7a 	bl	8000220 <memchr>
 8007d2c:	b140      	cbz	r0, 8007d40 <_vfiprintf_r+0x198>
 8007d2e:	2340      	movs	r3, #64	; 0x40
 8007d30:	eba0 000a 	sub.w	r0, r0, sl
 8007d34:	fa03 f000 	lsl.w	r0, r3, r0
 8007d38:	9b04      	ldr	r3, [sp, #16]
 8007d3a:	4303      	orrs	r3, r0
 8007d3c:	3401      	adds	r4, #1
 8007d3e:	9304      	str	r3, [sp, #16]
 8007d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d44:	482c      	ldr	r0, [pc, #176]	; (8007df8 <_vfiprintf_r+0x250>)
 8007d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d4a:	2206      	movs	r2, #6
 8007d4c:	f7f8 fa68 	bl	8000220 <memchr>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d03f      	beq.n	8007dd4 <_vfiprintf_r+0x22c>
 8007d54:	4b29      	ldr	r3, [pc, #164]	; (8007dfc <_vfiprintf_r+0x254>)
 8007d56:	bb1b      	cbnz	r3, 8007da0 <_vfiprintf_r+0x1f8>
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	3307      	adds	r3, #7
 8007d5c:	f023 0307 	bic.w	r3, r3, #7
 8007d60:	3308      	adds	r3, #8
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d66:	443b      	add	r3, r7
 8007d68:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6a:	e767      	b.n	8007c3c <_vfiprintf_r+0x94>
 8007d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d70:	460c      	mov	r4, r1
 8007d72:	2001      	movs	r0, #1
 8007d74:	e7a5      	b.n	8007cc2 <_vfiprintf_r+0x11a>
 8007d76:	2300      	movs	r3, #0
 8007d78:	3401      	adds	r4, #1
 8007d7a:	9305      	str	r3, [sp, #20]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f04f 0c0a 	mov.w	ip, #10
 8007d82:	4620      	mov	r0, r4
 8007d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d88:	3a30      	subs	r2, #48	; 0x30
 8007d8a:	2a09      	cmp	r2, #9
 8007d8c:	d903      	bls.n	8007d96 <_vfiprintf_r+0x1ee>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0c5      	beq.n	8007d1e <_vfiprintf_r+0x176>
 8007d92:	9105      	str	r1, [sp, #20]
 8007d94:	e7c3      	b.n	8007d1e <_vfiprintf_r+0x176>
 8007d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e7f0      	b.n	8007d82 <_vfiprintf_r+0x1da>
 8007da0:	ab03      	add	r3, sp, #12
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	462a      	mov	r2, r5
 8007da6:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <_vfiprintf_r+0x258>)
 8007da8:	a904      	add	r1, sp, #16
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7fd faa8 	bl	8005300 <_printf_float>
 8007db0:	4607      	mov	r7, r0
 8007db2:	1c78      	adds	r0, r7, #1
 8007db4:	d1d6      	bne.n	8007d64 <_vfiprintf_r+0x1bc>
 8007db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db8:	07d9      	lsls	r1, r3, #31
 8007dba:	d405      	bmi.n	8007dc8 <_vfiprintf_r+0x220>
 8007dbc:	89ab      	ldrh	r3, [r5, #12]
 8007dbe:	059a      	lsls	r2, r3, #22
 8007dc0:	d402      	bmi.n	8007dc8 <_vfiprintf_r+0x220>
 8007dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dc4:	f7fe ff7e 	bl	8006cc4 <__retarget_lock_release_recursive>
 8007dc8:	89ab      	ldrh	r3, [r5, #12]
 8007dca:	065b      	lsls	r3, r3, #25
 8007dcc:	f53f af12 	bmi.w	8007bf4 <_vfiprintf_r+0x4c>
 8007dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd2:	e711      	b.n	8007bf8 <_vfiprintf_r+0x50>
 8007dd4:	ab03      	add	r3, sp, #12
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	462a      	mov	r2, r5
 8007dda:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <_vfiprintf_r+0x258>)
 8007ddc:	a904      	add	r1, sp, #16
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7fd fd32 	bl	8005848 <_printf_i>
 8007de4:	e7e4      	b.n	8007db0 <_vfiprintf_r+0x208>
 8007de6:	bf00      	nop
 8007de8:	080085fc 	.word	0x080085fc
 8007dec:	0800861c 	.word	0x0800861c
 8007df0:	080085dc 	.word	0x080085dc
 8007df4:	0800879c 	.word	0x0800879c
 8007df8:	080087a6 	.word	0x080087a6
 8007dfc:	08005301 	.word	0x08005301
 8007e00:	08007b83 	.word	0x08007b83
 8007e04:	080087a2 	.word	0x080087a2

08007e08 <_read_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	; (8007e28 <_read_r+0x20>)
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7f9 fbb4 	bl	8001584 <_read>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_read_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_read_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20000568 	.word	0x20000568

08007e2c <__ascii_wctomb>:
 8007e2c:	b149      	cbz	r1, 8007e42 <__ascii_wctomb+0x16>
 8007e2e:	2aff      	cmp	r2, #255	; 0xff
 8007e30:	bf85      	ittet	hi
 8007e32:	238a      	movhi	r3, #138	; 0x8a
 8007e34:	6003      	strhi	r3, [r0, #0]
 8007e36:	700a      	strbls	r2, [r1, #0]
 8007e38:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e3c:	bf98      	it	ls
 8007e3e:	2001      	movls	r0, #1
 8007e40:	4770      	bx	lr
 8007e42:	4608      	mov	r0, r1
 8007e44:	4770      	bx	lr

08007e46 <abort>:
 8007e46:	b508      	push	{r3, lr}
 8007e48:	2006      	movs	r0, #6
 8007e4a:	f000 f833 	bl	8007eb4 <raise>
 8007e4e:	2001      	movs	r0, #1
 8007e50:	f7f9 fb8e 	bl	8001570 <_exit>

08007e54 <_malloc_usable_size_r>:
 8007e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e58:	1f18      	subs	r0, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	bfbc      	itt	lt
 8007e5e:	580b      	ldrlt	r3, [r1, r0]
 8007e60:	18c0      	addlt	r0, r0, r3
 8007e62:	4770      	bx	lr

08007e64 <_raise_r>:
 8007e64:	291f      	cmp	r1, #31
 8007e66:	b538      	push	{r3, r4, r5, lr}
 8007e68:	4604      	mov	r4, r0
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	d904      	bls.n	8007e78 <_raise_r+0x14>
 8007e6e:	2316      	movs	r3, #22
 8007e70:	6003      	str	r3, [r0, #0]
 8007e72:	f04f 30ff 	mov.w	r0, #4294967295
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e7a:	b112      	cbz	r2, 8007e82 <_raise_r+0x1e>
 8007e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e80:	b94b      	cbnz	r3, 8007e96 <_raise_r+0x32>
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f830 	bl	8007ee8 <_getpid_r>
 8007e88:	462a      	mov	r2, r5
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e92:	f000 b817 	b.w	8007ec4 <_kill_r>
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d00a      	beq.n	8007eb0 <_raise_r+0x4c>
 8007e9a:	1c59      	adds	r1, r3, #1
 8007e9c:	d103      	bne.n	8007ea6 <_raise_r+0x42>
 8007e9e:	2316      	movs	r3, #22
 8007ea0:	6003      	str	r3, [r0, #0]
 8007ea2:	2001      	movs	r0, #1
 8007ea4:	e7e7      	b.n	8007e76 <_raise_r+0x12>
 8007ea6:	2400      	movs	r4, #0
 8007ea8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007eac:	4628      	mov	r0, r5
 8007eae:	4798      	blx	r3
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	e7e0      	b.n	8007e76 <_raise_r+0x12>

08007eb4 <raise>:
 8007eb4:	4b02      	ldr	r3, [pc, #8]	; (8007ec0 <raise+0xc>)
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f7ff bfd3 	b.w	8007e64 <_raise_r>
 8007ebe:	bf00      	nop
 8007ec0:	20000010 	.word	0x20000010

08007ec4 <_kill_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4d07      	ldr	r5, [pc, #28]	; (8007ee4 <_kill_r+0x20>)
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4604      	mov	r4, r0
 8007ecc:	4608      	mov	r0, r1
 8007ece:	4611      	mov	r1, r2
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	f7f9 fb3d 	bl	8001550 <_kill>
 8007ed6:	1c43      	adds	r3, r0, #1
 8007ed8:	d102      	bne.n	8007ee0 <_kill_r+0x1c>
 8007eda:	682b      	ldr	r3, [r5, #0]
 8007edc:	b103      	cbz	r3, 8007ee0 <_kill_r+0x1c>
 8007ede:	6023      	str	r3, [r4, #0]
 8007ee0:	bd38      	pop	{r3, r4, r5, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000568 	.word	0x20000568

08007ee8 <_getpid_r>:
 8007ee8:	f7f9 bb2a 	b.w	8001540 <_getpid>

08007eec <_init>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr

08007ef8 <_fini>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	bf00      	nop
 8007efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efe:	bc08      	pop	{r3}
 8007f00:	469e      	mov	lr, r3
 8007f02:	4770      	bx	lr
