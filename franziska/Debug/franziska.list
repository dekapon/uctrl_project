
franziska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000859c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a44  08008770  08008770  00018770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b4  080091b4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091bc  080091bc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080091c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001e8  080093ac  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  080093ac  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194f6  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d2  00000000  00000000  0003970e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0003cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026679  00000000  00000000  0003f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dfe  00000000  00000000  000656f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a65  00000000  00000000  0007d4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ef54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd8  00000000  00000000  0015efa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008754 	.word	0x08008754

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08008754 	.word	0x08008754

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9b9 	b.w	800101c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_ADC1_Init+0xb0>)
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <MX_ADC1_Init+0xb4>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <MX_ADC1_Init+0xb0>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_ADC1_Init+0xb0>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_ADC1_Init+0xb0>)
 8001046:	2201      	movs	r2, #1
 8001048:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_ADC1_Init+0xb0>)
 800104c:	2200      	movs	r2, #0
 800104e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_ADC1_Init+0xb0>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_ADC1_Init+0xb0>)
 800105a:	2200      	movs	r2, #0
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_ADC1_Init+0xb0>)
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <MX_ADC1_Init+0xb8>)
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_ADC1_Init+0xb0>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_ADC1_Init+0xb0>)
 800106c:	2202      	movs	r2, #2
 800106e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_ADC1_Init+0xb0>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_ADC1_Init+0xb0>)
 800107a:	2201      	movs	r2, #1
 800107c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <MX_ADC1_Init+0xb0>)
 8001080:	f000 fdd0 	bl	8001c24 <HAL_ADC_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 fa45 	bl	8001518 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_ADC1_Init+0xb0>)
 80010a0:	f000 ff16 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010aa:	f000 fa35 	bl	8001518 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_ADC1_Init+0xb0>)
 80010b8:	f000 ff0a 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010c2:	f000 fa29 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000414 	.word	0x20000414
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_ADC_MspInit+0x7c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d127      	bne.n	800114e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_ADC_MspInit+0x80>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_ADC_MspInit+0x84>)
 800114a:	f001 fa01 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40012000 	.word	0x40012000
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <MX_GPIO_Init+0xf0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a34      	ldr	r2, [pc, #208]	; (8001254 <MX_GPIO_Init+0xf0>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <MX_GPIO_Init+0xf0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <MX_GPIO_Init+0xf0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <MX_GPIO_Init+0xf0>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MX_GPIO_Init+0xf0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80011b8:	4827      	ldr	r0, [pc, #156]	; (8001258 <MX_GPIO_Init+0xf4>)
 80011ba:	f001 fb75 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_N_Pin|HX711_CLK_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80011c4:	4825      	ldr	r0, [pc, #148]	; (800125c <MX_GPIO_Init+0xf8>)
 80011c6:	f001 fb6f 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 80011ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	481d      	ldr	r0, [pc, #116]	; (8001258 <MX_GPIO_Init+0xf4>)
 80011e4:	f001 f9b4 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = joystick_Pin;
 80011e8:	2320      	movs	r3, #32
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(joystick_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	4817      	ldr	r0, [pc, #92]	; (800125c <MX_GPIO_Init+0xf8>)
 80011fe:	f001 f9a7 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin|HX711_CLK_Pin;
 8001202:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	4810      	ldr	r0, [pc, #64]	; (800125c <MX_GPIO_Init+0xf8>)
 800121c:	f001 f998 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_DATA_Pin;
 8001220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX711_DATA_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	4619      	mov	r1, r3
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <MX_GPIO_Init+0xf8>)
 8001236:	f001 f98b 	bl	8002550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2017      	movs	r0, #23
 8001240:	f001 f94f 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001244:	2017      	movs	r0, #23
 8001246:	f001 f968 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000
 800125c:	40020400 	.word	0x40020400

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f000 fc48 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f89a 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126c:	f7ff ff7a 	bl	8001164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001270:	f7ff fed6 	bl	8001020 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001274:	f000 fba4 	bl	80019c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001278:	f000 f954 	bl	8001524 <MX_SPI1_Init>
  MX_TIM1_Init();
 800127c:	f000 fb10 	bl	80018a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001280:	f003 fd11 	bl	8004ca6 <lcd_init>
  lcd_clear();
 8001284:	f003 fd6a 	bl	8004d5c <lcd_clear>
  initScale();
 8001288:	f004 fa56 	bl	8005738 <initScale>
  welcome_display();
 800128c:	f003 ffa4 	bl	80051d8 <welcome_display>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		status = potiRead(&rawValue);
 8001290:	483b      	ldr	r0, [pc, #236]	; (8001380 <main+0x120>)
 8001292:	f004 f857 	bl	8005344 <potiRead>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <main+0x124>)
 800129c:	701a      	strb	r2, [r3, #0]

		if(status == HAL_OK){
 800129e:	4b39      	ldr	r3, [pc, #228]	; (8001384 <main+0x124>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d168      	bne.n	8001378 <main+0x118>
			if(step == 0)
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <main+0x128>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <main+0x54>
				menu1_display();
 80012ae:	f003 ffab 	bl	8005208 <menu1_display>
 80012b2:	e7ed      	b.n	8001290 <main+0x30>
			else if(step == 1)
 80012b4:	4b34      	ldr	r3, [pc, #208]	; (8001388 <main+0x128>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <main+0x62>
				menu2_display();
 80012bc:	f003 ffc2 	bl	8005244 <menu2_display>
 80012c0:	e7e6      	b.n	8001290 <main+0x30>
			else if (step == 2)
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <main+0x128>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d105      	bne.n	80012d6 <main+0x76>
				weight = getWeight();
 80012ca:	f004 fa55 	bl	8005778 <getWeight>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a2e      	ldr	r2, [pc, #184]	; (800138c <main+0x12c>)
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e7dc      	b.n	8001290 <main+0x30>
			else if(step == 3)
 80012d6:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <main+0x128>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d109      	bne.n	80012f2 <main+0x92>
				size = menu3_display(weight);
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <main+0x12c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 ffcc 	bl	8005280 <menu3_display>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <main+0x130>)
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	e7ce      	b.n	8001290 <main+0x30>
			else if(step == 4)
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <main+0x128>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d106      	bne.n	8001308 <main+0xa8>
				percentage = potiPrint(&rawValue);
 80012fa:	4821      	ldr	r0, [pc, #132]	; (8001380 <main+0x120>)
 80012fc:	f004 f83c 	bl	8005378 <potiPrint>
 8001300:	4603      	mov	r3, r0
 8001302:	4a24      	ldr	r2, [pc, #144]	; (8001394 <main+0x134>)
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e7c3      	b.n	8001290 <main+0x30>
			else if(step == 5){
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <main+0x128>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b05      	cmp	r3, #5
 800130e:	d10b      	bne.n	8001328 <main+0xc8>
				status = potiDeInit();
 8001310:	f004 fa08 	bl	8005724 <potiDeInit>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <main+0x124>)
 800131a:	701a      	strb	r2, [r3, #0]
				menu4_display(percentage);
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <main+0x134>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f003 ffe7 	bl	80052f4 <menu4_display>
 8001326:	e7b3      	b.n	8001290 <main+0x30>
			}
			else if(step == 6){
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <main+0x128>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b06      	cmp	r3, #6
 800132e:	d105      	bne.n	800133c <main+0xdc>
				// send start signal to meindi;
				step ++;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <main+0x128>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <main+0x128>)
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e7a9      	b.n	8001290 <main+0x30>
			}
			else if(step == 7){
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <main+0x128>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b07      	cmp	r3, #7
 8001342:	d1a5      	bne.n	8001290 <main+0x30>
				weight = getWeight2();
 8001344:	f004 fa5c 	bl	8005800 <getWeight2>
 8001348:	4603      	mov	r3, r0
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <main+0x12c>)
 800134c:	6013      	str	r3, [r2, #0]
				isFull = checkWeight(size, weight, percentage);
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <main+0x130>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <main+0x12c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <main+0x134>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f004 fa89 	bl	8005874 <checkWeight>
 8001362:	4603      	mov	r3, r0
 8001364:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <main+0x138>)
 8001366:	6013      	str	r3, [r2, #0]
				if(isFull)
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <main+0x138>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d08f      	beq.n	8001290 <main+0x30>
					puts("******** Testing ******** \r\n");
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <main+0x13c>)
 8001372:	f004 ffbb 	bl	80062ec <puts>
 8001376:	e78b      	b.n	8001290 <main+0x30>
					// send stop signal to meindi;
			}
		}
		else
			Error_Handler();
 8001378:	f000 f8ce 	bl	8001518 <Error_Handler>
		status = potiRead(&rawValue);
 800137c:	e788      	b.n	8001290 <main+0x30>
 800137e:	bf00      	nop
 8001380:	2000045c 	.word	0x2000045c
 8001384:	20000470 	.word	0x20000470
 8001388:	20000204 	.word	0x20000204
 800138c:	2000046c 	.word	0x2000046c
 8001390:	20000468 	.word	0x20000468
 8001394:	20000464 	.word	0x20000464
 8001398:	20000460 	.word	0x20000460
 800139c:	08008770 	.word	0x08008770

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	; 0x50
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	2234      	movs	r2, #52	; 0x34
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f004 fabc 	bl	800592c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <SystemClock_Config+0xb8>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a22      	ldr	r2, [pc, #136]	; (8001458 <SystemClock_Config+0xb8>)
 80013ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <SystemClock_Config+0xb8>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <SystemClock_Config+0xbc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <SystemClock_Config+0xbc>)
 80013ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <SystemClock_Config+0xbc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001400:	2302      	movs	r3, #2
 8001402:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001408:	2310      	movs	r3, #16
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fcef 	bl	8002df8 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001420:	f000 f87a 	bl	8001518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
 8001426:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fa64 	bl	800290c <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800144a:	f000 f865 	bl	8001518 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3750      	adds	r7, #80	; 0x50
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == joystick_Pin && button_state == true){ // Check pin
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	2b20      	cmp	r3, #32
 800146e:	d10a      	bne.n	8001486 <HAL_GPIO_EXTI_Callback+0x26>
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_GPIO_EXTI_Callback+0x34>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_TIM_Base_Start_IT(&htim1);
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <HAL_GPIO_EXTI_Callback+0x38>)
 800147a:	f002 fa3b 	bl	80038f4 <HAL_TIM_Base_Start_IT>
		button_state = false;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_GPIO_EXTI_Callback+0x34>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e001      	b.n	800148a <HAL_GPIO_EXTI_Callback+0x2a>
	}
	else{
		__NOP();
 8001486:	bf00      	nop
	}
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000000 	.word	0x20000000
 8001498:	200004cc 	.word	0x200004cc

0800149c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	UNUSED(htim);		// Prevent unused argument(s) compilation warning

	if(HAL_GPIO_ReadPin(joystick_GPIO_Port, joystick_Pin) == GPIO_PIN_RESET){
 80014a4:	2120      	movs	r1, #32
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014a8:	f001 f9e6 	bl	8002878 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10a      	bne.n	80014c8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		step ++;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80014ba:	6013      	str	r3, [r2, #0]
		button_state = true;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014c4:	f002 fa86 	bl	80039d4 <HAL_TIM_Base_Stop_IT>
	}
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020400 	.word	0x40020400
 80014d4:	20000204 	.word	0x20000204
 80014d8:	20000000 	.word	0x20000000
 80014dc:	200004cc 	.word	0x200004cc

080014e0 <_write>:


int _write(int fd, char* ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY)== HAL_OK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <_write+0x34>)
 80014f8:	f002 fea9 	bl	800424e <HAL_UART_Transmit>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <_write+0x26>
		return len;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	e001      	b.n	800150a <_write+0x2a>
	else
		return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000514 	.word	0x20000514

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_SPI1_Init+0x68>)
 800152a:	4a19      	ldr	r2, [pc, #100]	; (8001590 <MX_SPI1_Init+0x6c>)
 800152c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_SPI1_Init+0x68>)
 8001530:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001534:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_SPI1_Init+0x68>)
 8001538:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800153c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_SPI1_Init+0x68>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_SPI1_Init+0x68>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_SPI1_Init+0x68>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_SPI1_Init+0x68>)
 8001552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001556:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_SPI1_Init+0x68>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_SPI1_Init+0x68>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_SPI1_Init+0x68>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_SPI1_Init+0x68>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_SPI1_Init+0x68>)
 8001572:	220a      	movs	r2, #10
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_SPI1_Init+0x68>)
 8001578:	f001 fedc 	bl	8003334 <HAL_SPI_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001582:	f7ff ffc9 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000474 	.word	0x20000474
 8001590:	40013000 	.word	0x40013000

08001594 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_SPI_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12b      	bne.n	800160e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015ee:	23a0      	movs	r3, #160	; 0xa0
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015fe:	2305      	movs	r3, #5
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_SPI_MspInit+0x8c>)
 800160a:	f000 ffa1 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40013000 	.word	0x40013000
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_MspInit+0x4c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x4c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f000 fa6c 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80016cc:	2020      	movs	r0, #32
 80016ce:	f001 f905 	bl	80028dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80016de:	f002 f9a8 	bl	8003a32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200004cc 	.word	0x200004cc

080016ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016f2:	f002 f99e 	bl	8003a32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200004cc 	.word	0x200004cc

08001700 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001706:	f002 f994 	bl	8003a32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200004cc 	.word	0x200004cc

08001714 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM1_CC_IRQHandler+0x10>)
 800171a:	f002 f98a 	bl	8003a32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200004cc 	.word	0x200004cc

08001728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_kill>:

int _kill(int pid, int sig)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001742:	f004 f8c9 	bl	80058d8 <__errno>
 8001746:	4603      	mov	r3, r0
 8001748:	2216      	movs	r2, #22
 800174a:	601a      	str	r2, [r3, #0]
	return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_exit>:

void _exit (int status)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ffe7 	bl	8001738 <_kill>
	while (1) {}		/* Make sure we hang here */
 800176a:	e7fe      	b.n	800176a <_exit+0x12>

0800176c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e00a      	b.n	8001794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800177e:	f3af 8000 	nop.w
 8001782:	4601      	mov	r1, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbf0      	blt.n	800177e <_read+0x12>
	}

return len;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
	return -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ce:	605a      	str	r2, [r3, #4]
	return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_isatty>:

int _isatty(int file)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
	return 1;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f004 f84a 	bl	80058d8 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20020000 	.word	0x20020000
 8001870:	00000400 	.word	0x00000400
 8001874:	20000208 	.word	0x20000208
 8001878:	200005d8 	.word	0x200005d8

0800187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <SystemInit+0x20>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <SystemInit+0x20>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <MX_TIM1_Init+0x98>)
 80018be:	4a1f      	ldr	r2, [pc, #124]	; (800193c <MX_TIM1_Init+0x9c>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_TIM1_Init+0x98>)
 80018c4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80018c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <MX_TIM1_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <MX_TIM1_Init+0x98>)
 80018d2:	2231      	movs	r2, #49	; 0x31
 80018d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_TIM1_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_TIM1_Init+0x98>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_TIM1_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <MX_TIM1_Init+0x98>)
 80018ea:	f001 ffb3 	bl	8003854 <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018f4:	f7ff fe10 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_TIM1_Init+0x98>)
 8001906:	f002 f99c 	bl	8003c42 <HAL_TIM_ConfigClockSource>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001910:	f7ff fe02 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_TIM1_Init+0x98>)
 8001922:	f002 fbb7 	bl	8004094 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800192c:	f7ff fdf4 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200004cc 	.word	0x200004cc
 800193c:	40010000 	.word	0x40010000

08001940 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <HAL_TIM_Base_MspInit+0x78>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12d      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_TIM_Base_MspInit+0x7c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_TIM_Base_MspInit+0x7c>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_TIM_Base_MspInit+0x7c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2018      	movs	r0, #24
 8001974:	f000 fdb5 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001978:	2018      	movs	r0, #24
 800197a:	f000 fdce 	bl	800251a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2019      	movs	r0, #25
 8001984:	f000 fdad 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001988:	2019      	movs	r0, #25
 800198a:	f000 fdc6 	bl	800251a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	201a      	movs	r0, #26
 8001994:	f000 fda5 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001998:	201a      	movs	r0, #26
 800199a:	f000 fdbe 	bl	800251a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	201b      	movs	r0, #27
 80019a4:	f000 fd9d 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019a8:	201b      	movs	r0, #27
 80019aa:	f000 fdb6 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40010000 	.word	0x40010000
 80019bc:	40023800 	.word	0x40023800

080019c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <MX_USART2_UART_Init+0x50>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f8:	f002 fbdc 	bl	80041b4 <HAL_UART_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a02:	f7ff fd89 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000514 	.word	0x20000514
 8001a10:	40004400 	.word	0x40004400

08001a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_UART_MspInit+0x84>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12b      	bne.n	8001a8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_UART_MspInit+0x88>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_UART_MspInit+0x88>)
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_MspInit+0x88>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_UART_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_UART_MspInit+0x88>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_UART_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a6e:	230c      	movs	r3, #12
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_UART_MspInit+0x8c>)
 8001a8a:	f000 fd61 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac0:	4c0b      	ldr	r4, [pc, #44]	; (8001af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ace:	f7ff fed5 	bl	800187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f003 ff07 	bl	80058e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff fbc3 	bl	8001260 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ae8:	080091c4 	.word	0x080091c4
  ldr r2, =_sbss
 8001aec:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001af0:	200005d8 	.word	0x200005d8

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_Init+0x40>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_Init+0x40>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x40>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 fcd3 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fd7a 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fceb 	bl	8002536 <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 fcb3 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000004 	.word	0x20000004
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	20000008 	.word	0x20000008

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	2000000c 	.word	0x2000000c
 8001bc0:	20000558 	.word	0x20000558

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000558 	.word	0x20000558

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000000c 	.word	0x2000000c

08001c24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e033      	b.n	8001ca2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fa4a 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c6a:	f023 0302 	bic.w	r3, r3, #2
 8001c6e:	f043 0202 	orr.w	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa5c 	bl	8002134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f023 0303 	bic.w	r3, r3, #3
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
 8001c92:	e001      	b.n	8001c98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Start+0x1a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e0b2      	b.n	8001e2c <HAL_ADC_Start+0x180>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d018      	beq.n	8001d0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cec:	4b52      	ldr	r3, [pc, #328]	; (8001e38 <HAL_ADC_Start+0x18c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a52      	ldr	r2, [pc, #328]	; (8001e3c <HAL_ADC_Start+0x190>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9a      	lsrs	r2, r3, #18
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d00:	e002      	b.n	8001d08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f9      	bne.n	8001d02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d17a      	bne.n	8001e12 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5a:	d106      	bne.n	8001d6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f023 0206 	bic.w	r2, r3, #6
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_ADC_Start+0x194>)
 8001d7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12a      	bne.n	8001de8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_ADC_Start+0x198>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d015      	beq.n	8001dc8 <HAL_ADC_Start+0x11c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_ADC_Start+0x19c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d105      	bne.n	8001db2 <HAL_ADC_Start+0x106>
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_ADC_Start+0x194>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_ADC_Start+0x1a0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d136      	bne.n	8001e2a <HAL_ADC_Start+0x17e>
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_ADC_Start+0x194>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d130      	bne.n	8001e2a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d129      	bne.n	8001e2a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	e020      	b.n	8001e2a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <HAL_ADC_Start+0x198>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d11b      	bne.n	8001e2a <HAL_ADC_Start+0x17e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d114      	bne.n	8001e2a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	e00b      	b.n	8001e2a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	40012300 	.word	0x40012300
 8001e44:	40012000 	.word	0x40012000
 8001e48:	40012100 	.word	0x40012100
 8001e4c:	40012200 	.word	0x40012200

08001e50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Stop+0x16>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e021      	b.n	8001eaa <HAL_ADC_Stop+0x5a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1c>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e113      	b.n	8002114 <HAL_ADC_ConfigChannel+0x244>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b09      	cmp	r3, #9
 8001efa:	d925      	bls.n	8001f48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68d9      	ldr	r1, [r3, #12]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b1e      	subs	r3, #30
 8001f12:	2207      	movs	r2, #7
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	400a      	ands	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68d9      	ldr	r1, [r3, #12]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	4603      	mov	r3, r0
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4403      	add	r3, r0
 8001f3a:	3b1e      	subs	r3, #30
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	e022      	b.n	8001f8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6919      	ldr	r1, [r3, #16]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6919      	ldr	r1, [r3, #16]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4403      	add	r3, r0
 8001f84:	409a      	lsls	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d824      	bhi.n	8001fe0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b05      	subs	r3, #5
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b05      	subs	r3, #5
 8001fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fde:	e04c      	b.n	800207a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	d824      	bhi.n	8002032 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b23      	subs	r3, #35	; 0x23
 8001ffa:	221f      	movs	r2, #31
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43da      	mvns	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	400a      	ands	r2, r1
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	4618      	mov	r0, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	3b23      	subs	r3, #35	; 0x23
 8002024:	fa00 f203 	lsl.w	r2, r0, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
 8002030:	e023      	b.n	800207a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	3b41      	subs	r3, #65	; 0x41
 8002044:	221f      	movs	r2, #31
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	400a      	ands	r2, r1
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b41      	subs	r3, #65	; 0x41
 800206e:	fa00 f203 	lsl.w	r2, r0, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_ADC_ConfigChannel+0x250>)
 800207c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a28      	ldr	r2, [pc, #160]	; (8002124 <HAL_ADC_ConfigChannel+0x254>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10f      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b12      	cmp	r3, #18
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_ADC_ConfigChannel+0x254>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12b      	bne.n	800210a <HAL_ADC_ConfigChannel+0x23a>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <HAL_ADC_ConfigChannel+0x258>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d003      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0x1f4>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b11      	cmp	r3, #17
 80020c2:	d122      	bne.n	800210a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_ADC_ConfigChannel+0x258>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d111      	bne.n	800210a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_ADC_ConfigChannel+0x25c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a11      	ldr	r2, [pc, #68]	; (8002130 <HAL_ADC_ConfigChannel+0x260>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	0c9a      	lsrs	r2, r3, #18
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020fc:	e002      	b.n	8002104 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	3b01      	subs	r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f9      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40012300 	.word	0x40012300
 8002124:	40012000 	.word	0x40012000
 8002128:	10000012 	.word	0x10000012
 800212c:	20000004 	.word	0x20000004
 8002130:	431bde83 	.word	0x431bde83

08002134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800213c:	4b79      	ldr	r3, [pc, #484]	; (8002324 <ADC_Init+0x1f0>)
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	431a      	orrs	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	021a      	lsls	r2, r3, #8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800218c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6899      	ldr	r1, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	4a58      	ldr	r2, [pc, #352]	; (8002328 <ADC_Init+0x1f4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6899      	ldr	r1, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6899      	ldr	r1, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	e00f      	b.n	8002232 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002230:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0202 	bic.w	r2, r2, #2
 8002240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6899      	ldr	r1, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7e1b      	ldrb	r3, [r3, #24]
 800224c:	005a      	lsls	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01b      	beq.n	8002298 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800227e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	3b01      	subs	r3, #1
 800228c:	035a      	lsls	r2, r3, #13
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	e007      	b.n	80022a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	051a      	lsls	r2, r3, #20
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022ea:	025a      	lsls	r2, r3, #9
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	029a      	lsls	r2, r3, #10
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40012300 	.word	0x40012300
 8002328:	0f000001 	.word	0x0f000001

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff29 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff3e 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff31 	bl	8002390 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e165      	b.n	8002838 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	f040 8154 	bne.w	8002832 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d005      	beq.n	80025a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d130      	bne.n	8002604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b03      	cmp	r3, #3
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80ae 	beq.w	8002832 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b5d      	ldr	r3, [pc, #372]	; (8002850 <HAL_GPIO_Init+0x300>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a5c      	ldr	r2, [pc, #368]	; (8002850 <HAL_GPIO_Init+0x300>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <HAL_GPIO_Init+0x300>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f2:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_GPIO_Init+0x304>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <HAL_GPIO_Init+0x308>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d025      	beq.n	800276a <HAL_GPIO_Init+0x21a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4e      	ldr	r2, [pc, #312]	; (800285c <HAL_GPIO_Init+0x30c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01f      	beq.n	8002766 <HAL_GPIO_Init+0x216>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4d      	ldr	r2, [pc, #308]	; (8002860 <HAL_GPIO_Init+0x310>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d019      	beq.n	8002762 <HAL_GPIO_Init+0x212>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4c      	ldr	r2, [pc, #304]	; (8002864 <HAL_GPIO_Init+0x314>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_GPIO_Init+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4b      	ldr	r2, [pc, #300]	; (8002868 <HAL_GPIO_Init+0x318>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00d      	beq.n	800275a <HAL_GPIO_Init+0x20a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4a      	ldr	r2, [pc, #296]	; (800286c <HAL_GPIO_Init+0x31c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0x206>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a49      	ldr	r2, [pc, #292]	; (8002870 <HAL_GPIO_Init+0x320>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_GPIO_Init+0x202>
 800274e:	2306      	movs	r3, #6
 8002750:	e00c      	b.n	800276c <HAL_GPIO_Init+0x21c>
 8002752:	2307      	movs	r3, #7
 8002754:	e00a      	b.n	800276c <HAL_GPIO_Init+0x21c>
 8002756:	2305      	movs	r3, #5
 8002758:	e008      	b.n	800276c <HAL_GPIO_Init+0x21c>
 800275a:	2304      	movs	r3, #4
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x21c>
 800275e:	2303      	movs	r3, #3
 8002760:	e004      	b.n	800276c <HAL_GPIO_Init+0x21c>
 8002762:	2302      	movs	r3, #2
 8002764:	e002      	b.n	800276c <HAL_GPIO_Init+0x21c>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_GPIO_Init+0x21c>
 800276a:	2300      	movs	r3, #0
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	f002 0203 	and.w	r2, r2, #3
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	4093      	lsls	r3, r2
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800277c:	4935      	ldr	r1, [pc, #212]	; (8002854 <HAL_GPIO_Init+0x304>)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278a:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <HAL_GPIO_Init+0x324>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ae:	4a31      	ldr	r2, [pc, #196]	; (8002874 <HAL_GPIO_Init+0x324>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b4:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HAL_GPIO_Init+0x324>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d8:	4a26      	ldr	r2, [pc, #152]	; (8002874 <HAL_GPIO_Init+0x324>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027de:	4b25      	ldr	r3, [pc, #148]	; (8002874 <HAL_GPIO_Init+0x324>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_GPIO_Init+0x324>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_GPIO_Init+0x324>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <HAL_GPIO_Init+0x324>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	f67f ae96 	bls.w	800256c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40013800 	.word	0x40013800
 8002858:	40020000 	.word	0x40020000
 800285c:	40020400 	.word	0x40020400
 8002860:	40020800 	.word	0x40020800
 8002864:	40020c00 	.word	0x40020c00
 8002868:	40021000 	.word	0x40021000
 800286c:	40021400 	.word	0x40021400
 8002870:	40021800 	.word	0x40021800
 8002874:	40013c00 	.word	0x40013c00

08002878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e001      	b.n	800289a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fdb0 	bl	8001460 <HAL_GPIO_EXTI_Callback>
  }
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0cc      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d90c      	bls.n	8002948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d044      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e067      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4934      	ldr	r1, [pc, #208]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7ff f8e2 	bl	8001bc4 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7ff f8de 	bl	8001bc4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20c      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f855 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f842 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08008a34 	.word	0x08008a34
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	20000008 	.word	0x20000008

08002ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000004 	.word	0x20000004

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002af4:	f7ff fff0 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0a9b      	lsrs	r3, r3, #10
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	08008a44 	.word	0x08008a44

08002b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b1c:	f7ff ffdc 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	0b5b      	lsrs	r3, r3, #13
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	4903      	ldr	r1, [pc, #12]	; (8002b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	08008a44 	.word	0x08008a44

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b48:	2600      	movs	r6, #0
 8002b4a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002b50:	2600      	movs	r6, #0
 8002b52:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002b54:	2600      	movs	r6, #0
 8002b56:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b58:	2600      	movs	r6, #0
 8002b5a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5c:	4ea3      	ldr	r6, [pc, #652]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b5e:	68b6      	ldr	r6, [r6, #8]
 8002b60:	f006 060c 	and.w	r6, r6, #12
 8002b64:	2e0c      	cmp	r6, #12
 8002b66:	f200 8137 	bhi.w	8002dd8 <HAL_RCC_GetSysClockFreq+0x298>
 8002b6a:	f20f 0c08 	addw	ip, pc, #8
 8002b6e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002ba9 	.word	0x08002ba9
 8002b78:	08002dd9 	.word	0x08002dd9
 8002b7c:	08002dd9 	.word	0x08002dd9
 8002b80:	08002dd9 	.word	0x08002dd9
 8002b84:	08002baf 	.word	0x08002baf
 8002b88:	08002dd9 	.word	0x08002dd9
 8002b8c:	08002dd9 	.word	0x08002dd9
 8002b90:	08002dd9 	.word	0x08002dd9
 8002b94:	08002bb5 	.word	0x08002bb5
 8002b98:	08002dd9 	.word	0x08002dd9
 8002b9c:	08002dd9 	.word	0x08002dd9
 8002ba0:	08002dd9 	.word	0x08002dd9
 8002ba4:	08002ccb 	.word	0x08002ccb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba8:	4b91      	ldr	r3, [pc, #580]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002baa:	613b      	str	r3, [r7, #16]
       break;
 8002bac:	e117      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bae:	4b91      	ldr	r3, [pc, #580]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002bb0:	613b      	str	r3, [r7, #16]
      break;
 8002bb2:	e114      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb4:	4b8d      	ldr	r3, [pc, #564]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bbc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbe:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d024      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002bda:	f04f 0500 	mov.w	r5, #0
 8002bde:	ea02 0004 	and.w	r0, r2, r4
 8002be2:	ea03 0105 	and.w	r1, r3, r5
 8002be6:	4b83      	ldr	r3, [pc, #524]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002be8:	fb03 f201 	mul.w	r2, r3, r1
 8002bec:	2300      	movs	r3, #0
 8002bee:	fb03 f300 	mul.w	r3, r3, r0
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a7f      	ldr	r2, [pc, #508]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002bf6:	fba0 0102 	umull	r0, r1, r0, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f7fe f88f 	bl	8000d28 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4613      	mov	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e04c      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c14:	4b75      	ldr	r3, [pc, #468]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	ea02 0800 	and.w	r8, r2, r0
 8002c2c:	ea03 0901 	and.w	r9, r3, r1
 8002c30:	4640      	mov	r0, r8
 8002c32:	4649      	mov	r1, r9
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	014b      	lsls	r3, r1, #5
 8002c3e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c42:	0142      	lsls	r2, r0, #5
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	ebb0 0008 	subs.w	r0, r0, r8
 8002c4c:	eb61 0109 	sbc.w	r1, r1, r9
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	018b      	lsls	r3, r1, #6
 8002c5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c5e:	0182      	lsls	r2, r0, #6
 8002c60:	1a12      	subs	r2, r2, r0
 8002c62:	eb63 0301 	sbc.w	r3, r3, r1
 8002c66:	f04f 0000 	mov.w	r0, #0
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	00d9      	lsls	r1, r3, #3
 8002c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c74:	00d0      	lsls	r0, r2, #3
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	eb12 0208 	adds.w	r2, r2, r8
 8002c7e:	eb43 0309 	adc.w	r3, r3, r9
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	0299      	lsls	r1, r3, #10
 8002c8c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c90:	0290      	lsls	r0, r2, #10
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	f7fe f841 	bl	8000d28 <__aeabi_uldivmod>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4613      	mov	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cae:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	613b      	str	r3, [r7, #16]
      break;
 8002cc8:	e089      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cca:	4948      	ldr	r1, [pc, #288]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ccc:	6849      	ldr	r1, [r1, #4]
 8002cce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002cd2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd4:	4945      	ldr	r1, [pc, #276]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002cd6:	6849      	ldr	r1, [r1, #4]
 8002cd8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002cdc:	2900      	cmp	r1, #0
 8002cde:	d024      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce0:	4942      	ldr	r1, [pc, #264]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ce2:	6849      	ldr	r1, [r1, #4]
 8002ce4:	0989      	lsrs	r1, r1, #6
 8002ce6:	4608      	mov	r0, r1
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cf0:	f04f 0500 	mov.w	r5, #0
 8002cf4:	ea00 0204 	and.w	r2, r0, r4
 8002cf8:	ea01 0305 	and.w	r3, r1, r5
 8002cfc:	493d      	ldr	r1, [pc, #244]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002cfe:	fb01 f003 	mul.w	r0, r1, r3
 8002d02:	2100      	movs	r1, #0
 8002d04:	fb01 f102 	mul.w	r1, r1, r2
 8002d08:	1844      	adds	r4, r0, r1
 8002d0a:	493a      	ldr	r1, [pc, #232]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002d0c:	fba2 0101 	umull	r0, r1, r2, r1
 8002d10:	1863      	adds	r3, r4, r1
 8002d12:	4619      	mov	r1, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	f7fe f804 	bl	8000d28 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e04a      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	461a      	mov	r2, r3
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	ea02 0400 	and.w	r4, r2, r0
 8002d42:	ea03 0501 	and.w	r5, r3, r1
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	014b      	lsls	r3, r1, #5
 8002d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d58:	0142      	lsls	r2, r0, #5
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	1b00      	subs	r0, r0, r4
 8002d60:	eb61 0105 	sbc.w	r1, r1, r5
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	018b      	lsls	r3, r1, #6
 8002d6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d72:	0182      	lsls	r2, r0, #6
 8002d74:	1a12      	subs	r2, r2, r0
 8002d76:	eb63 0301 	sbc.w	r3, r3, r1
 8002d7a:	f04f 0000 	mov.w	r0, #0
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	00d9      	lsls	r1, r3, #3
 8002d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d88:	00d0      	lsls	r0, r2, #3
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	1912      	adds	r2, r2, r4
 8002d90:	eb45 0303 	adc.w	r3, r5, r3
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	0299      	lsls	r1, r3, #10
 8002d9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002da2:	0290      	lsls	r0, r2, #10
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	f7fd ffb8 	bl	8000d28 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	0f1b      	lsrs	r3, r3, #28
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	613b      	str	r3, [r7, #16]
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002dda:	613b      	str	r3, [r7, #16]
      break;
 8002ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dde:	693b      	ldr	r3, [r7, #16]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	00f42400 	.word	0x00f42400
 8002df4:	017d7840 	.word	0x017d7840

08002df8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e28d      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8083 	beq.w	8002f1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e18:	4b94      	ldr	r3, [pc, #592]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d019      	beq.n	8002e58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e24:	4b91      	ldr	r3, [pc, #580]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e30:	4b8e      	ldr	r3, [pc, #568]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3c:	d00c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d112      	bne.n	8002e70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4b88      	ldr	r3, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	4b84      	ldr	r3, [pc, #528]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d05b      	beq.n	8002f1c <HAL_RCC_OscConfig+0x124>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d157      	bne.n	8002f1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e25a      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x90>
 8002e7a:	4b7c      	ldr	r3, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7b      	ldr	r2, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e01d      	b.n	8002ec4 <HAL_RCC_OscConfig+0xcc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0xb4>
 8002e92:	4b76      	ldr	r3, [pc, #472]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a75      	ldr	r2, [pc, #468]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b73      	ldr	r3, [pc, #460]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a72      	ldr	r2, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xcc>
 8002eac:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b6c      	ldr	r3, [pc, #432]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a6b      	ldr	r2, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fe7a 	bl	8001bc4 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fe76 	bl	8001bc4 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e21f      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xdc>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fe66 	bl	8001bc4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe fe62 	bl	8001bc4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e20b      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	4b57      	ldr	r3, [pc, #348]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x104>
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d06f      	beq.n	800300a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f2a:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d017      	beq.n	8002f66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f36:	4b4d      	ldr	r3, [pc, #308]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d105      	bne.n	8002f4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f42:	4b4a      	ldr	r3, [pc, #296]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d11c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5a:	4b44      	ldr	r3, [pc, #272]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_RCC_OscConfig+0x186>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e1d3      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4937      	ldr	r1, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	e03a      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9c:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_OscConfig+0x278>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fe0f 	bl	8001bc4 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fe fe0b 	bl	8001bc4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e1b4      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4925      	ldr	r1, [pc, #148]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
 8002fdc:	e015      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCC_OscConfig+0x278>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fdee 	bl	8001bc4 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fec:	f7fe fdea 	bl	8001bc4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e193      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d036      	beq.n	8003084 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_RCC_OscConfig+0x27c>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe fdce 	bl	8001bc4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe fdca 	bl	8001bc4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e173      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8003040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x234>
 800304a:	e01b      	b.n	8003084 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_OscConfig+0x27c>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fe fdb7 	bl	8001bc4 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	e00e      	b.n	8003078 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305a:	f7fe fdb3 	bl	8001bc4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d907      	bls.n	8003078 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e15c      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
 800306c:	40023800 	.word	0x40023800
 8003070:	42470000 	.word	0x42470000
 8003074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	4b8a      	ldr	r3, [pc, #552]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800307a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ea      	bne.n	800305a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8097 	beq.w	80031c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	4b7f      	ldr	r3, [pc, #508]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a7e      	ldr	r2, [pc, #504]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	4b7c      	ldr	r3, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c2:	4b79      	ldr	r3, [pc, #484]	; (80032a8 <HAL_RCC_OscConfig+0x4b0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d118      	bne.n	8003100 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ce:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <HAL_RCC_OscConfig+0x4b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a75      	ldr	r2, [pc, #468]	; (80032a8 <HAL_RCC_OscConfig+0x4b0>)
 80030d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030da:	f7fe fd73 	bl	8001bc4 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e2:	f7fe fd6f 	bl	8001bc4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e118      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <HAL_RCC_OscConfig+0x4b0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d106      	bne.n	8003116 <HAL_RCC_OscConfig+0x31e>
 8003108:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6713      	str	r3, [r2, #112]	; 0x70
 8003114:	e01c      	b.n	8003150 <HAL_RCC_OscConfig+0x358>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b05      	cmp	r3, #5
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x340>
 800311e:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a60      	ldr	r2, [pc, #384]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003124:	f043 0304 	orr.w	r3, r3, #4
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	4b5e      	ldr	r3, [pc, #376]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a5d      	ldr	r2, [pc, #372]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0x358>
 8003138:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a59      	ldr	r2, [pc, #356]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
 8003144:	4b57      	ldr	r3, [pc, #348]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	f023 0304 	bic.w	r3, r3, #4
 800314e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fd34 	bl	8001bc4 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fe fd30 	bl	8001bc4 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e0d7      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003176:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ee      	beq.n	8003160 <HAL_RCC_OscConfig+0x368>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fd1e 	bl	8001bc4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fd1a 	bl	8001bc4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0c1      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a2:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ee      	bne.n	800318c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b4:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	4a3a      	ldr	r2, [pc, #232]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80ad 	beq.w	8003324 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ca:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d060      	beq.n	8003298 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d145      	bne.n	800326a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b33      	ldr	r3, [pc, #204]	; (80032ac <HAL_RCC_OscConfig+0x4b4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fcee 	bl	8001bc4 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe fcea 	bl	8001bc4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e093      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	019b      	lsls	r3, r3, #6
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	3b01      	subs	r3, #1
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	061b      	lsls	r3, r3, #24
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	491b      	ldr	r1, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x4b4>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fe fcbf 	bl	8001bc4 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fcbb 	bl	8001bc4 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e064      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x452>
 8003268:	e05c      	b.n	8003324 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCC_OscConfig+0x4b4>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fca8 	bl	8001bc4 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fca4 	bl	8001bc4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04d      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x480>
 8003296:	e045      	b.n	8003324 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e040      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b0:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <HAL_RCC_OscConfig+0x538>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d030      	beq.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d129      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d122      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d119      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d10f      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07b      	b.n	800343e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003356:	d009      	beq.n	800336c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
 800335e:	e005      	b.n	800336c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fe f904 	bl	8001594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	ea42 0103 	orr.w	r1, r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	f003 0104 	and.w	r1, r3, #4
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f003 0210 	and.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b088      	sub	sp, #32
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_SPI_Transmit+0x22>
 8003464:	2302      	movs	r3, #2
 8003466:	e126      	b.n	80036b6 <HAL_SPI_Transmit+0x270>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003470:	f7fe fba8 	bl	8001bc4 <HAL_GetTick>
 8003474:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d002      	beq.n	800348c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003486:	2302      	movs	r3, #2
 8003488:	77fb      	strb	r3, [r7, #31]
    goto error;
 800348a:	e10b      	b.n	80036a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0x52>
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800349c:	e102      	b.n	80036a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2203      	movs	r2, #3
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e4:	d10f      	bne.n	8003506 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d007      	beq.n	8003524 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352c:	d14b      	bne.n	80035c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_SPI_Transmit+0xf6>
 8003536:	8afb      	ldrh	r3, [r7, #22]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d13e      	bne.n	80035ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003560:	e02b      	b.n	80035ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b02      	cmp	r3, #2
 800356e:	d112      	bne.n	8003596 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	86da      	strh	r2, [r3, #54]	; 0x36
 8003594:	e011      	b.n	80035ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003596:	f7fe fb15 	bl	8001bc4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d803      	bhi.n	80035ae <HAL_SPI_Transmit+0x168>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d102      	bne.n	80035b4 <HAL_SPI_Transmit+0x16e>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035b8:	e074      	b.n	80036a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ce      	bne.n	8003562 <HAL_SPI_Transmit+0x11c>
 80035c4:	e04c      	b.n	8003660 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_SPI_Transmit+0x18e>
 80035ce:	8afb      	ldrh	r3, [r7, #22]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d140      	bne.n	8003656 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035fa:	e02c      	b.n	8003656 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d113      	bne.n	8003632 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003630:	e011      	b.n	8003656 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003632:	f7fe fac7 	bl	8001bc4 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d803      	bhi.n	800364a <HAL_SPI_Transmit+0x204>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d102      	bne.n	8003650 <HAL_SPI_Transmit+0x20a>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003654:	e026      	b.n	80036a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1cd      	bne.n	80035fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f8b3 	bl	80037d0 <SPI_EndRxTxTransaction>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e000      	b.n	80036a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80036a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036d0:	f7fe fa78 	bl	8001bc4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036e0:	f7fe fa70 	bl	8001bc4 <HAL_GetTick>
 80036e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	015b      	lsls	r3, r3, #5
 80036ec:	0d1b      	lsrs	r3, r3, #20
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f6:	e054      	b.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d050      	beq.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003700:	f7fe fa60 	bl	8001bc4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	429a      	cmp	r2, r3
 800370e:	d902      	bls.n	8003716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d13d      	bne.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372e:	d111      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003738:	d004      	beq.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003742:	d107      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375c:	d10f      	bne.n	800377e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800377c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e017      	b.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3b01      	subs	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4013      	ands	r3, r2
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d19b      	bne.n	80036f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000004 	.word	0x20000004

080037d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <SPI_EndRxTxTransaction+0x7c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <SPI_EndRxTxTransaction+0x80>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0d5b      	lsrs	r3, r3, #21
 80037e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fa:	d112      	bne.n	8003822 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2200      	movs	r2, #0
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff ff5a 	bl	80036c0 <SPI_WaitFlagStateUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e00f      	b.n	8003842 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	3b01      	subs	r3, #1
 800382c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d0f2      	beq.n	8003822 <SPI_EndRxTxTransaction+0x52>
 800383c:	e000      	b.n	8003840 <SPI_EndRxTxTransaction+0x70>
        break;
 800383e:	bf00      	nop
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000004 	.word	0x20000004
 8003850:	165e9f81 	.word	0x165e9f81

08003854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe f860 	bl	8001940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fac4 	bl	8003e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e04e      	b.n	80039aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d01d      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_TIM_Base_Start_IT+0xc8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d111      	bne.n	8003998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b06      	cmp	r3, #6
 8003984:	d010      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	e007      	b.n	80039a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40001800 	.word	0x40001800

080039d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <HAL_TIM_Base_Stop_IT+0x48>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	f240 4344 	movw	r3, #1092	; 0x444
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_Base_Stop_IT+0x48>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d122      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d11b      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f06f 0202 	mvn.w	r2, #2
 8003a5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f9b5 	bl	8003de4 <HAL_TIM_IC_CaptureCallback>
 8003a7a:	e005      	b.n	8003a88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f9a7 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9b8 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d122      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f06f 0204 	mvn.w	r2, #4
 8003ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f98b 	bl	8003de4 <HAL_TIM_IC_CaptureCallback>
 8003ace:	e005      	b.n	8003adc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f97d 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f98e 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d122      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d11b      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f06f 0208 	mvn.w	r2, #8
 8003b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f961 	bl	8003de4 <HAL_TIM_IC_CaptureCallback>
 8003b22:	e005      	b.n	8003b30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f953 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f964 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d122      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d11b      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0210 	mvn.w	r2, #16
 8003b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f937 	bl	8003de4 <HAL_TIM_IC_CaptureCallback>
 8003b76:	e005      	b.n	8003b84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f929 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f93a 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10e      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d107      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0201 	mvn.w	r2, #1
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fd fc73 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b80      	cmp	r3, #128	; 0x80
 8003bc2:	d10e      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d107      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fadf 	bl	80041a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d10e      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d107      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8ff 	bl	8003e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d10e      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d107      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f06f 0220 	mvn.w	r2, #32
 8003c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 faa9 	bl	800418c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_TIM_ConfigClockSource+0x1c>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0b4      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x186>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c96:	d03e      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0xd4>
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9c:	f200 8087 	bhi.w	8003dae <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	f000 8086 	beq.w	8003db4 <HAL_TIM_ConfigClockSource+0x172>
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cac:	d87f      	bhi.n	8003dae <HAL_TIM_ConfigClockSource+0x16c>
 8003cae:	2b70      	cmp	r3, #112	; 0x70
 8003cb0:	d01a      	beq.n	8003ce8 <HAL_TIM_ConfigClockSource+0xa6>
 8003cb2:	2b70      	cmp	r3, #112	; 0x70
 8003cb4:	d87b      	bhi.n	8003dae <HAL_TIM_ConfigClockSource+0x16c>
 8003cb6:	2b60      	cmp	r3, #96	; 0x60
 8003cb8:	d050      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0x11a>
 8003cba:	2b60      	cmp	r3, #96	; 0x60
 8003cbc:	d877      	bhi.n	8003dae <HAL_TIM_ConfigClockSource+0x16c>
 8003cbe:	2b50      	cmp	r3, #80	; 0x50
 8003cc0:	d03c      	beq.n	8003d3c <HAL_TIM_ConfigClockSource+0xfa>
 8003cc2:	2b50      	cmp	r3, #80	; 0x50
 8003cc4:	d873      	bhi.n	8003dae <HAL_TIM_ConfigClockSource+0x16c>
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d058      	beq.n	8003d7c <HAL_TIM_ConfigClockSource+0x13a>
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d86f      	bhi.n	8003dae <HAL_TIM_ConfigClockSource+0x16c>
 8003cce:	2b30      	cmp	r3, #48	; 0x30
 8003cd0:	d064      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0x15a>
 8003cd2:	2b30      	cmp	r3, #48	; 0x30
 8003cd4:	d86b      	bhi.n	8003dae <HAL_TIM_ConfigClockSource+0x16c>
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d060      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0x15a>
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d867      	bhi.n	8003dae <HAL_TIM_ConfigClockSource+0x16c>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d05c      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0x15a>
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d05a      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0x15a>
 8003ce6:	e062      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6899      	ldr	r1, [r3, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f000 f9ac 	bl	8004054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
      break;
 8003d14:	e04f      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6899      	ldr	r1, [r3, #8]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f000 f995 	bl	8004054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d38:	609a      	str	r2, [r3, #8]
      break;
 8003d3a:	e03c      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f000 f909 	bl	8003f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2150      	movs	r1, #80	; 0x50
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f962 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003d5a:	e02c      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f000 f928 	bl	8003fbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2160      	movs	r1, #96	; 0x60
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f952 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003d7a:	e01c      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f000 f8e9 	bl	8003f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2140      	movs	r1, #64	; 0x40
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f942 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003d9a:	e00c      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f000 f939 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003dac:	e003      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      break;
 8003db2:	e000      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003db4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <TIM_Base_SetConfig+0x114>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3e:	d00f      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3d      	ldr	r2, [pc, #244]	; (8003f38 <TIM_Base_SetConfig+0x118>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3c      	ldr	r2, [pc, #240]	; (8003f3c <TIM_Base_SetConfig+0x11c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <TIM_Base_SetConfig+0x120>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <TIM_Base_SetConfig+0x124>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d108      	bne.n	8003e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2f      	ldr	r2, [pc, #188]	; (8003f34 <TIM_Base_SetConfig+0x114>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02b      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e80:	d027      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <TIM_Base_SetConfig+0x118>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d023      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2b      	ldr	r2, [pc, #172]	; (8003f3c <TIM_Base_SetConfig+0x11c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01f      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <TIM_Base_SetConfig+0x120>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01b      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a29      	ldr	r2, [pc, #164]	; (8003f44 <TIM_Base_SetConfig+0x124>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d017      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <TIM_Base_SetConfig+0x128>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a27      	ldr	r2, [pc, #156]	; (8003f4c <TIM_Base_SetConfig+0x12c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00f      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <TIM_Base_SetConfig+0x130>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a25      	ldr	r2, [pc, #148]	; (8003f54 <TIM_Base_SetConfig+0x134>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <TIM_Base_SetConfig+0x138>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <TIM_Base_SetConfig+0x13c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <TIM_Base_SetConfig+0x114>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_Base_SetConfig+0xf8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a0c      	ldr	r2, [pc, #48]	; (8003f44 <TIM_Base_SetConfig+0x124>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d103      	bne.n	8003f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	615a      	str	r2, [r3, #20]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40010400 	.word	0x40010400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40014400 	.word	0x40014400
 8003f50:	40014800 	.word	0x40014800
 8003f54:	40001800 	.word	0x40001800
 8003f58:	40001c00 	.word	0x40001c00
 8003f5c:	40002000 	.word	0x40002000

08003f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 030a 	bic.w	r3, r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 0210 	bic.w	r2, r3, #16
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ffa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	f043 0307 	orr.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800406e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	431a      	orrs	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4313      	orrs	r3, r2
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e05a      	b.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a21      	ldr	r2, [pc, #132]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d022      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d01d      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d018      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00e      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a15      	ldr	r2, [pc, #84]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10c      	bne.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	4313      	orrs	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800
 800417c:	40000c00 	.word	0x40000c00
 8004180:	40010400 	.word	0x40010400
 8004184:	40014000 	.word	0x40014000
 8004188:	40001800 	.word	0x40001800

0800418c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e03f      	b.n	8004246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fd fc1a 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f929 	bl	8004450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800420c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800421c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800422c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b08a      	sub	sp, #40	; 0x28
 8004252:	af02      	add	r7, sp, #8
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b20      	cmp	r3, #32
 800426c:	d17c      	bne.n	8004368 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_UART_Transmit+0x2c>
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e075      	b.n	800436a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_UART_Transmit+0x3e>
 8004288:	2302      	movs	r3, #2
 800428a:	e06e      	b.n	800436a <HAL_UART_Transmit+0x11c>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2221      	movs	r2, #33	; 0x21
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042a2:	f7fd fc8f 	bl	8001bc4 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	88fa      	ldrh	r2, [r7, #6]
 80042b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d108      	bne.n	80042d0 <HAL_UART_Transmit+0x82>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e003      	b.n	80042d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042e0:	e02a      	b.n	8004338 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f840 	bl	8004372 <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e036      	b.n	800436a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	3302      	adds	r3, #2
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e007      	b.n	800432a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	3301      	adds	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1cf      	bne.n	80042e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	2140      	movs	r1, #64	; 0x40
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f810 	bl	8004372 <UART_WaitOnFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e006      	b.n	800436a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b090      	sub	sp, #64	; 0x40
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004382:	e050      	b.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d04c      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800438c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004392:	f7fd fc17 	bl	8001bc4 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800439e:	429a      	cmp	r2, r3
 80043a0:	d241      	bcs.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043c2:	637a      	str	r2, [r7, #52]	; 0x34
 80043c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e5      	bne.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3314      	adds	r3, #20
 80043dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	613b      	str	r3, [r7, #16]
   return(result);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3314      	adds	r3, #20
 80043f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f6:	623a      	str	r2, [r7, #32]
 80043f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	69f9      	ldr	r1, [r7, #28]
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	61bb      	str	r3, [r7, #24]
   return(result);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e5      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e00f      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	429a      	cmp	r2, r3
 8004442:	d09f      	beq.n	8004384 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3740      	adds	r7, #64	; 0x40
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004454:	b09f      	sub	sp, #124	; 0x7c
 8004456:	af00      	add	r7, sp, #0
 8004458:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004466:	68d9      	ldr	r1, [r3, #12]
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	ea40 0301 	orr.w	r3, r0, r1
 8004470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	431a      	orrs	r2, r3
 800447c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	431a      	orrs	r2, r3
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	4313      	orrs	r3, r2
 8004488:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800448a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004494:	f021 010c 	bic.w	r1, r1, #12
 8004498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800449e:	430b      	orrs	r3, r1
 80044a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ae:	6999      	ldr	r1, [r3, #24]
 80044b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	ea40 0301 	orr.w	r3, r0, r1
 80044b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4bc5      	ldr	r3, [pc, #788]	; (80047d4 <UART_SetConfig+0x384>)
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d004      	beq.n	80044ce <UART_SetConfig+0x7e>
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4bc3      	ldr	r3, [pc, #780]	; (80047d8 <UART_SetConfig+0x388>)
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d103      	bne.n	80044d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044ce:	f7fe fb23 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 80044d2:	6778      	str	r0, [r7, #116]	; 0x74
 80044d4:	e002      	b.n	80044dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044d6:	f7fe fb0b 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 80044da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e4:	f040 80b6 	bne.w	8004654 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ea:	461c      	mov	r4, r3
 80044ec:	f04f 0500 	mov.w	r5, #0
 80044f0:	4622      	mov	r2, r4
 80044f2:	462b      	mov	r3, r5
 80044f4:	1891      	adds	r1, r2, r2
 80044f6:	6439      	str	r1, [r7, #64]	; 0x40
 80044f8:	415b      	adcs	r3, r3
 80044fa:	647b      	str	r3, [r7, #68]	; 0x44
 80044fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004500:	1912      	adds	r2, r2, r4
 8004502:	eb45 0303 	adc.w	r3, r5, r3
 8004506:	f04f 0000 	mov.w	r0, #0
 800450a:	f04f 0100 	mov.w	r1, #0
 800450e:	00d9      	lsls	r1, r3, #3
 8004510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004514:	00d0      	lsls	r0, r2, #3
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	1911      	adds	r1, r2, r4
 800451c:	6639      	str	r1, [r7, #96]	; 0x60
 800451e:	416b      	adcs	r3, r5
 8004520:	667b      	str	r3, [r7, #100]	; 0x64
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	461a      	mov	r2, r3
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	1891      	adds	r1, r2, r2
 800452e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004530:	415b      	adcs	r3, r3
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004538:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800453c:	f7fc fbf4 	bl	8000d28 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4ba5      	ldr	r3, [pc, #660]	; (80047dc <UART_SetConfig+0x38c>)
 8004546:	fba3 2302 	umull	r2, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	011e      	lsls	r6, r3, #4
 800454e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004550:	461c      	mov	r4, r3
 8004552:	f04f 0500 	mov.w	r5, #0
 8004556:	4622      	mov	r2, r4
 8004558:	462b      	mov	r3, r5
 800455a:	1891      	adds	r1, r2, r2
 800455c:	6339      	str	r1, [r7, #48]	; 0x30
 800455e:	415b      	adcs	r3, r3
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
 8004562:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004566:	1912      	adds	r2, r2, r4
 8004568:	eb45 0303 	adc.w	r3, r5, r3
 800456c:	f04f 0000 	mov.w	r0, #0
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	00d9      	lsls	r1, r3, #3
 8004576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800457a:	00d0      	lsls	r0, r2, #3
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	1911      	adds	r1, r2, r4
 8004582:	65b9      	str	r1, [r7, #88]	; 0x58
 8004584:	416b      	adcs	r3, r5
 8004586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	461a      	mov	r2, r3
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	1891      	adds	r1, r2, r2
 8004594:	62b9      	str	r1, [r7, #40]	; 0x28
 8004596:	415b      	adcs	r3, r3
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800459e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045a2:	f7fc fbc1 	bl	8000d28 <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4b8c      	ldr	r3, [pc, #560]	; (80047dc <UART_SetConfig+0x38c>)
 80045ac:	fba3 1302 	umull	r1, r3, r3, r2
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	2164      	movs	r1, #100	; 0x64
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	3332      	adds	r3, #50	; 0x32
 80045be:	4a87      	ldr	r2, [pc, #540]	; (80047dc <UART_SetConfig+0x38c>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045cc:	441e      	add	r6, r3
 80045ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d0:	4618      	mov	r0, r3
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	1894      	adds	r4, r2, r2
 80045dc:	623c      	str	r4, [r7, #32]
 80045de:	415b      	adcs	r3, r3
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045e6:	1812      	adds	r2, r2, r0
 80045e8:	eb41 0303 	adc.w	r3, r1, r3
 80045ec:	f04f 0400 	mov.w	r4, #0
 80045f0:	f04f 0500 	mov.w	r5, #0
 80045f4:	00dd      	lsls	r5, r3, #3
 80045f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045fa:	00d4      	lsls	r4, r2, #3
 80045fc:	4622      	mov	r2, r4
 80045fe:	462b      	mov	r3, r5
 8004600:	1814      	adds	r4, r2, r0
 8004602:	653c      	str	r4, [r7, #80]	; 0x50
 8004604:	414b      	adcs	r3, r1
 8004606:	657b      	str	r3, [r7, #84]	; 0x54
 8004608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	461a      	mov	r2, r3
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	1891      	adds	r1, r2, r2
 8004614:	61b9      	str	r1, [r7, #24]
 8004616:	415b      	adcs	r3, r3
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800461e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004622:	f7fc fb81 	bl	8000d28 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4b6c      	ldr	r3, [pc, #432]	; (80047dc <UART_SetConfig+0x38c>)
 800462c:	fba3 1302 	umull	r1, r3, r3, r2
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	2164      	movs	r1, #100	; 0x64
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	3332      	adds	r3, #50	; 0x32
 800463e:	4a67      	ldr	r2, [pc, #412]	; (80047dc <UART_SetConfig+0x38c>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	f003 0207 	and.w	r2, r3, #7
 800464a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4432      	add	r2, r6
 8004650:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004652:	e0b9      	b.n	80047c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004656:	461c      	mov	r4, r3
 8004658:	f04f 0500 	mov.w	r5, #0
 800465c:	4622      	mov	r2, r4
 800465e:	462b      	mov	r3, r5
 8004660:	1891      	adds	r1, r2, r2
 8004662:	6139      	str	r1, [r7, #16]
 8004664:	415b      	adcs	r3, r3
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800466c:	1912      	adds	r2, r2, r4
 800466e:	eb45 0303 	adc.w	r3, r5, r3
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	00d9      	lsls	r1, r3, #3
 800467c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004680:	00d0      	lsls	r0, r2, #3
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	eb12 0804 	adds.w	r8, r2, r4
 800468a:	eb43 0905 	adc.w	r9, r3, r5
 800468e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4618      	mov	r0, r3
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	008b      	lsls	r3, r1, #2
 80046a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046a6:	0082      	lsls	r2, r0, #2
 80046a8:	4640      	mov	r0, r8
 80046aa:	4649      	mov	r1, r9
 80046ac:	f7fc fb3c 	bl	8000d28 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4b49      	ldr	r3, [pc, #292]	; (80047dc <UART_SetConfig+0x38c>)
 80046b6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	011e      	lsls	r6, r3, #4
 80046be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c0:	4618      	mov	r0, r3
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	1894      	adds	r4, r2, r2
 80046cc:	60bc      	str	r4, [r7, #8]
 80046ce:	415b      	adcs	r3, r3
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d6:	1812      	adds	r2, r2, r0
 80046d8:	eb41 0303 	adc.w	r3, r1, r3
 80046dc:	f04f 0400 	mov.w	r4, #0
 80046e0:	f04f 0500 	mov.w	r5, #0
 80046e4:	00dd      	lsls	r5, r3, #3
 80046e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ea:	00d4      	lsls	r4, r2, #3
 80046ec:	4622      	mov	r2, r4
 80046ee:	462b      	mov	r3, r5
 80046f0:	1814      	adds	r4, r2, r0
 80046f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80046f4:	414b      	adcs	r3, r1
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	008b      	lsls	r3, r1, #2
 800470c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004710:	0082      	lsls	r2, r0, #2
 8004712:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004716:	f7fc fb07 	bl	8000d28 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <UART_SetConfig+0x38c>)
 8004720:	fba3 1302 	umull	r1, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2164      	movs	r1, #100	; 0x64
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	3332      	adds	r3, #50	; 0x32
 8004732:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <UART_SetConfig+0x38c>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473e:	441e      	add	r6, r3
 8004740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004742:	4618      	mov	r0, r3
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	1894      	adds	r4, r2, r2
 800474e:	603c      	str	r4, [r7, #0]
 8004750:	415b      	adcs	r3, r3
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004758:	1812      	adds	r2, r2, r0
 800475a:	eb41 0303 	adc.w	r3, r1, r3
 800475e:	f04f 0400 	mov.w	r4, #0
 8004762:	f04f 0500 	mov.w	r5, #0
 8004766:	00dd      	lsls	r5, r3, #3
 8004768:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800476c:	00d4      	lsls	r4, r2, #3
 800476e:	4622      	mov	r2, r4
 8004770:	462b      	mov	r3, r5
 8004772:	eb12 0a00 	adds.w	sl, r2, r0
 8004776:	eb43 0b01 	adc.w	fp, r3, r1
 800477a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4618      	mov	r0, r3
 8004780:	f04f 0100 	mov.w	r1, #0
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	008b      	lsls	r3, r1, #2
 800478e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004792:	0082      	lsls	r2, r0, #2
 8004794:	4650      	mov	r0, sl
 8004796:	4659      	mov	r1, fp
 8004798:	f7fc fac6 	bl	8000d28 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <UART_SetConfig+0x38c>)
 80047a2:	fba3 1302 	umull	r1, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2164      	movs	r1, #100	; 0x64
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	; 0x32
 80047b4:	4a09      	ldr	r2, [pc, #36]	; (80047dc <UART_SetConfig+0x38c>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 020f 	and.w	r2, r3, #15
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4432      	add	r2, r6
 80047c6:	609a      	str	r2, [r3, #8]
}
 80047c8:	bf00      	nop
 80047ca:	377c      	adds	r7, #124	; 0x7c
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d2:	bf00      	nop
 80047d4:	40011000 	.word	0x40011000
 80047d8:	40011400 	.word	0x40011400
 80047dc:	51eb851f 	.word	0x51eb851f

080047e0 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 80047e6:	2304      	movs	r3, #4
 80047e8:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 80047ea:	e006      	b.n	80047fa <hx711_delay_us+0x1a>
  {
    delay--;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
    __NOP(); __NOP(); __NOP(); __NOP();
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
  while (delay > 0)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f5      	bne.n	80047ec <hx711_delay_us+0xc>
  }
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8004816:	e002      	b.n	800481e <hx711_lock+0x10>
    hx711_delay(1);
 8004818:	2001      	movs	r0, #1
 800481a:	f7fd f9df 	bl	8001bdc <HAL_Delay>
  while (hx711->lock)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	7d1b      	ldrb	r3, [r3, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f8      	bne.n	8004818 <hx711_lock+0xa>
  hx711->lock = 1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	751a      	strb	r2, [r3, #20]
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	751a      	strb	r2, [r3, #20]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b08a      	sub	sp, #40	; 0x28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7ff ffd5 	bl	800480e <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800487a:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 800487c:	f107 0314 	add.w	r3, r7, #20
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800488c:	2301      	movs	r3, #1
 800488e:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004894:	2302      	movs	r3, #2
 8004896:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	4619      	mov	r1, r3
 80048a2:	68b8      	ldr	r0, [r7, #8]
 80048a4:	f7fd fe54 	bl	8002550 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 80048ac:	2301      	movs	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80048b0:	2302      	movs	r3, #2
 80048b2:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 80048b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80048b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4619      	mov	r1, r3
 80048be:	6838      	ldr	r0, [r7, #0]
 80048c0:	f7fd fe46 	bl	8002550 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	891b      	ldrh	r3, [r3, #8]
 80048cc:	2201      	movs	r2, #1
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7fd ffea 	bl	80028a8 <HAL_GPIO_WritePin>
  hx711_delay(10);
 80048d4:	200a      	movs	r0, #10
 80048d6:	f7fd f981 	bl	8001bdc <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	891b      	ldrh	r3, [r3, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	4619      	mov	r1, r3
 80048e6:	f7fd ffdf 	bl	80028a8 <HAL_GPIO_WritePin>
  hx711_delay(10);
 80048ea:	200a      	movs	r0, #10
 80048ec:	f7fd f976 	bl	8001bdc <HAL_Delay>
  hx711_value(hx711);
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f80a 	bl	800490a <hx711_value>
  hx711_value(hx711);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f807 	bl	800490a <hx711_value>
  hx711_unlock(hx711);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff ff99 	bl	8004834 <hx711_unlock>
}
 8004902:	bf00      	nop
 8004904:	3728      	adds	r7, #40	; 0x28
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8004916:	f7fd f955 	bl	8001bc4 <HAL_GetTick>
 800491a:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800491c:	e00b      	b.n	8004936 <hx711_value+0x2c>
  {
    hx711_delay(1);
 800491e:	2001      	movs	r0, #1
 8004920:	f7fd f95c 	bl	8001bdc <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8004924:	f7fd f94e 	bl	8001bc4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b96      	cmp	r3, #150	; 0x96
 8004930:	d901      	bls.n	8004936 <hx711_value+0x2c>
      return 0;
 8004932:	2300      	movs	r3, #0
 8004934:	e055      	b.n	80049e2 <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	895b      	ldrh	r3, [r3, #10]
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f7fd ff99 	bl	8002878 <HAL_GPIO_ReadPin>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d0e8      	beq.n	800491e <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 800494c:	2300      	movs	r3, #0
 800494e:	74fb      	strb	r3, [r7, #19]
 8004950:	e02a      	b.n	80049a8 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	891b      	ldrh	r3, [r3, #8]
 800495a:	2201      	movs	r2, #1
 800495c:	4619      	mov	r1, r3
 800495e:	f7fd ffa3 	bl	80028a8 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8004962:	f7ff ff3d 	bl	80047e0 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	891b      	ldrh	r3, [r3, #8]
 800496e:	2200      	movs	r2, #0
 8004970:	4619      	mov	r1, r3
 8004972:	f7fd ff99 	bl	80028a8 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8004976:	f7ff ff33 	bl	80047e0 <hx711_delay_us>
    data = data << 1;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	895b      	ldrh	r3, [r3, #10]
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f7fd ff74 	bl	8002878 <HAL_GPIO_ReadPin>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d102      	bne.n	800499c <hx711_value+0x92>
      data ++;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	3301      	adds	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 800499c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	3301      	adds	r3, #1
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	74fb      	strb	r3, [r7, #19]
 80049a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80049ac:	2b17      	cmp	r3, #23
 80049ae:	ddd0      	ble.n	8004952 <hx711_value+0x48>
  }
  data = data ^ 0x800000;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80049b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	891b      	ldrh	r3, [r3, #8]
 80049c0:	2201      	movs	r2, #1
 80049c2:	4619      	mov	r1, r3
 80049c4:	f7fd ff70 	bl	80028a8 <HAL_GPIO_WritePin>
  hx711_delay_us();
 80049c8:	f7ff ff0a 	bl	80047e0 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	891b      	ldrh	r3, [r3, #8]
 80049d4:	2200      	movs	r2, #0
 80049d6:	4619      	mov	r1, r3
 80049d8:	f7fd ff66 	bl	80028a8 <HAL_GPIO_WritePin>
  hx711_delay_us();
 80049dc:	f7ff ff00 	bl	80047e0 <hx711_delay_us>
  return data;
 80049e0:	697b      	ldr	r3, [r7, #20]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 80049ea:	b5b0      	push	{r4, r5, r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	460b      	mov	r3, r1
 80049f4:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ff09 	bl	800480e <hx711_lock>
  int64_t  ave = 0;
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	81fb      	strh	r3, [r7, #14]
 8004a0c:	e013      	b.n	8004a36 <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff7b 	bl	800490a <hx711_value>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461a      	mov	r2, r3
 8004a18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004a1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a20:	1884      	adds	r4, r0, r2
 8004a22:	eb41 0503 	adc.w	r5, r1, r3
 8004a26:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 8004a2a:	2005      	movs	r0, #5
 8004a2c:	f7fd f8d6 	bl	8001bdc <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	3301      	adds	r3, #1
 8004a34:	81fb      	strh	r3, [r7, #14]
 8004a36:	89fa      	ldrh	r2, [r7, #14]
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3e7      	bcc.n	8004a0e <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a48:	f7fc f91e 	bl	8000c88 <__aeabi_ldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff feed 	bl	8004834 <hx711_unlock>
}
 8004a5a:	bf00      	nop
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bdb0      	pop	{r4, r5, r7, pc}
 8004a62:	0000      	movs	r0, r0
 8004a64:	0000      	movs	r0, r0
	...

08004a68 <hx711_weight>:
}
//#############################################################################################

char msgBuf[30];
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8004a68:	b5b0      	push	{r4, r5, r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff feca 	bl	800480e <hx711_lock>
  int64_t  ave = 0;
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	82fb      	strh	r3, [r7, #22]
 8004a8a:	e013      	b.n	8004ab4 <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ff3c 	bl	800490a <hx711_value>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004a9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a9e:	1884      	adds	r4, r0, r2
 8004aa0:	eb41 0503 	adc.w	r5, r1, r3
 8004aa4:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 8004aa8:	2005      	movs	r0, #5
 8004aaa:	f7fd f897 	bl	8001bdc <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8004aae:	8afb      	ldrh	r3, [r7, #22]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	82fb      	strh	r3, [r7, #22]
 8004ab4:	8afa      	ldrh	r2, [r7, #22]
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d3e7      	bcc.n	8004a8c <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 8004abc:	887a      	ldrh	r2, [r7, #2]
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ac6:	f7fc f8df 	bl	8000c88 <__aeabi_ldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4613      	mov	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	ed93 7a04 	vldr	s14, [r3, #16]
 8004ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aec:	edc7 7a03 	vstr	s15, [r7, #12]
  answer = (answer - 2333.4)*(-1);
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7fb fd49 	bl	8000588 <__aeabi_f2d>
 8004af6:	a31c      	add	r3, pc, #112	; (adr r3, 8004b68 <hx711_weight+0x100>)
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fbe4 	bl	80002c8 <__aeabi_dsub>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	f7fc f86e 	bl	8000be8 <__aeabi_d2f>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef1 7a67 	vneg.f32	s15, s15
 8004b16:	edc7 7a03 	vstr	s15, [r7, #12]
  answer = answer/3.29;
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7fb fd34 	bl	8000588 <__aeabi_f2d>
 8004b20:	a313      	add	r3, pc, #76	; (adr r3, 8004b70 <hx711_weight+0x108>)
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f7fb feb1 	bl	800088c <__aeabi_ddiv>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	f7fc f859 	bl	8000be8 <__aeabi_d2f>
 8004b36:	4603      	mov	r3, r0
 8004b38:	60fb      	str	r3, [r7, #12]
  sprintf(msgBuf,"Weight: %i \n\r", data); // fill message buffer
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4908      	ldr	r1, [pc, #32]	; (8004b60 <hx711_weight+0xf8>)
 8004b3e:	4809      	ldr	r0, [pc, #36]	; (8004b64 <hx711_weight+0xfc>)
 8004b40:	f001 fbdc 	bl	80062fc <siprintf>
  puts(msgBuf);
 8004b44:	4807      	ldr	r0, [pc, #28]	; (8004b64 <hx711_weight+0xfc>)
 8004b46:	f001 fbd1 	bl	80062ec <puts>
  hx711_unlock(hx711);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fe72 	bl	8004834 <hx711_unlock>
  return answer;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	ee07 3a90 	vmov	s15, r3
}
 8004b56:	eeb0 0a67 	vmov.f32	s0, s15
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b60:	08008790 	.word	0x08008790
 8004b64:	2000055c 	.word	0x2000055c
 8004b68:	cccccccd 	.word	0xcccccccd
 8004b6c:	40a23acc 	.word	0x40a23acc
 8004b70:	851eb852 	.word	0x851eb852
 8004b74:	400a51eb 	.word	0x400a51eb

08004b78 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	611a      	str	r2, [r3, #16]
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	f083 0301 	eor.w	r3, r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	4803      	ldr	r0, [pc, #12]	; (8004bbc <chipSelect+0x24>)
 8004bb0:	f7fd fe7a 	bl	80028a8 <HAL_GPIO_WritePin>
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40020400 	.word	0x40020400

08004bc0 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bd2:	4803      	ldr	r0, [pc, #12]	; (8004be0 <registerSelect+0x20>)
 8004bd4:	f7fd fe68 	bl	80028a8 <HAL_GPIO_WritePin>
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40020000 	.word	0x40020000

08004be4 <displayReset>:

static void displayReset(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7ff ffd5 	bl	8004b98 <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2140      	movs	r1, #64	; 0x40
 8004bf2:	4808      	ldr	r0, [pc, #32]	; (8004c14 <displayReset+0x30>)
 8004bf4:	f7fd fe58 	bl	80028a8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f7fc ffef 	bl	8001bdc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8004bfe:	2201      	movs	r2, #1
 8004c00:	2140      	movs	r1, #64	; 0x40
 8004c02:	4804      	ldr	r0, [pc, #16]	; (8004c14 <displayReset+0x30>)
 8004c04:	f7fd fe50 	bl	80028a8 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 8004c08:	2001      	movs	r0, #1
 8004c0a:	f7ff ffc5 	bl	8004b98 <chipSelect>
}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40020000 	.word	0x40020000

08004c18 <sendInstruction>:

static void sendInstruction(instruction command)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 8004c22:	2000      	movs	r0, #0
 8004c24:	f7ff ffcc 	bl	8004bc0 <registerSelect>
    chipSelect(true);
 8004c28:	2001      	movs	r0, #1
 8004c2a:	f7ff ffb5 	bl	8004b98 <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 8004c2e:	1df9      	adds	r1, r7, #7
 8004c30:	2301      	movs	r3, #1
 8004c32:	2201      	movs	r2, #1
 8004c34:	4804      	ldr	r0, [pc, #16]	; (8004c48 <sendInstruction+0x30>)
 8004c36:	f7fe fc06 	bl	8003446 <HAL_SPI_Transmit>
    chipSelect(false);
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f7ff ffac 	bl	8004b98 <chipSelect>
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000474 	.word	0x20000474

08004c4c <sendData>:


/*static*/ void sendData(uint8_t data)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 8004c56:	2001      	movs	r0, #1
 8004c58:	f7ff ffb2 	bl	8004bc0 <registerSelect>
    chipSelect(true);
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f7ff ff9b 	bl	8004b98 <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8004c62:	1df9      	adds	r1, r7, #7
 8004c64:	2301      	movs	r3, #1
 8004c66:	2201      	movs	r2, #1
 8004c68:	4804      	ldr	r0, [pc, #16]	; (8004c7c <sendData+0x30>)
 8004c6a:	f7fe fbec 	bl	8003446 <HAL_SPI_Transmit>
    chipSelect(false);
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f7ff ff92 	bl	8004b98 <chipSelect>
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000474 	.word	0x20000474

08004c80 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	2b3f      	cmp	r3, #63	; 0x3f
 8004c8e:	d806      	bhi.n	8004c9e <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8004c90:	2081      	movs	r0, #129	; 0x81
 8004c92:	f7ff ffc1 	bl	8004c18 <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ffbd 	bl	8004c18 <sendInstruction>
    }
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <lcd_init>:

void lcd_init(void)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	af00      	add	r7, sp, #0
    lcd_clear();
 8004caa:	f000 f857 	bl	8004d5c <lcd_clear>
    displayReset();
 8004cae:	f7ff ff99 	bl	8004be4 <displayReset>

    sendInstruction(ADC_NORMAL);
 8004cb2:	20a0      	movs	r0, #160	; 0xa0
 8004cb4:	f7ff ffb0 	bl	8004c18 <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8004cb8:	20ae      	movs	r0, #174	; 0xae
 8004cba:	f7ff ffad 	bl	8004c18 <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8004cbe:	20c8      	movs	r0, #200	; 0xc8
 8004cc0:	f7ff ffaa 	bl	8004c18 <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8004cc4:	20a2      	movs	r0, #162	; 0xa2
 8004cc6:	f7ff ffa7 	bl	8004c18 <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 8004cca:	202f      	movs	r0, #47	; 0x2f
 8004ccc:	f7ff ffa4 	bl	8004c18 <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 8004cd0:	2021      	movs	r0, #33	; 0x21
 8004cd2:	f7ff ffa1 	bl	8004c18 <sendInstruction>
    lcd_setContrast(40);
 8004cd6:	2028      	movs	r0, #40	; 0x28
 8004cd8:	f7ff ffd2 	bl	8004c80 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8004cdc:	20af      	movs	r0, #175	; 0xaf
 8004cde:	f7ff ff9b 	bl	8004c18 <sendInstruction>
}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	71fb      	strb	r3, [r7, #7]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	71bb      	strb	r3, [r7, #6]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 8004cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	db23      	blt.n	8004d4a <lcd_setPixel+0x62>
 8004d02:	79bb      	ldrb	r3, [r7, #6]
 8004d04:	2b1f      	cmp	r3, #31
 8004d06:	d820      	bhi.n	8004d4a <lcd_setPixel+0x62>
        if (pixelIsSet)
 8004d08:	797b      	ldrb	r3, [r7, #5]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <lcd_setPixel+0x70>)
 8004d12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d16:	79bb      	ldrb	r3, [r7, #6]
 8004d18:	2101      	movs	r1, #1
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	4619      	mov	r1, r3
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	490c      	ldr	r1, [pc, #48]	; (8004d58 <lcd_setPixel+0x70>)
 8004d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 8004d2a:	e00e      	b.n	8004d4a <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <lcd_setPixel+0x70>)
 8004d30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d34:	79bb      	ldrb	r3, [r7, #6]
 8004d36:	2101      	movs	r1, #1
 8004d38:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	4619      	mov	r1, r3
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	400a      	ands	r2, r1
 8004d44:	4904      	ldr	r1, [pc, #16]	; (8004d58 <lcd_setPixel+0x70>)
 8004d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	2000020c 	.word	0x2000020c

08004d5c <lcd_clear>:

void lcd_clear(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8004d62:	2300      	movs	r3, #0
 8004d64:	71fb      	strb	r3, [r7, #7]
 8004d66:	e007      	b.n	8004d78 <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <lcd_clear+0x34>)
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	3301      	adds	r3, #1
 8004d76:	71fb      	strb	r3, [r7, #7]
 8004d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	daf3      	bge.n	8004d68 <lcd_clear+0xc>
    }
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	2000020c 	.word	0x2000020c

08004d94 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	461a      	mov	r2, r3
 8004da2:	4623      	mov	r3, r4
 8004da4:	71fb      	strb	r3, [r7, #7]
 8004da6:	4603      	mov	r3, r0
 8004da8:	71bb      	strb	r3, [r7, #6]
 8004daa:	460b      	mov	r3, r1
 8004dac:	717b      	strb	r3, [r7, #5]
 8004dae:	4613      	mov	r3, r2
 8004db0:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8004db2:	797b      	ldrb	r3, [r7, #5]
 8004db4:	3b20      	subs	r3, #32
 8004db6:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e049      	b.n	8004e52 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73bb      	strb	r3, [r7, #14]
 8004dc2:	e03b      	b.n	8004e3c <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8004dc4:	797b      	ldrb	r3, [r7, #5]
 8004dc6:	793a      	ldrb	r2, [r7, #4]
 8004dc8:	4928      	ldr	r1, [pc, #160]	; (8004e6c <lcd_setChar+0xd8>)
 8004dca:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8004dce:	fb02 f203 	mul.w	r2, r2, r3
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4a26      	ldr	r2, [pc, #152]	; (8004e70 <lcd_setChar+0xdc>)
 8004dd8:	5cd3      	ldrb	r3, [r2, r3]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	7bbb      	ldrb	r3, [r7, #14]
 8004dde:	fa42 f303 	asr.w	r3, r2, r3
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d018      	beq.n	8004e1c <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 8004dea:	79fa      	ldrb	r2, [r7, #7]
 8004dec:	7bbb      	ldrb	r3, [r7, #14]
 8004dee:	4413      	add	r3, r2
 8004df0:	b2d8      	uxtb	r0, r3
 8004df2:	79ba      	ldrb	r2, [r7, #6]
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	4413      	add	r3, r2
 8004df8:	b2d9      	uxtb	r1, r3
 8004dfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f083 0301 	eor.w	r3, r3, #1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	f7ff ff67 	bl	8004ce8 <lcd_setPixel>
 8004e1a:	e00c      	b.n	8004e36 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 8004e1c:	79fa      	ldrb	r2, [r7, #7]
 8004e1e:	7bbb      	ldrb	r3, [r7, #14]
 8004e20:	4413      	add	r3, r2
 8004e22:	b2d8      	uxtb	r0, r3
 8004e24:	79ba      	ldrb	r2, [r7, #6]
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	4413      	add	r3, r2
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004e30:	4619      	mov	r1, r3
 8004e32:	f7ff ff59 	bl	8004ce8 <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8004e36:	7bbb      	ldrb	r3, [r7, #14]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	73bb      	strb	r3, [r7, #14]
 8004e3c:	793b      	ldrb	r3, [r7, #4]
 8004e3e:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <lcd_setChar+0xd8>)
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	785b      	ldrb	r3, [r3, #1]
 8004e46:	7bba      	ldrb	r2, [r7, #14]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d3bb      	bcc.n	8004dc4 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	793b      	ldrb	r3, [r7, #4]
 8004e54:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <lcd_setChar+0xd8>)
 8004e56:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004e5a:	7bfa      	ldrb	r2, [r7, #15]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d3ae      	bcc.n	8004dbe <lcd_setChar+0x2a>
        }
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	08008dcc 	.word	0x08008dcc
 8004e70:	08008a4c 	.word	0x08008a4c

08004e74 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	603a      	str	r2, [r7, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	71fb      	strb	r3, [r7, #7]
 8004e82:	460b      	mov	r3, r1
 8004e84:	71bb      	strb	r3, [r7, #6]
 8004e86:	4613      	mov	r3, r2
 8004e88:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 8004e8a:	797b      	ldrb	r3, [r7, #5]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11c      	bne.n	8004eca <lcd_setString+0x56>
 8004e90:	797b      	ldrb	r3, [r7, #5]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d819      	bhi.n	8004eca <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 8004e96:	e014      	b.n	8004ec2 <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	797c      	ldrb	r4, [r7, #5]
 8004e9e:	79b9      	ldrb	r1, [r7, #6]
 8004ea0:	79f8      	ldrb	r0, [r7, #7]
 8004ea2:	7e3b      	ldrb	r3, [r7, #24]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	f7ff ff74 	bl	8004d94 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8004eac:	797b      	ldrb	r3, [r7, #5]
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <lcd_setString+0x60>)
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	785a      	ldrb	r2, [r3, #1]
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	4413      	add	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e6      	bne.n	8004e98 <lcd_setString+0x24>
        }
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd90      	pop	{r4, r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08008dcc 	.word	0x08008dcc

08004ed8 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8004ed8:	b590      	push	{r4, r7, lr}
 8004eda:	b08b      	sub	sp, #44	; 0x2c
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	81fb      	strh	r3, [r7, #14]
 8004eea:	4603      	mov	r3, r0
 8004eec:	81bb      	strh	r3, [r7, #12]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	817b      	strh	r3, [r7, #10]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 8004ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f02:	edc7 7a08 	vstr	s15, [r7, #32]
 8004f06:	2300      	movs	r3, #0
 8004f08:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 8004f0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f16:	edc7 7a07 	vstr	s15, [r7, #28]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 8004f1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bfb8      	it	lt
 8004f2c:	425b      	neglt	r3, r3
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 8004f32:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004f36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bfb8      	it	lt
 8004f40:	425b      	neglt	r3, r3
 8004f42:	b21b      	sxth	r3, r3
 8004f44:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 8004f46:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <lcd_setLine+0x8c>
 8004f4e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004f52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004f5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f60:	b21b      	sxth	r3, r3
 8004f62:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8004f64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <lcd_setLine+0xaa>
 8004f6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004f70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004f7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 8004f82:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004f86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	db5f      	blt.n	800504e <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 8004f8e:	2300      	movs	r3, #0
 8004f90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f92:	e055      	b.n	8005040 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8004f94:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa0:	db20      	blt.n	8004fe4 <lcd_setLine+0x10c>
 8004fa2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fae:	db19      	blt.n	8004fe4 <lcd_setLine+0x10c>
 8004fb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8004fbc:	793b      	ldrb	r3, [r7, #4]
 8004fbe:	b2d8      	uxtb	r0, r3
 8004fc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8004fcc:	793b      	ldrb	r3, [r7, #4]
 8004fce:	b2d9      	uxtb	r1, r3
 8004fd0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f7ff fe82 	bl	8004ce8 <lcd_setPixel>
			xF += x[1];
 8004fe4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004fe8:	ee07 3a90 	vmov	s15, r3
 8004fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ff0:	ed97 7a08 	vldr	s14, [r7, #32]
 8004ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff8:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8004ffc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005000:	ee07 3a90 	vmov	s15, r3
 8005004:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005008:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800500c:	ee07 3a90 	vmov	s15, r3
 8005010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005018:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800501c:	ee07 3a90 	vmov	s15, r3
 8005020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005028:	ed97 7a07 	vldr	s14, [r7, #28]
 800502c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005030:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 8005034:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005038:	b29b      	uxth	r3, r3
 800503a:	3301      	adds	r3, #1
 800503c:	b29b      	uxth	r3, r3
 800503e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005040:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005044:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005048:	429a      	cmp	r2, r3
 800504a:	dba3      	blt.n	8004f94 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 800504c:	e05e      	b.n	800510c <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 800504e:	2300      	movs	r3, #0
 8005050:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005052:	e055      	b.n	8005100 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8005054:	edd7 7a08 	vldr	s15, [r7, #32]
 8005058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	db20      	blt.n	80050a4 <lcd_setLine+0x1cc>
 8005062:	edd7 7a07 	vldr	s15, [r7, #28]
 8005066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	db19      	blt.n	80050a4 <lcd_setLine+0x1cc>
 8005070:	edd7 7a08 	vldr	s15, [r7, #32]
 8005074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005078:	edc7 7a01 	vstr	s15, [r7, #4]
 800507c:	793b      	ldrb	r3, [r7, #4]
 800507e:	b2d8      	uxtb	r0, r3
 8005080:	edd7 7a07 	vldr	s15, [r7, #28]
 8005084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005088:	edc7 7a01 	vstr	s15, [r7, #4]
 800508c:	793b      	ldrb	r3, [r7, #4]
 800508e:	b2d9      	uxtb	r1, r3
 8005090:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	f7ff fe22 	bl	8004ce8 <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 80050a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80050a8:	ee07 3a90 	vmov	s15, r3
 80050ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80050d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d8:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 80050dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80050ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f0:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 80050f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3301      	adds	r3, #1
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005100:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005104:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005108:	429a      	cmp	r2, r3
 800510a:	dba3      	blt.n	8005054 <lcd_setLine+0x17c>
}
 800510c:	bf00      	nop
 800510e:	372c      	adds	r7, #44	; 0x2c
 8005110:	46bd      	mov	sp, r7
 8005112:	bd90      	pop	{r4, r7, pc}

08005114 <lcd_show>:

void lcd_show(void){
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 800511a:	2300      	movs	r3, #0
 800511c:	71fb      	strb	r3, [r7, #7]
 800511e:	e022      	b.n	8005166 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	3b50      	subs	r3, #80	; 0x50
 8005124:	b2db      	uxtb	r3, r3
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fd76 	bl	8004c18 <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 800512c:	2010      	movs	r0, #16
 800512e:	f7ff fd73 	bl	8004c18 <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 8005132:	2000      	movs	r0, #0
 8005134:	f7ff fd70 	bl	8004c18 <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8005138:	2300      	movs	r3, #0
 800513a:	71bb      	strb	r3, [r7, #6]
 800513c:	e00c      	b.n	8005158 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 800513e:	79ba      	ldrb	r2, [r7, #6]
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	490d      	ldr	r1, [pc, #52]	; (8005178 <lcd_show+0x64>)
 8005144:	0092      	lsls	r2, r2, #2
 8005146:	440a      	add	r2, r1
 8005148:	4413      	add	r3, r2
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fd7d 	bl	8004c4c <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8005152:	79bb      	ldrb	r3, [r7, #6]
 8005154:	3301      	adds	r3, #1
 8005156:	71bb      	strb	r3, [r7, #6]
 8005158:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800515c:	2b00      	cmp	r3, #0
 800515e:	daee      	bge.n	800513e <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	3301      	adds	r3, #1
 8005164:	71fb      	strb	r3, [r7, #7]
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d9d9      	bls.n	8005120 <lcd_show+0xc>
    }
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	2000020c 	.word	0x2000020c

0800517c <lcd_setBar>:
        lcd_setPixel(columnCounter, yPositionUL, true);
    }
}

void lcd_setBar(uint8_t xPositionUL, uint8_t yPositionUL, uint8_t xPositionDR, uint8_t yPositionDR)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	4604      	mov	r4, r0
 8005184:	4608      	mov	r0, r1
 8005186:	4611      	mov	r1, r2
 8005188:	461a      	mov	r2, r3
 800518a:	4623      	mov	r3, r4
 800518c:	71fb      	strb	r3, [r7, #7]
 800518e:	4603      	mov	r3, r0
 8005190:	71bb      	strb	r3, [r7, #6]
 8005192:	460b      	mov	r3, r1
 8005194:	717b      	strb	r3, [r7, #5]
 8005196:	4613      	mov	r3, r2
 8005198:	713b      	strb	r3, [r7, #4]
    for (uint8_t rowCounter = yPositionUL; rowCounter <= yPositionDR; rowCounter++)
 800519a:	79bb      	ldrb	r3, [r7, #6]
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e012      	b.n	80051c6 <lcd_setBar+0x4a>
        for (uint8_t columnCounter = xPositionUL; columnCounter <= xPositionDR; columnCounter++)
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	73bb      	strb	r3, [r7, #14]
 80051a4:	e008      	b.n	80051b8 <lcd_setBar+0x3c>
            lcd_setPixel(columnCounter, rowCounter, true);
 80051a6:	7bf9      	ldrb	r1, [r7, #15]
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	2201      	movs	r2, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fd9b 	bl	8004ce8 <lcd_setPixel>
        for (uint8_t columnCounter = xPositionUL; columnCounter <= xPositionDR; columnCounter++)
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	3301      	adds	r3, #1
 80051b6:	73bb      	strb	r3, [r7, #14]
 80051b8:	7bba      	ldrb	r2, [r7, #14]
 80051ba:	797b      	ldrb	r3, [r7, #5]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d9f2      	bls.n	80051a6 <lcd_setBar+0x2a>
    for (uint8_t rowCounter = yPositionUL; rowCounter <= yPositionDR; rowCounter++)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	3301      	adds	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	793b      	ldrb	r3, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d9e8      	bls.n	80051a0 <lcd_setBar+0x24>

}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd90      	pop	{r4, r7, pc}

080051d8 <welcome_display>:

char msgBuf1[30];
char glass[10];
char size;

void welcome_display(void){
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af02      	add	r7, sp, #8
	lcd_clear();
 80051de:	f7ff fdbd 	bl	8004d5c <lcd_clear>
	lcd_setString(4, 4, "WELCOME!", LCD_FONT_8, false);
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	4a06      	ldr	r2, [pc, #24]	; (8005204 <welcome_display+0x2c>)
 80051ea:	2104      	movs	r1, #4
 80051ec:	2004      	movs	r0, #4
 80051ee:	f7ff fe41 	bl	8004e74 <lcd_setString>
	lcd_show();
 80051f2:	f7ff ff8f 	bl	8005114 <lcd_show>
	HAL_Delay(3000);
 80051f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80051fa:	f7fc fcef 	bl	8001bdc <HAL_Delay>
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	080087a0 	.word	0x080087a0

08005208 <menu1_display>:

void menu1_display(void){
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af02      	add	r7, sp, #8
	lcd_clear();
 800520e:	f7ff fda5 	bl	8004d5c <lcd_clear>
	lcd_setString(4, 4, "To continue", LCD_FONT_8, false);
 8005212:	2300      	movs	r3, #0
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	2300      	movs	r3, #0
 8005218:	4a08      	ldr	r2, [pc, #32]	; (800523c <menu1_display+0x34>)
 800521a:	2104      	movs	r1, #4
 800521c:	2004      	movs	r0, #4
 800521e:	f7ff fe29 	bl	8004e74 <lcd_setString>
	lcd_setString(4, 16, "press joystick!", LCD_FONT_8, false);
 8005222:	2300      	movs	r3, #0
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	2300      	movs	r3, #0
 8005228:	4a05      	ldr	r2, [pc, #20]	; (8005240 <menu1_display+0x38>)
 800522a:	2110      	movs	r1, #16
 800522c:	2004      	movs	r0, #4
 800522e:	f7ff fe21 	bl	8004e74 <lcd_setString>
	lcd_show();
 8005232:	f7ff ff6f 	bl	8005114 <lcd_show>
}
 8005236:	bf00      	nop
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	080087ac 	.word	0x080087ac
 8005240:	080087b8 	.word	0x080087b8

08005244 <menu2_display>:

void menu2_display(void){
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af02      	add	r7, sp, #8
	lcd_clear();
 800524a:	f7ff fd87 	bl	8004d5c <lcd_clear>
	lcd_setString(4, 4, "Place the glass", LCD_FONT_8, false);
 800524e:	2300      	movs	r3, #0
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	2300      	movs	r3, #0
 8005254:	4a08      	ldr	r2, [pc, #32]	; (8005278 <menu2_display+0x34>)
 8005256:	2104      	movs	r1, #4
 8005258:	2004      	movs	r0, #4
 800525a:	f7ff fe0b 	bl	8004e74 <lcd_setString>
	lcd_setString(4, 16, "on the scale", LCD_FONT_8, false);
 800525e:	2300      	movs	r3, #0
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	4a05      	ldr	r2, [pc, #20]	; (800527c <menu2_display+0x38>)
 8005266:	2110      	movs	r1, #16
 8005268:	2004      	movs	r0, #4
 800526a:	f7ff fe03 	bl	8004e74 <lcd_setString>
	lcd_show();
 800526e:	f7ff ff51 	bl	8005114 <lcd_show>
}
 8005272:	bf00      	nop
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	080087c8 	.word	0x080087c8
 800527c:	080087d8 	.word	0x080087d8

08005280 <menu3_display>:

// which glass has been chosen
char menu3_display(int weight){
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
	if (weight > 190){
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2bbe      	cmp	r3, #190	; 0xbe
 800528c:	dd07      	ble.n	800529e <menu3_display+0x1e>
		sprintf(glass, "Big");
 800528e:	4914      	ldr	r1, [pc, #80]	; (80052e0 <menu3_display+0x60>)
 8005290:	4814      	ldr	r0, [pc, #80]	; (80052e4 <menu3_display+0x64>)
 8005292:	f001 f833 	bl	80062fc <siprintf>
		size = 1;
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <menu3_display+0x68>)
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e006      	b.n	80052ac <menu3_display+0x2c>
	}
	else{
		sprintf(glass, "Small");
 800529e:	4913      	ldr	r1, [pc, #76]	; (80052ec <menu3_display+0x6c>)
 80052a0:	4810      	ldr	r0, [pc, #64]	; (80052e4 <menu3_display+0x64>)
 80052a2:	f001 f82b 	bl	80062fc <siprintf>
		size = 0;
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <menu3_display+0x68>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
	}
	lcd_clear();
 80052ac:	f7ff fd56 	bl	8004d5c <lcd_clear>
	lcd_setString(4, 4, "Glass chosen:", LCD_FONT_8, false);
 80052b0:	2300      	movs	r3, #0
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2300      	movs	r3, #0
 80052b6:	4a0e      	ldr	r2, [pc, #56]	; (80052f0 <menu3_display+0x70>)
 80052b8:	2104      	movs	r1, #4
 80052ba:	2004      	movs	r0, #4
 80052bc:	f7ff fdda 	bl	8004e74 <lcd_setString>
	lcd_setString(4, 16, glass, LCD_FONT_8, false);
 80052c0:	2300      	movs	r3, #0
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	4a07      	ldr	r2, [pc, #28]	; (80052e4 <menu3_display+0x64>)
 80052c8:	2110      	movs	r1, #16
 80052ca:	2004      	movs	r0, #4
 80052cc:	f7ff fdd2 	bl	8004e74 <lcd_setString>
	lcd_show();
 80052d0:	f7ff ff20 	bl	8005114 <lcd_show>
	return size;
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <menu3_display+0x68>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	080087e8 	.word	0x080087e8
 80052e4:	2000057c 	.word	0x2000057c
 80052e8:	20000468 	.word	0x20000468
 80052ec:	080087ec 	.word	0x080087ec
 80052f0:	080087f4 	.word	0x080087f4

080052f4 <menu4_display>:


void menu4_display(int value){
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	6078      	str	r0, [r7, #4]
	lcd_clear();
 80052fc:	f7ff fd2e 	bl	8004d5c <lcd_clear>
	sprintf(msgBuf1,"%d%% sirup chosen", value); 			// fill message buffer
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4909      	ldr	r1, [pc, #36]	; (8005328 <menu4_display+0x34>)
 8005304:	4809      	ldr	r0, [pc, #36]	; (800532c <menu4_display+0x38>)
 8005306:	f000 fff9 	bl	80062fc <siprintf>
	lcd_setString(4, 1, msgBuf1, LCD_FONT_8, false); 		// LCD message
 800530a:	2300      	movs	r3, #0
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	2300      	movs	r3, #0
 8005310:	4a06      	ldr	r2, [pc, #24]	; (800532c <menu4_display+0x38>)
 8005312:	2101      	movs	r1, #1
 8005314:	2004      	movs	r0, #4
 8005316:	f7ff fdad 	bl	8004e74 <lcd_setString>
	lcd_show();
 800531a:	f7ff fefb 	bl	8005114 <lcd_show>
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	08008804 	.word	0x08008804
 800532c:	20000588 	.word	0x20000588

08005330 <potiInit>:
#include "math.h"
#include "lcd_driver.h"

char msgBuf1[30]; 	// Prepare buffer for message

HAL_StatusTypeDef potiInit(void){
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
	return HAL_ADC_Start(&hadc1);
 8005334:	4802      	ldr	r0, [pc, #8]	; (8005340 <potiInit+0x10>)
 8005336:	f7fc fcb9 	bl	8001cac <HAL_ADC_Start>
 800533a:	4603      	mov	r3, r0
}
 800533c:	4618      	mov	r0, r3
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000414 	.word	0x20000414

08005344 <potiRead>:


HAL_StatusTypeDef potiRead(uint16_t* value){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	if(potiInit() == HAL_OK){
 800534c:	f7ff fff0 	bl	8005330 <potiInit>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d108      	bne.n	8005368 <potiRead+0x24>
		*value = HAL_ADC_GetValue(&hadc1);
 8005356:	4807      	ldr	r0, [pc, #28]	; (8005374 <potiRead+0x30>)
 8005358:	f7fc fdad 	bl	8001eb6 <HAL_ADC_GetValue>
 800535c:	4603      	mov	r3, r0
 800535e:	b29a      	uxth	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	801a      	strh	r2, [r3, #0]
		return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <potiRead+0x26>
	}
	else
		return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000414 	.word	0x20000414

08005378 <potiPrint>:

char msgBuf1[30]; 	// Prepare buffer for message
int new_value;

int potiPrint(uint16_t* value){
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af02      	add	r7, sp, #8
 800537e:	6078      	str	r0, [r7, #4]
	lcd_clear();
 8005380:	f7ff fcec 	bl	8004d5c <lcd_clear>
	lcd_setLine(12, 15, 12, 25, 1);
 8005384:	2301      	movs	r3, #1
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	2319      	movs	r3, #25
 800538a:	220c      	movs	r2, #12
 800538c:	210f      	movs	r1, #15
 800538e:	200c      	movs	r0, #12
 8005390:	f7ff fda2 	bl	8004ed8 <lcd_setLine>
	lcd_setLine(12, 15, 115, 15, 1);
 8005394:	2301      	movs	r3, #1
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	230f      	movs	r3, #15
 800539a:	2273      	movs	r2, #115	; 0x73
 800539c:	210f      	movs	r1, #15
 800539e:	200c      	movs	r0, #12
 80053a0:	f7ff fd9a 	bl	8004ed8 <lcd_setLine>
	lcd_setLine(12, 25, 116, 25, 1);
 80053a4:	2301      	movs	r3, #1
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	2319      	movs	r3, #25
 80053aa:	2274      	movs	r2, #116	; 0x74
 80053ac:	2119      	movs	r1, #25
 80053ae:	200c      	movs	r0, #12
 80053b0:	f7ff fd92 	bl	8004ed8 <lcd_setLine>
	lcd_setLine(115, 15, 115, 25, 1);
 80053b4:	2301      	movs	r3, #1
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	2319      	movs	r3, #25
 80053ba:	2273      	movs	r2, #115	; 0x73
 80053bc:	210f      	movs	r1, #15
 80053be:	2073      	movs	r0, #115	; 0x73
 80053c0:	f7ff fd8a 	bl	8004ed8 <lcd_setLine>
	new_value = (int)*value/200;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	4abf      	ldr	r2, [pc, #764]	; (80056c8 <potiPrint+0x350>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	099b      	lsrs	r3, r3, #6
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	4bbd      	ldr	r3, [pc, #756]	; (80056cc <potiPrint+0x354>)
 80053d6:	601a      	str	r2, [r3, #0]
	switch(new_value){
 80053d8:	4bbc      	ldr	r3, [pc, #752]	; (80056cc <potiPrint+0x354>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b14      	cmp	r3, #20
 80053de:	f200 8168 	bhi.w	80056b2 <potiPrint+0x33a>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <potiPrint+0x70>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	0800545b 	.word	0x0800545b
 80053f0:	08005479 	.word	0x08005479
 80053f4:	08005497 	.word	0x08005497
 80053f8:	080054b5 	.word	0x080054b5
 80053fc:	080054d3 	.word	0x080054d3
 8005400:	080054f1 	.word	0x080054f1
 8005404:	0800550f 	.word	0x0800550f
 8005408:	0800552d 	.word	0x0800552d
 800540c:	0800554b 	.word	0x0800554b
 8005410:	08005569 	.word	0x08005569
 8005414:	08005587 	.word	0x08005587
 8005418:	080055a5 	.word	0x080055a5
 800541c:	080055c3 	.word	0x080055c3
 8005420:	080055e1 	.word	0x080055e1
 8005424:	080055ff 	.word	0x080055ff
 8005428:	0800561d 	.word	0x0800561d
 800542c:	0800563b 	.word	0x0800563b
 8005430:	08005659 	.word	0x08005659
 8005434:	08005677 	.word	0x08005677
 8005438:	08005695 	.word	0x08005695
	case 0:
		lcd_setString(4, 4, "Sirup percentage: 5%", LCD_FONT_8, false);
 800543c:	2300      	movs	r3, #0
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	4aa3      	ldr	r2, [pc, #652]	; (80056d0 <potiPrint+0x358>)
 8005444:	2104      	movs	r1, #4
 8005446:	2004      	movs	r0, #4
 8005448:	f7ff fd14 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 18, 24);
 800544c:	2318      	movs	r3, #24
 800544e:	2212      	movs	r2, #18
 8005450:	2110      	movs	r1, #16
 8005452:	200d      	movs	r0, #13
 8005454:	f7ff fe92 	bl	800517c <lcd_setBar>
		break;
 8005458:	e12c      	b.n	80056b4 <potiPrint+0x33c>
	case 1:
		lcd_setString(4, 4, "Sirup percentage: 6%", LCD_FONT_8, false);
 800545a:	2300      	movs	r3, #0
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	2300      	movs	r3, #0
 8005460:	4a9c      	ldr	r2, [pc, #624]	; (80056d4 <potiPrint+0x35c>)
 8005462:	2104      	movs	r1, #4
 8005464:	2004      	movs	r0, #4
 8005466:	f7ff fd05 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 19, 24);
 800546a:	2318      	movs	r3, #24
 800546c:	2213      	movs	r2, #19
 800546e:	2110      	movs	r1, #16
 8005470:	200d      	movs	r0, #13
 8005472:	f7ff fe83 	bl	800517c <lcd_setBar>
		break;
 8005476:	e11d      	b.n	80056b4 <potiPrint+0x33c>
	case 2:
		lcd_setString(4, 4, "Sirup percentage: 7%", LCD_FONT_8, false);
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	2300      	movs	r3, #0
 800547e:	4a96      	ldr	r2, [pc, #600]	; (80056d8 <potiPrint+0x360>)
 8005480:	2104      	movs	r1, #4
 8005482:	2004      	movs	r0, #4
 8005484:	f7ff fcf6 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 20, 24);
 8005488:	2318      	movs	r3, #24
 800548a:	2214      	movs	r2, #20
 800548c:	2110      	movs	r1, #16
 800548e:	200d      	movs	r0, #13
 8005490:	f7ff fe74 	bl	800517c <lcd_setBar>
		break;
 8005494:	e10e      	b.n	80056b4 <potiPrint+0x33c>
	case 3:
		lcd_setString(4, 4, "Sirup percentage: 8%", LCD_FONT_8, false);
 8005496:	2300      	movs	r3, #0
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	4a8f      	ldr	r2, [pc, #572]	; (80056dc <potiPrint+0x364>)
 800549e:	2104      	movs	r1, #4
 80054a0:	2004      	movs	r0, #4
 80054a2:	f7ff fce7 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 21, 24);
 80054a6:	2318      	movs	r3, #24
 80054a8:	2215      	movs	r2, #21
 80054aa:	2110      	movs	r1, #16
 80054ac:	200d      	movs	r0, #13
 80054ae:	f7ff fe65 	bl	800517c <lcd_setBar>
		break;
 80054b2:	e0ff      	b.n	80056b4 <potiPrint+0x33c>
	case 4:
		lcd_setString(4, 4, "Sirup percentage: 9%", LCD_FONT_8, false);
 80054b4:	2300      	movs	r3, #0
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2300      	movs	r3, #0
 80054ba:	4a89      	ldr	r2, [pc, #548]	; (80056e0 <potiPrint+0x368>)
 80054bc:	2104      	movs	r1, #4
 80054be:	2004      	movs	r0, #4
 80054c0:	f7ff fcd8 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 22, 24);
 80054c4:	2318      	movs	r3, #24
 80054c6:	2216      	movs	r2, #22
 80054c8:	2110      	movs	r1, #16
 80054ca:	200d      	movs	r0, #13
 80054cc:	f7ff fe56 	bl	800517c <lcd_setBar>
		break;
 80054d0:	e0f0      	b.n	80056b4 <potiPrint+0x33c>
	case 5:
		lcd_setString(4, 4, "Sirup percentage: 10%", LCD_FONT_8, false);
 80054d2:	2300      	movs	r3, #0
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	2300      	movs	r3, #0
 80054d8:	4a82      	ldr	r2, [pc, #520]	; (80056e4 <potiPrint+0x36c>)
 80054da:	2104      	movs	r1, #4
 80054dc:	2004      	movs	r0, #4
 80054de:	f7ff fcc9 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 23, 24);
 80054e2:	2318      	movs	r3, #24
 80054e4:	2217      	movs	r2, #23
 80054e6:	2110      	movs	r1, #16
 80054e8:	200d      	movs	r0, #13
 80054ea:	f7ff fe47 	bl	800517c <lcd_setBar>
		break;
 80054ee:	e0e1      	b.n	80056b4 <potiPrint+0x33c>
	case 6:
		lcd_setString(4, 4, "Sirup percentage: 11%", LCD_FONT_8, false);
 80054f0:	2300      	movs	r3, #0
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <potiPrint+0x370>)
 80054f8:	2104      	movs	r1, #4
 80054fa:	2004      	movs	r0, #4
 80054fc:	f7ff fcba 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 24, 24);
 8005500:	2318      	movs	r3, #24
 8005502:	2218      	movs	r2, #24
 8005504:	2110      	movs	r1, #16
 8005506:	200d      	movs	r0, #13
 8005508:	f7ff fe38 	bl	800517c <lcd_setBar>
		break;
 800550c:	e0d2      	b.n	80056b4 <potiPrint+0x33c>
	case 7:
		lcd_setString(4, 4, "Sirup percentage: 12%", LCD_FONT_8, false);
 800550e:	2300      	movs	r3, #0
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	2300      	movs	r3, #0
 8005514:	4a75      	ldr	r2, [pc, #468]	; (80056ec <potiPrint+0x374>)
 8005516:	2104      	movs	r1, #4
 8005518:	2004      	movs	r0, #4
 800551a:	f7ff fcab 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 25, 24);
 800551e:	2318      	movs	r3, #24
 8005520:	2219      	movs	r2, #25
 8005522:	2110      	movs	r1, #16
 8005524:	200d      	movs	r0, #13
 8005526:	f7ff fe29 	bl	800517c <lcd_setBar>
		break;
 800552a:	e0c3      	b.n	80056b4 <potiPrint+0x33c>
	case 8:
		lcd_setString(4, 4, "Sirup percentage: 13%", LCD_FONT_8, false);
 800552c:	2300      	movs	r3, #0
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	2300      	movs	r3, #0
 8005532:	4a6f      	ldr	r2, [pc, #444]	; (80056f0 <potiPrint+0x378>)
 8005534:	2104      	movs	r1, #4
 8005536:	2004      	movs	r0, #4
 8005538:	f7ff fc9c 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 26, 24);
 800553c:	2318      	movs	r3, #24
 800553e:	221a      	movs	r2, #26
 8005540:	2110      	movs	r1, #16
 8005542:	200d      	movs	r0, #13
 8005544:	f7ff fe1a 	bl	800517c <lcd_setBar>
		break;
 8005548:	e0b4      	b.n	80056b4 <potiPrint+0x33c>
	case 9:
		lcd_setString(4, 4, "Sirup percentage: 14%", LCD_FONT_8, false);
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	4a68      	ldr	r2, [pc, #416]	; (80056f4 <potiPrint+0x37c>)
 8005552:	2104      	movs	r1, #4
 8005554:	2004      	movs	r0, #4
 8005556:	f7ff fc8d 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 27, 24);
 800555a:	2318      	movs	r3, #24
 800555c:	221b      	movs	r2, #27
 800555e:	2110      	movs	r1, #16
 8005560:	200d      	movs	r0, #13
 8005562:	f7ff fe0b 	bl	800517c <lcd_setBar>
		break;
 8005566:	e0a5      	b.n	80056b4 <potiPrint+0x33c>
	case 10:
		lcd_setString(4, 4, "Sirup percentage: 15%", LCD_FONT_8, false);
 8005568:	2300      	movs	r3, #0
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	2300      	movs	r3, #0
 800556e:	4a62      	ldr	r2, [pc, #392]	; (80056f8 <potiPrint+0x380>)
 8005570:	2104      	movs	r1, #4
 8005572:	2004      	movs	r0, #4
 8005574:	f7ff fc7e 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 28, 24);
 8005578:	2318      	movs	r3, #24
 800557a:	221c      	movs	r2, #28
 800557c:	2110      	movs	r1, #16
 800557e:	200d      	movs	r0, #13
 8005580:	f7ff fdfc 	bl	800517c <lcd_setBar>
		break;
 8005584:	e096      	b.n	80056b4 <potiPrint+0x33c>
	case 11:
		lcd_setString(4, 4, "Sirup percentage: 16%", LCD_FONT_8, false);
 8005586:	2300      	movs	r3, #0
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2300      	movs	r3, #0
 800558c:	4a5b      	ldr	r2, [pc, #364]	; (80056fc <potiPrint+0x384>)
 800558e:	2104      	movs	r1, #4
 8005590:	2004      	movs	r0, #4
 8005592:	f7ff fc6f 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 29, 24);
 8005596:	2318      	movs	r3, #24
 8005598:	221d      	movs	r2, #29
 800559a:	2110      	movs	r1, #16
 800559c:	200d      	movs	r0, #13
 800559e:	f7ff fded 	bl	800517c <lcd_setBar>
		break;
 80055a2:	e087      	b.n	80056b4 <potiPrint+0x33c>
	case 12:
		lcd_setString(4, 4, "Sirup percentage: 17%", LCD_FONT_8, false);
 80055a4:	2300      	movs	r3, #0
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2300      	movs	r3, #0
 80055aa:	4a55      	ldr	r2, [pc, #340]	; (8005700 <potiPrint+0x388>)
 80055ac:	2104      	movs	r1, #4
 80055ae:	2004      	movs	r0, #4
 80055b0:	f7ff fc60 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 30, 24);
 80055b4:	2318      	movs	r3, #24
 80055b6:	221e      	movs	r2, #30
 80055b8:	2110      	movs	r1, #16
 80055ba:	200d      	movs	r0, #13
 80055bc:	f7ff fdde 	bl	800517c <lcd_setBar>
		break;
 80055c0:	e078      	b.n	80056b4 <potiPrint+0x33c>
	case 13:
		lcd_setString(4, 4, "Sirup percentage: 18%", LCD_FONT_8, false);
 80055c2:	2300      	movs	r3, #0
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	4a4e      	ldr	r2, [pc, #312]	; (8005704 <potiPrint+0x38c>)
 80055ca:	2104      	movs	r1, #4
 80055cc:	2004      	movs	r0, #4
 80055ce:	f7ff fc51 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 31, 24);
 80055d2:	2318      	movs	r3, #24
 80055d4:	221f      	movs	r2, #31
 80055d6:	2110      	movs	r1, #16
 80055d8:	200d      	movs	r0, #13
 80055da:	f7ff fdcf 	bl	800517c <lcd_setBar>
		break;
 80055de:	e069      	b.n	80056b4 <potiPrint+0x33c>
	case 14:
		lcd_setString(4, 4, "Sirup percentage: 19%", LCD_FONT_8, false);
 80055e0:	2300      	movs	r3, #0
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	4a48      	ldr	r2, [pc, #288]	; (8005708 <potiPrint+0x390>)
 80055e8:	2104      	movs	r1, #4
 80055ea:	2004      	movs	r0, #4
 80055ec:	f7ff fc42 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 32, 24);
 80055f0:	2318      	movs	r3, #24
 80055f2:	2220      	movs	r2, #32
 80055f4:	2110      	movs	r1, #16
 80055f6:	200d      	movs	r0, #13
 80055f8:	f7ff fdc0 	bl	800517c <lcd_setBar>
		break;
 80055fc:	e05a      	b.n	80056b4 <potiPrint+0x33c>
	case 15:
		lcd_setString(4, 4, "Sirup percentage: 20%", LCD_FONT_8, false);
 80055fe:	2300      	movs	r3, #0
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	2300      	movs	r3, #0
 8005604:	4a41      	ldr	r2, [pc, #260]	; (800570c <potiPrint+0x394>)
 8005606:	2104      	movs	r1, #4
 8005608:	2004      	movs	r0, #4
 800560a:	f7ff fc33 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 33, 24);
 800560e:	2318      	movs	r3, #24
 8005610:	2221      	movs	r2, #33	; 0x21
 8005612:	2110      	movs	r1, #16
 8005614:	200d      	movs	r0, #13
 8005616:	f7ff fdb1 	bl	800517c <lcd_setBar>
		break;
 800561a:	e04b      	b.n	80056b4 <potiPrint+0x33c>
	case 16:
		lcd_setString(4, 4, "Sirup percentage: 21%", LCD_FONT_8, false);
 800561c:	2300      	movs	r3, #0
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2300      	movs	r3, #0
 8005622:	4a3b      	ldr	r2, [pc, #236]	; (8005710 <potiPrint+0x398>)
 8005624:	2104      	movs	r1, #4
 8005626:	2004      	movs	r0, #4
 8005628:	f7ff fc24 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 34, 24);
 800562c:	2318      	movs	r3, #24
 800562e:	2222      	movs	r2, #34	; 0x22
 8005630:	2110      	movs	r1, #16
 8005632:	200d      	movs	r0, #13
 8005634:	f7ff fda2 	bl	800517c <lcd_setBar>
		break;
 8005638:	e03c      	b.n	80056b4 <potiPrint+0x33c>
	case 17:
		lcd_setString(4, 4, "Sirup percentage: 22%", LCD_FONT_8, false);
 800563a:	2300      	movs	r3, #0
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	2300      	movs	r3, #0
 8005640:	4a34      	ldr	r2, [pc, #208]	; (8005714 <potiPrint+0x39c>)
 8005642:	2104      	movs	r1, #4
 8005644:	2004      	movs	r0, #4
 8005646:	f7ff fc15 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 35, 24);
 800564a:	2318      	movs	r3, #24
 800564c:	2223      	movs	r2, #35	; 0x23
 800564e:	2110      	movs	r1, #16
 8005650:	200d      	movs	r0, #13
 8005652:	f7ff fd93 	bl	800517c <lcd_setBar>
		break;
 8005656:	e02d      	b.n	80056b4 <potiPrint+0x33c>
	case 18:
		lcd_setString(4, 4, "Sirup percentage: 23%", LCD_FONT_8, false);
 8005658:	2300      	movs	r3, #0
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	2300      	movs	r3, #0
 800565e:	4a2e      	ldr	r2, [pc, #184]	; (8005718 <potiPrint+0x3a0>)
 8005660:	2104      	movs	r1, #4
 8005662:	2004      	movs	r0, #4
 8005664:	f7ff fc06 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 36, 24);
 8005668:	2318      	movs	r3, #24
 800566a:	2224      	movs	r2, #36	; 0x24
 800566c:	2110      	movs	r1, #16
 800566e:	200d      	movs	r0, #13
 8005670:	f7ff fd84 	bl	800517c <lcd_setBar>
		break;
 8005674:	e01e      	b.n	80056b4 <potiPrint+0x33c>
	case 19:
		lcd_setString(4, 4, "Sirup percentage: 24%", LCD_FONT_8, false);
 8005676:	2300      	movs	r3, #0
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	2300      	movs	r3, #0
 800567c:	4a27      	ldr	r2, [pc, #156]	; (800571c <potiPrint+0x3a4>)
 800567e:	2104      	movs	r1, #4
 8005680:	2004      	movs	r0, #4
 8005682:	f7ff fbf7 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 37, 24);
 8005686:	2318      	movs	r3, #24
 8005688:	2225      	movs	r2, #37	; 0x25
 800568a:	2110      	movs	r1, #16
 800568c:	200d      	movs	r0, #13
 800568e:	f7ff fd75 	bl	800517c <lcd_setBar>
		break;
 8005692:	e00f      	b.n	80056b4 <potiPrint+0x33c>
	case 20:
		lcd_setString(4, 4, "Sirup percentage: 25%", LCD_FONT_8, false);
 8005694:	2300      	movs	r3, #0
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	2300      	movs	r3, #0
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <potiPrint+0x3a8>)
 800569c:	2104      	movs	r1, #4
 800569e:	2004      	movs	r0, #4
 80056a0:	f7ff fbe8 	bl	8004e74 <lcd_setString>
		lcd_setBar(13, 16, 38, 24);
 80056a4:	2318      	movs	r3, #24
 80056a6:	2226      	movs	r2, #38	; 0x26
 80056a8:	2110      	movs	r1, #16
 80056aa:	200d      	movs	r0, #13
 80056ac:	f7ff fd66 	bl	800517c <lcd_setBar>
		break;
 80056b0:	e000      	b.n	80056b4 <potiPrint+0x33c>
	default:
		break;
 80056b2:	bf00      	nop
	}
	lcd_show();
 80056b4:	f7ff fd2e 	bl	8005114 <lcd_show>
	return new_value+5; // +5 since we start at 5 percent
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <potiPrint+0x354>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3305      	adds	r3, #5
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	51eb851f 	.word	0x51eb851f
 80056cc:	200005a8 	.word	0x200005a8
 80056d0:	08008818 	.word	0x08008818
 80056d4:	08008830 	.word	0x08008830
 80056d8:	08008848 	.word	0x08008848
 80056dc:	08008860 	.word	0x08008860
 80056e0:	08008878 	.word	0x08008878
 80056e4:	08008890 	.word	0x08008890
 80056e8:	080088a8 	.word	0x080088a8
 80056ec:	080088c0 	.word	0x080088c0
 80056f0:	080088d8 	.word	0x080088d8
 80056f4:	080088f0 	.word	0x080088f0
 80056f8:	08008908 	.word	0x08008908
 80056fc:	08008920 	.word	0x08008920
 8005700:	08008938 	.word	0x08008938
 8005704:	08008950 	.word	0x08008950
 8005708:	08008968 	.word	0x08008968
 800570c:	08008980 	.word	0x08008980
 8005710:	08008998 	.word	0x08008998
 8005714:	080089b0 	.word	0x080089b0
 8005718:	080089c8 	.word	0x080089c8
 800571c:	080089e0 	.word	0x080089e0
 8005720:	080089f8 	.word	0x080089f8

08005724 <potiDeInit>:

HAL_StatusTypeDef potiDeInit()
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
	return HAL_ADC_Stop(&hadc1);
 8005728:	4802      	ldr	r0, [pc, #8]	; (8005734 <potiDeInit+0x10>)
 800572a:	f7fc fb91 	bl	8001e50 <HAL_ADC_Stop>
 800572e:	4603      	mov	r3, r0
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000414 	.word	0x20000414

08005738 <initScale>:
int volume_small = 2000;
int volume_big = 5000;
int volume;


void initScale(void){
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af02      	add	r7, sp, #8
	hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_CLK_Pin, HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 800573e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <initScale+0x34>)
 8005746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800574a:	4908      	ldr	r1, [pc, #32]	; (800576c <initScale+0x34>)
 800574c:	4808      	ldr	r0, [pc, #32]	; (8005770 <initScale+0x38>)
 800574e:	f7ff f87e 	bl	800484e <hx711_init>
	hx711_coef_set(&loadcell, 354.5); 						// read afer calibration
 8005752:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005774 <initScale+0x3c>
 8005756:	4806      	ldr	r0, [pc, #24]	; (8005770 <initScale+0x38>)
 8005758:	f7ff fa0e 	bl	8004b78 <hx711_coef_set>
	hx711_tare(&loadcell, 10);
 800575c:	210a      	movs	r1, #10
 800575e:	4804      	ldr	r0, [pc, #16]	; (8005770 <initScale+0x38>)
 8005760:	f7ff f943 	bl	80049ea <hx711_tare>
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40020400 	.word	0x40020400
 8005770:	200005ac 	.word	0x200005ac
 8005774:	43b14000 	.word	0x43b14000

08005778 <getWeight>:

int getWeight(void){
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af02      	add	r7, sp, #8
	HAL_Delay(500);
 800577e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005782:	f7fc fa2b 	bl	8001bdc <HAL_Delay>
	weight = hx711_weight(&loadcell, 10);
 8005786:	210a      	movs	r1, #10
 8005788:	4818      	ldr	r0, [pc, #96]	; (80057ec <getWeight+0x74>)
 800578a:	f7ff f96d 	bl	8004a68 <hx711_weight>
 800578e:	eef0 7a40 	vmov.f32	s15, s0
 8005792:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <getWeight+0x78>)
 8005794:	edc3 7a00 	vstr	s15, [r3]
	sprintf(msgBuf,"Weight: %dg", (int)weight); // fill message buffer
 8005798:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <getWeight+0x78>)
 800579a:	edd3 7a00 	vldr	s15, [r3]
 800579e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057a2:	ee17 2a90 	vmov	r2, s15
 80057a6:	4913      	ldr	r1, [pc, #76]	; (80057f4 <getWeight+0x7c>)
 80057a8:	4813      	ldr	r0, [pc, #76]	; (80057f8 <getWeight+0x80>)
 80057aa:	f000 fda7 	bl	80062fc <siprintf>
	lcd_clear();
 80057ae:	f7ff fad5 	bl	8004d5c <lcd_clear>
	lcd_setString(4, 1, msgBuf, LCD_FONT_8, false); 		// LCD message
 80057b2:	2300      	movs	r3, #0
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	4a0f      	ldr	r2, [pc, #60]	; (80057f8 <getWeight+0x80>)
 80057ba:	2101      	movs	r1, #1
 80057bc:	2004      	movs	r0, #4
 80057be:	f7ff fb59 	bl	8004e74 <lcd_setString>
	lcd_setString(4, 16, "Press js to continue", LCD_FONT_8, false);
 80057c2:	2300      	movs	r3, #0
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2300      	movs	r3, #0
 80057c8:	4a0c      	ldr	r2, [pc, #48]	; (80057fc <getWeight+0x84>)
 80057ca:	2110      	movs	r1, #16
 80057cc:	2004      	movs	r0, #4
 80057ce:	f7ff fb51 	bl	8004e74 <lcd_setString>
	lcd_show();
 80057d2:	f7ff fc9f 	bl	8005114 <lcd_show>
	return (int)weight;
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <getWeight+0x78>)
 80057d8:	edd3 7a00 	vldr	s15, [r3]
 80057dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057e0:	ee17 3a90 	vmov	r3, s15
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200005ac 	.word	0x200005ac
 80057f0:	2000046c 	.word	0x2000046c
 80057f4:	08008a10 	.word	0x08008a10
 80057f8:	2000055c 	.word	0x2000055c
 80057fc:	08008a1c 	.word	0x08008a1c

08005800 <getWeight2>:

int getWeight2(void){
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af02      	add	r7, sp, #8
	HAL_Delay(500);
 8005806:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800580a:	f7fc f9e7 	bl	8001bdc <HAL_Delay>
	weight = hx711_weight(&loadcell, 10);
 800580e:	210a      	movs	r1, #10
 8005810:	4814      	ldr	r0, [pc, #80]	; (8005864 <getWeight2+0x64>)
 8005812:	f7ff f929 	bl	8004a68 <hx711_weight>
 8005816:	eef0 7a40 	vmov.f32	s15, s0
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <getWeight2+0x68>)
 800581c:	edc3 7a00 	vstr	s15, [r3]
	sprintf(msgBuf,"Weight: %dg", (int)weight); // fill message buffer
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <getWeight2+0x68>)
 8005822:	edd3 7a00 	vldr	s15, [r3]
 8005826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800582a:	ee17 2a90 	vmov	r2, s15
 800582e:	490f      	ldr	r1, [pc, #60]	; (800586c <getWeight2+0x6c>)
 8005830:	480f      	ldr	r0, [pc, #60]	; (8005870 <getWeight2+0x70>)
 8005832:	f000 fd63 	bl	80062fc <siprintf>
	lcd_clear();
 8005836:	f7ff fa91 	bl	8004d5c <lcd_clear>
	lcd_setString(4, 1, msgBuf, LCD_FONT_8, false); 		// LCD message
 800583a:	2300      	movs	r3, #0
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	2300      	movs	r3, #0
 8005840:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <getWeight2+0x70>)
 8005842:	2101      	movs	r1, #1
 8005844:	2004      	movs	r0, #4
 8005846:	f7ff fb15 	bl	8004e74 <lcd_setString>
	lcd_show();
 800584a:	f7ff fc63 	bl	8005114 <lcd_show>
	return (int)weight;
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <getWeight2+0x68>)
 8005850:	edd3 7a00 	vldr	s15, [r3]
 8005854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005858:	ee17 3a90 	vmov	r3, s15
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200005ac 	.word	0x200005ac
 8005868:	2000046c 	.word	0x2000046c
 800586c:	08008a10 	.word	0x08008a10
 8005870:	2000055c 	.word	0x2000055c

08005874 <checkWeight>:

int checkWeight(char size, int weight, int percentage){
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	73fb      	strb	r3, [r7, #15]
	if (size == 0){
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <checkWeight+0x1e>
		volume = volume_small;
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <checkWeight+0x54>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a0f      	ldr	r2, [pc, #60]	; (80058cc <checkWeight+0x58>)
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e003      	b.n	800589a <checkWeight+0x26>
	}
	else{
		volume = volume_big;
 8005892:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <checkWeight+0x5c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <checkWeight+0x58>)
 8005898:	6013      	str	r3, [r2, #0]
	}
	if (weight > volume*percentage/100)
 800589a:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <checkWeight+0x58>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	fb02 f303 	mul.w	r3, r2, r3
 80058a4:	4a0b      	ldr	r2, [pc, #44]	; (80058d4 <checkWeight+0x60>)
 80058a6:	fb82 1203 	smull	r1, r2, r2, r3
 80058aa:	1152      	asrs	r2, r2, #5
 80058ac:	17db      	asrs	r3, r3, #31
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	dd01      	ble.n	80058ba <checkWeight+0x46>
		return 1;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <checkWeight+0x48>
	return 0;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	20000010 	.word	0x20000010
 80058cc:	200005c4 	.word	0x200005c4
 80058d0:	20000014 	.word	0x20000014
 80058d4:	51eb851f 	.word	0x51eb851f

080058d8 <__errno>:
 80058d8:	4b01      	ldr	r3, [pc, #4]	; (80058e0 <__errno+0x8>)
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000018 	.word	0x20000018

080058e4 <__libc_init_array>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	4d0d      	ldr	r5, [pc, #52]	; (800591c <__libc_init_array+0x38>)
 80058e8:	4c0d      	ldr	r4, [pc, #52]	; (8005920 <__libc_init_array+0x3c>)
 80058ea:	1b64      	subs	r4, r4, r5
 80058ec:	10a4      	asrs	r4, r4, #2
 80058ee:	2600      	movs	r6, #0
 80058f0:	42a6      	cmp	r6, r4
 80058f2:	d109      	bne.n	8005908 <__libc_init_array+0x24>
 80058f4:	4d0b      	ldr	r5, [pc, #44]	; (8005924 <__libc_init_array+0x40>)
 80058f6:	4c0c      	ldr	r4, [pc, #48]	; (8005928 <__libc_init_array+0x44>)
 80058f8:	f002 ff2c 	bl	8008754 <_init>
 80058fc:	1b64      	subs	r4, r4, r5
 80058fe:	10a4      	asrs	r4, r4, #2
 8005900:	2600      	movs	r6, #0
 8005902:	42a6      	cmp	r6, r4
 8005904:	d105      	bne.n	8005912 <__libc_init_array+0x2e>
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	f855 3b04 	ldr.w	r3, [r5], #4
 800590c:	4798      	blx	r3
 800590e:	3601      	adds	r6, #1
 8005910:	e7ee      	b.n	80058f0 <__libc_init_array+0xc>
 8005912:	f855 3b04 	ldr.w	r3, [r5], #4
 8005916:	4798      	blx	r3
 8005918:	3601      	adds	r6, #1
 800591a:	e7f2      	b.n	8005902 <__libc_init_array+0x1e>
 800591c:	080091bc 	.word	0x080091bc
 8005920:	080091bc 	.word	0x080091bc
 8005924:	080091bc 	.word	0x080091bc
 8005928:	080091c0 	.word	0x080091c0

0800592c <memset>:
 800592c:	4402      	add	r2, r0
 800592e:	4603      	mov	r3, r0
 8005930:	4293      	cmp	r3, r2
 8005932:	d100      	bne.n	8005936 <memset+0xa>
 8005934:	4770      	bx	lr
 8005936:	f803 1b01 	strb.w	r1, [r3], #1
 800593a:	e7f9      	b.n	8005930 <memset+0x4>

0800593c <__cvt>:
 800593c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	ec55 4b10 	vmov	r4, r5, d0
 8005944:	2d00      	cmp	r5, #0
 8005946:	460e      	mov	r6, r1
 8005948:	4619      	mov	r1, r3
 800594a:	462b      	mov	r3, r5
 800594c:	bfbb      	ittet	lt
 800594e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005952:	461d      	movlt	r5, r3
 8005954:	2300      	movge	r3, #0
 8005956:	232d      	movlt	r3, #45	; 0x2d
 8005958:	700b      	strb	r3, [r1, #0]
 800595a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800595c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005960:	4691      	mov	r9, r2
 8005962:	f023 0820 	bic.w	r8, r3, #32
 8005966:	bfbc      	itt	lt
 8005968:	4622      	movlt	r2, r4
 800596a:	4614      	movlt	r4, r2
 800596c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005970:	d005      	beq.n	800597e <__cvt+0x42>
 8005972:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005976:	d100      	bne.n	800597a <__cvt+0x3e>
 8005978:	3601      	adds	r6, #1
 800597a:	2102      	movs	r1, #2
 800597c:	e000      	b.n	8005980 <__cvt+0x44>
 800597e:	2103      	movs	r1, #3
 8005980:	ab03      	add	r3, sp, #12
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	ab02      	add	r3, sp, #8
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	ec45 4b10 	vmov	d0, r4, r5
 800598c:	4653      	mov	r3, sl
 800598e:	4632      	mov	r2, r6
 8005990:	f000 fe22 	bl	80065d8 <_dtoa_r>
 8005994:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005998:	4607      	mov	r7, r0
 800599a:	d102      	bne.n	80059a2 <__cvt+0x66>
 800599c:	f019 0f01 	tst.w	r9, #1
 80059a0:	d022      	beq.n	80059e8 <__cvt+0xac>
 80059a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059a6:	eb07 0906 	add.w	r9, r7, r6
 80059aa:	d110      	bne.n	80059ce <__cvt+0x92>
 80059ac:	783b      	ldrb	r3, [r7, #0]
 80059ae:	2b30      	cmp	r3, #48	; 0x30
 80059b0:	d10a      	bne.n	80059c8 <__cvt+0x8c>
 80059b2:	2200      	movs	r2, #0
 80059b4:	2300      	movs	r3, #0
 80059b6:	4620      	mov	r0, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7fb f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80059be:	b918      	cbnz	r0, 80059c8 <__cvt+0x8c>
 80059c0:	f1c6 0601 	rsb	r6, r6, #1
 80059c4:	f8ca 6000 	str.w	r6, [sl]
 80059c8:	f8da 3000 	ldr.w	r3, [sl]
 80059cc:	4499      	add	r9, r3
 80059ce:	2200      	movs	r2, #0
 80059d0:	2300      	movs	r3, #0
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7fb f897 	bl	8000b08 <__aeabi_dcmpeq>
 80059da:	b108      	cbz	r0, 80059e0 <__cvt+0xa4>
 80059dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80059e0:	2230      	movs	r2, #48	; 0x30
 80059e2:	9b03      	ldr	r3, [sp, #12]
 80059e4:	454b      	cmp	r3, r9
 80059e6:	d307      	bcc.n	80059f8 <__cvt+0xbc>
 80059e8:	9b03      	ldr	r3, [sp, #12]
 80059ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059ec:	1bdb      	subs	r3, r3, r7
 80059ee:	4638      	mov	r0, r7
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	b004      	add	sp, #16
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f8:	1c59      	adds	r1, r3, #1
 80059fa:	9103      	str	r1, [sp, #12]
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e7f0      	b.n	80059e2 <__cvt+0xa6>

08005a00 <__exponent>:
 8005a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a02:	4603      	mov	r3, r0
 8005a04:	2900      	cmp	r1, #0
 8005a06:	bfb8      	it	lt
 8005a08:	4249      	neglt	r1, r1
 8005a0a:	f803 2b02 	strb.w	r2, [r3], #2
 8005a0e:	bfb4      	ite	lt
 8005a10:	222d      	movlt	r2, #45	; 0x2d
 8005a12:	222b      	movge	r2, #43	; 0x2b
 8005a14:	2909      	cmp	r1, #9
 8005a16:	7042      	strb	r2, [r0, #1]
 8005a18:	dd2a      	ble.n	8005a70 <__exponent+0x70>
 8005a1a:	f10d 0407 	add.w	r4, sp, #7
 8005a1e:	46a4      	mov	ip, r4
 8005a20:	270a      	movs	r7, #10
 8005a22:	46a6      	mov	lr, r4
 8005a24:	460a      	mov	r2, r1
 8005a26:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a2a:	fb07 1516 	mls	r5, r7, r6, r1
 8005a2e:	3530      	adds	r5, #48	; 0x30
 8005a30:	2a63      	cmp	r2, #99	; 0x63
 8005a32:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	dcf1      	bgt.n	8005a22 <__exponent+0x22>
 8005a3e:	3130      	adds	r1, #48	; 0x30
 8005a40:	f1ae 0502 	sub.w	r5, lr, #2
 8005a44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a48:	1c44      	adds	r4, r0, #1
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4561      	cmp	r1, ip
 8005a4e:	d30a      	bcc.n	8005a66 <__exponent+0x66>
 8005a50:	f10d 0209 	add.w	r2, sp, #9
 8005a54:	eba2 020e 	sub.w	r2, r2, lr
 8005a58:	4565      	cmp	r5, ip
 8005a5a:	bf88      	it	hi
 8005a5c:	2200      	movhi	r2, #0
 8005a5e:	4413      	add	r3, r2
 8005a60:	1a18      	subs	r0, r3, r0
 8005a62:	b003      	add	sp, #12
 8005a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a6e:	e7ed      	b.n	8005a4c <__exponent+0x4c>
 8005a70:	2330      	movs	r3, #48	; 0x30
 8005a72:	3130      	adds	r1, #48	; 0x30
 8005a74:	7083      	strb	r3, [r0, #2]
 8005a76:	70c1      	strb	r1, [r0, #3]
 8005a78:	1d03      	adds	r3, r0, #4
 8005a7a:	e7f1      	b.n	8005a60 <__exponent+0x60>

08005a7c <_printf_float>:
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	ed2d 8b02 	vpush	{d8}
 8005a84:	b08d      	sub	sp, #52	; 0x34
 8005a86:	460c      	mov	r4, r1
 8005a88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	461f      	mov	r7, r3
 8005a90:	4605      	mov	r5, r0
 8005a92:	f001 fd45 	bl	8007520 <_localeconv_r>
 8005a96:	f8d0 a000 	ldr.w	sl, [r0]
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	f7fa fbb8 	bl	8000210 <strlen>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	9305      	str	r3, [sp, #20]
 8005aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8005aac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ab0:	3307      	adds	r3, #7
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	f103 0208 	add.w	r2, r3, #8
 8005aba:	f8c8 2000 	str.w	r2, [r8]
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ac6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005aca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ace:	9307      	str	r3, [sp, #28]
 8005ad0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ad4:	ee08 0a10 	vmov	s16, r0
 8005ad8:	4b9f      	ldr	r3, [pc, #636]	; (8005d58 <_printf_float+0x2dc>)
 8005ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ade:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae2:	f7fb f843 	bl	8000b6c <__aeabi_dcmpun>
 8005ae6:	bb88      	cbnz	r0, 8005b4c <_printf_float+0xd0>
 8005ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aec:	4b9a      	ldr	r3, [pc, #616]	; (8005d58 <_printf_float+0x2dc>)
 8005aee:	f04f 32ff 	mov.w	r2, #4294967295
 8005af2:	f7fb f81d 	bl	8000b30 <__aeabi_dcmple>
 8005af6:	bb48      	cbnz	r0, 8005b4c <_printf_float+0xd0>
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fb f80c 	bl	8000b1c <__aeabi_dcmplt>
 8005b04:	b110      	cbz	r0, 8005b0c <_printf_float+0x90>
 8005b06:	232d      	movs	r3, #45	; 0x2d
 8005b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0c:	4b93      	ldr	r3, [pc, #588]	; (8005d5c <_printf_float+0x2e0>)
 8005b0e:	4894      	ldr	r0, [pc, #592]	; (8005d60 <_printf_float+0x2e4>)
 8005b10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b14:	bf94      	ite	ls
 8005b16:	4698      	movls	r8, r3
 8005b18:	4680      	movhi	r8, r0
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	9b05      	ldr	r3, [sp, #20]
 8005b20:	f023 0204 	bic.w	r2, r3, #4
 8005b24:	6022      	str	r2, [r4, #0]
 8005b26:	f04f 0900 	mov.w	r9, #0
 8005b2a:	9700      	str	r7, [sp, #0]
 8005b2c:	4633      	mov	r3, r6
 8005b2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b30:	4621      	mov	r1, r4
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 f9d8 	bl	8005ee8 <_printf_common>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f040 8090 	bne.w	8005c5e <_printf_float+0x1e2>
 8005b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b42:	b00d      	add	sp, #52	; 0x34
 8005b44:	ecbd 8b02 	vpop	{d8}
 8005b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	4640      	mov	r0, r8
 8005b52:	4649      	mov	r1, r9
 8005b54:	f7fb f80a 	bl	8000b6c <__aeabi_dcmpun>
 8005b58:	b140      	cbz	r0, 8005b6c <_printf_float+0xf0>
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bfbc      	itt	lt
 8005b60:	232d      	movlt	r3, #45	; 0x2d
 8005b62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b66:	487f      	ldr	r0, [pc, #508]	; (8005d64 <_printf_float+0x2e8>)
 8005b68:	4b7f      	ldr	r3, [pc, #508]	; (8005d68 <_printf_float+0x2ec>)
 8005b6a:	e7d1      	b.n	8005b10 <_printf_float+0x94>
 8005b6c:	6863      	ldr	r3, [r4, #4]
 8005b6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b72:	9206      	str	r2, [sp, #24]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	d13f      	bne.n	8005bf8 <_printf_float+0x17c>
 8005b78:	2306      	movs	r3, #6
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	9b05      	ldr	r3, [sp, #20]
 8005b7e:	6861      	ldr	r1, [r4, #4]
 8005b80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b84:	2300      	movs	r3, #0
 8005b86:	9303      	str	r3, [sp, #12]
 8005b88:	ab0a      	add	r3, sp, #40	; 0x28
 8005b8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b8e:	ab09      	add	r3, sp, #36	; 0x24
 8005b90:	ec49 8b10 	vmov	d0, r8, r9
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	6022      	str	r2, [r4, #0]
 8005b98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f7ff fecd 	bl	800593c <__cvt>
 8005ba2:	9b06      	ldr	r3, [sp, #24]
 8005ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ba6:	2b47      	cmp	r3, #71	; 0x47
 8005ba8:	4680      	mov	r8, r0
 8005baa:	d108      	bne.n	8005bbe <_printf_float+0x142>
 8005bac:	1cc8      	adds	r0, r1, #3
 8005bae:	db02      	blt.n	8005bb6 <_printf_float+0x13a>
 8005bb0:	6863      	ldr	r3, [r4, #4]
 8005bb2:	4299      	cmp	r1, r3
 8005bb4:	dd41      	ble.n	8005c3a <_printf_float+0x1be>
 8005bb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bba:	fa5f fb8b 	uxtb.w	fp, fp
 8005bbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bc2:	d820      	bhi.n	8005c06 <_printf_float+0x18a>
 8005bc4:	3901      	subs	r1, #1
 8005bc6:	465a      	mov	r2, fp
 8005bc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bcc:	9109      	str	r1, [sp, #36]	; 0x24
 8005bce:	f7ff ff17 	bl	8005a00 <__exponent>
 8005bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd4:	1813      	adds	r3, r2, r0
 8005bd6:	2a01      	cmp	r2, #1
 8005bd8:	4681      	mov	r9, r0
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	dc02      	bgt.n	8005be4 <_printf_float+0x168>
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	07d2      	lsls	r2, r2, #31
 8005be2:	d501      	bpl.n	8005be8 <_printf_float+0x16c>
 8005be4:	3301      	adds	r3, #1
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d09c      	beq.n	8005b2a <_printf_float+0xae>
 8005bf0:	232d      	movs	r3, #45	; 0x2d
 8005bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf6:	e798      	b.n	8005b2a <_printf_float+0xae>
 8005bf8:	9a06      	ldr	r2, [sp, #24]
 8005bfa:	2a47      	cmp	r2, #71	; 0x47
 8005bfc:	d1be      	bne.n	8005b7c <_printf_float+0x100>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1bc      	bne.n	8005b7c <_printf_float+0x100>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e7b9      	b.n	8005b7a <_printf_float+0xfe>
 8005c06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c0a:	d118      	bne.n	8005c3e <_printf_float+0x1c2>
 8005c0c:	2900      	cmp	r1, #0
 8005c0e:	6863      	ldr	r3, [r4, #4]
 8005c10:	dd0b      	ble.n	8005c2a <_printf_float+0x1ae>
 8005c12:	6121      	str	r1, [r4, #16]
 8005c14:	b913      	cbnz	r3, 8005c1c <_printf_float+0x1a0>
 8005c16:	6822      	ldr	r2, [r4, #0]
 8005c18:	07d0      	lsls	r0, r2, #31
 8005c1a:	d502      	bpl.n	8005c22 <_printf_float+0x1a6>
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	440b      	add	r3, r1
 8005c20:	6123      	str	r3, [r4, #16]
 8005c22:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c24:	f04f 0900 	mov.w	r9, #0
 8005c28:	e7de      	b.n	8005be8 <_printf_float+0x16c>
 8005c2a:	b913      	cbnz	r3, 8005c32 <_printf_float+0x1b6>
 8005c2c:	6822      	ldr	r2, [r4, #0]
 8005c2e:	07d2      	lsls	r2, r2, #31
 8005c30:	d501      	bpl.n	8005c36 <_printf_float+0x1ba>
 8005c32:	3302      	adds	r3, #2
 8005c34:	e7f4      	b.n	8005c20 <_printf_float+0x1a4>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e7f2      	b.n	8005c20 <_printf_float+0x1a4>
 8005c3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c40:	4299      	cmp	r1, r3
 8005c42:	db05      	blt.n	8005c50 <_printf_float+0x1d4>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	6121      	str	r1, [r4, #16]
 8005c48:	07d8      	lsls	r0, r3, #31
 8005c4a:	d5ea      	bpl.n	8005c22 <_printf_float+0x1a6>
 8005c4c:	1c4b      	adds	r3, r1, #1
 8005c4e:	e7e7      	b.n	8005c20 <_printf_float+0x1a4>
 8005c50:	2900      	cmp	r1, #0
 8005c52:	bfd4      	ite	le
 8005c54:	f1c1 0202 	rsble	r2, r1, #2
 8005c58:	2201      	movgt	r2, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	e7e0      	b.n	8005c20 <_printf_float+0x1a4>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	055a      	lsls	r2, r3, #21
 8005c62:	d407      	bmi.n	8005c74 <_printf_float+0x1f8>
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	4642      	mov	r2, r8
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d12c      	bne.n	8005ccc <_printf_float+0x250>
 8005c72:	e764      	b.n	8005b3e <_printf_float+0xc2>
 8005c74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c78:	f240 80e0 	bls.w	8005e3c <_printf_float+0x3c0>
 8005c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c80:	2200      	movs	r2, #0
 8005c82:	2300      	movs	r3, #0
 8005c84:	f7fa ff40 	bl	8000b08 <__aeabi_dcmpeq>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d034      	beq.n	8005cf6 <_printf_float+0x27a>
 8005c8c:	4a37      	ldr	r2, [pc, #220]	; (8005d6c <_printf_float+0x2f0>)
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	f43f af51 	beq.w	8005b3e <_printf_float+0xc2>
 8005c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	db02      	blt.n	8005caa <_printf_float+0x22e>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	07d8      	lsls	r0, r3, #31
 8005ca8:	d510      	bpl.n	8005ccc <_printf_float+0x250>
 8005caa:	ee18 3a10 	vmov	r3, s16
 8005cae:	4652      	mov	r2, sl
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f43f af41 	beq.w	8005b3e <_printf_float+0xc2>
 8005cbc:	f04f 0800 	mov.w	r8, #0
 8005cc0:	f104 091a 	add.w	r9, r4, #26
 8005cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	4543      	cmp	r3, r8
 8005cca:	dc09      	bgt.n	8005ce0 <_printf_float+0x264>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	079b      	lsls	r3, r3, #30
 8005cd0:	f100 8105 	bmi.w	8005ede <_printf_float+0x462>
 8005cd4:	68e0      	ldr	r0, [r4, #12]
 8005cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd8:	4298      	cmp	r0, r3
 8005cda:	bfb8      	it	lt
 8005cdc:	4618      	movlt	r0, r3
 8005cde:	e730      	b.n	8005b42 <_printf_float+0xc6>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	464a      	mov	r2, r9
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f af27 	beq.w	8005b3e <_printf_float+0xc2>
 8005cf0:	f108 0801 	add.w	r8, r8, #1
 8005cf4:	e7e6      	b.n	8005cc4 <_printf_float+0x248>
 8005cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	dc39      	bgt.n	8005d70 <_printf_float+0x2f4>
 8005cfc:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <_printf_float+0x2f0>)
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4631      	mov	r1, r6
 8005d02:	4628      	mov	r0, r5
 8005d04:	47b8      	blx	r7
 8005d06:	3001      	adds	r0, #1
 8005d08:	f43f af19 	beq.w	8005b3e <_printf_float+0xc2>
 8005d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d10:	4313      	orrs	r3, r2
 8005d12:	d102      	bne.n	8005d1a <_printf_float+0x29e>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	07d9      	lsls	r1, r3, #31
 8005d18:	d5d8      	bpl.n	8005ccc <_printf_float+0x250>
 8005d1a:	ee18 3a10 	vmov	r3, s16
 8005d1e:	4652      	mov	r2, sl
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	f43f af09 	beq.w	8005b3e <_printf_float+0xc2>
 8005d2c:	f04f 0900 	mov.w	r9, #0
 8005d30:	f104 0a1a 	add.w	sl, r4, #26
 8005d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d36:	425b      	negs	r3, r3
 8005d38:	454b      	cmp	r3, r9
 8005d3a:	dc01      	bgt.n	8005d40 <_printf_float+0x2c4>
 8005d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3e:	e792      	b.n	8005c66 <_printf_float+0x1ea>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4652      	mov	r2, sl
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f aef7 	beq.w	8005b3e <_printf_float+0xc2>
 8005d50:	f109 0901 	add.w	r9, r9, #1
 8005d54:	e7ee      	b.n	8005d34 <_printf_float+0x2b8>
 8005d56:	bf00      	nop
 8005d58:	7fefffff 	.word	0x7fefffff
 8005d5c:	08008dd4 	.word	0x08008dd4
 8005d60:	08008dd8 	.word	0x08008dd8
 8005d64:	08008de0 	.word	0x08008de0
 8005d68:	08008ddc 	.word	0x08008ddc
 8005d6c:	08008de4 	.word	0x08008de4
 8005d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d74:	429a      	cmp	r2, r3
 8005d76:	bfa8      	it	ge
 8005d78:	461a      	movge	r2, r3
 8005d7a:	2a00      	cmp	r2, #0
 8005d7c:	4691      	mov	r9, r2
 8005d7e:	dc37      	bgt.n	8005df0 <_printf_float+0x374>
 8005d80:	f04f 0b00 	mov.w	fp, #0
 8005d84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d88:	f104 021a 	add.w	r2, r4, #26
 8005d8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d8e:	9305      	str	r3, [sp, #20]
 8005d90:	eba3 0309 	sub.w	r3, r3, r9
 8005d94:	455b      	cmp	r3, fp
 8005d96:	dc33      	bgt.n	8005e00 <_printf_float+0x384>
 8005d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	db3b      	blt.n	8005e18 <_printf_float+0x39c>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	07da      	lsls	r2, r3, #31
 8005da4:	d438      	bmi.n	8005e18 <_printf_float+0x39c>
 8005da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005da8:	9b05      	ldr	r3, [sp, #20]
 8005daa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	eba2 0901 	sub.w	r9, r2, r1
 8005db2:	4599      	cmp	r9, r3
 8005db4:	bfa8      	it	ge
 8005db6:	4699      	movge	r9, r3
 8005db8:	f1b9 0f00 	cmp.w	r9, #0
 8005dbc:	dc35      	bgt.n	8005e2a <_printf_float+0x3ae>
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dc6:	f104 0a1a 	add.w	sl, r4, #26
 8005dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	eba3 0309 	sub.w	r3, r3, r9
 8005dd4:	4543      	cmp	r3, r8
 8005dd6:	f77f af79 	ble.w	8005ccc <_printf_float+0x250>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4652      	mov	r2, sl
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f aeaa 	beq.w	8005b3e <_printf_float+0xc2>
 8005dea:	f108 0801 	add.w	r8, r8, #1
 8005dee:	e7ec      	b.n	8005dca <_printf_float+0x34e>
 8005df0:	4613      	mov	r3, r2
 8005df2:	4631      	mov	r1, r6
 8005df4:	4642      	mov	r2, r8
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d1c0      	bne.n	8005d80 <_printf_float+0x304>
 8005dfe:	e69e      	b.n	8005b3e <_printf_float+0xc2>
 8005e00:	2301      	movs	r3, #1
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	9205      	str	r2, [sp, #20]
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f ae97 	beq.w	8005b3e <_printf_float+0xc2>
 8005e10:	9a05      	ldr	r2, [sp, #20]
 8005e12:	f10b 0b01 	add.w	fp, fp, #1
 8005e16:	e7b9      	b.n	8005d8c <_printf_float+0x310>
 8005e18:	ee18 3a10 	vmov	r3, s16
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	d1be      	bne.n	8005da6 <_printf_float+0x32a>
 8005e28:	e689      	b.n	8005b3e <_printf_float+0xc2>
 8005e2a:	9a05      	ldr	r2, [sp, #20]
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	4442      	add	r2, r8
 8005e30:	4631      	mov	r1, r6
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	d1c1      	bne.n	8005dbe <_printf_float+0x342>
 8005e3a:	e680      	b.n	8005b3e <_printf_float+0xc2>
 8005e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e3e:	2a01      	cmp	r2, #1
 8005e40:	dc01      	bgt.n	8005e46 <_printf_float+0x3ca>
 8005e42:	07db      	lsls	r3, r3, #31
 8005e44:	d538      	bpl.n	8005eb8 <_printf_float+0x43c>
 8005e46:	2301      	movs	r3, #1
 8005e48:	4642      	mov	r2, r8
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	f43f ae74 	beq.w	8005b3e <_printf_float+0xc2>
 8005e56:	ee18 3a10 	vmov	r3, s16
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4628      	mov	r0, r5
 8005e60:	47b8      	blx	r7
 8005e62:	3001      	adds	r0, #1
 8005e64:	f43f ae6b 	beq.w	8005b3e <_printf_float+0xc2>
 8005e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f7fa fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8005e74:	b9d8      	cbnz	r0, 8005eae <_printf_float+0x432>
 8005e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e78:	f108 0201 	add.w	r2, r8, #1
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	d10e      	bne.n	8005ea6 <_printf_float+0x42a>
 8005e88:	e659      	b.n	8005b3e <_printf_float+0xc2>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	4652      	mov	r2, sl
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b8      	blx	r7
 8005e94:	3001      	adds	r0, #1
 8005e96:	f43f ae52 	beq.w	8005b3e <_printf_float+0xc2>
 8005e9a:	f108 0801 	add.w	r8, r8, #1
 8005e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	4543      	cmp	r3, r8
 8005ea4:	dcf1      	bgt.n	8005e8a <_printf_float+0x40e>
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005eac:	e6dc      	b.n	8005c68 <_printf_float+0x1ec>
 8005eae:	f04f 0800 	mov.w	r8, #0
 8005eb2:	f104 0a1a 	add.w	sl, r4, #26
 8005eb6:	e7f2      	b.n	8005e9e <_printf_float+0x422>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4642      	mov	r2, r8
 8005ebc:	e7df      	b.n	8005e7e <_printf_float+0x402>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	464a      	mov	r2, r9
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f ae38 	beq.w	8005b3e <_printf_float+0xc2>
 8005ece:	f108 0801 	add.w	r8, r8, #1
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ed6:	1a5b      	subs	r3, r3, r1
 8005ed8:	4543      	cmp	r3, r8
 8005eda:	dcf0      	bgt.n	8005ebe <_printf_float+0x442>
 8005edc:	e6fa      	b.n	8005cd4 <_printf_float+0x258>
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	f104 0919 	add.w	r9, r4, #25
 8005ee6:	e7f4      	b.n	8005ed2 <_printf_float+0x456>

08005ee8 <_printf_common>:
 8005ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	4616      	mov	r6, r2
 8005eee:	4699      	mov	r9, r3
 8005ef0:	688a      	ldr	r2, [r1, #8]
 8005ef2:	690b      	ldr	r3, [r1, #16]
 8005ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	bfb8      	it	lt
 8005efc:	4613      	movlt	r3, r2
 8005efe:	6033      	str	r3, [r6, #0]
 8005f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f04:	4607      	mov	r7, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	b10a      	cbz	r2, 8005f0e <_printf_common+0x26>
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	6033      	str	r3, [r6, #0]
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	0699      	lsls	r1, r3, #26
 8005f12:	bf42      	ittt	mi
 8005f14:	6833      	ldrmi	r3, [r6, #0]
 8005f16:	3302      	addmi	r3, #2
 8005f18:	6033      	strmi	r3, [r6, #0]
 8005f1a:	6825      	ldr	r5, [r4, #0]
 8005f1c:	f015 0506 	ands.w	r5, r5, #6
 8005f20:	d106      	bne.n	8005f30 <_printf_common+0x48>
 8005f22:	f104 0a19 	add.w	sl, r4, #25
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	6832      	ldr	r2, [r6, #0]
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	42ab      	cmp	r3, r5
 8005f2e:	dc26      	bgt.n	8005f7e <_printf_common+0x96>
 8005f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f34:	1e13      	subs	r3, r2, #0
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	bf18      	it	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	0692      	lsls	r2, r2, #26
 8005f3e:	d42b      	bmi.n	8005f98 <_printf_common+0xb0>
 8005f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f44:	4649      	mov	r1, r9
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c0      	blx	r8
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d01e      	beq.n	8005f8c <_printf_common+0xa4>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	68e5      	ldr	r5, [r4, #12]
 8005f52:	6832      	ldr	r2, [r6, #0]
 8005f54:	f003 0306 	and.w	r3, r3, #6
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	bf08      	it	eq
 8005f5c:	1aad      	subeq	r5, r5, r2
 8005f5e:	68a3      	ldr	r3, [r4, #8]
 8005f60:	6922      	ldr	r2, [r4, #16]
 8005f62:	bf0c      	ite	eq
 8005f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f68:	2500      	movne	r5, #0
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	bfc4      	itt	gt
 8005f6e:	1a9b      	subgt	r3, r3, r2
 8005f70:	18ed      	addgt	r5, r5, r3
 8005f72:	2600      	movs	r6, #0
 8005f74:	341a      	adds	r4, #26
 8005f76:	42b5      	cmp	r5, r6
 8005f78:	d11a      	bne.n	8005fb0 <_printf_common+0xc8>
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	e008      	b.n	8005f90 <_printf_common+0xa8>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4652      	mov	r2, sl
 8005f82:	4649      	mov	r1, r9
 8005f84:	4638      	mov	r0, r7
 8005f86:	47c0      	blx	r8
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d103      	bne.n	8005f94 <_printf_common+0xac>
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f94:	3501      	adds	r5, #1
 8005f96:	e7c6      	b.n	8005f26 <_printf_common+0x3e>
 8005f98:	18e1      	adds	r1, r4, r3
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	2030      	movs	r0, #48	; 0x30
 8005f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fa2:	4422      	add	r2, r4
 8005fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fac:	3302      	adds	r3, #2
 8005fae:	e7c7      	b.n	8005f40 <_printf_common+0x58>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	47c0      	blx	r8
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d0e6      	beq.n	8005f8c <_printf_common+0xa4>
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7d9      	b.n	8005f76 <_printf_common+0x8e>
	...

08005fc4 <_printf_i>:
 8005fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	460c      	mov	r4, r1
 8005fca:	4691      	mov	r9, r2
 8005fcc:	7e27      	ldrb	r7, [r4, #24]
 8005fce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fd0:	2f78      	cmp	r7, #120	; 0x78
 8005fd2:	4680      	mov	r8, r0
 8005fd4:	469a      	mov	sl, r3
 8005fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fda:	d807      	bhi.n	8005fec <_printf_i+0x28>
 8005fdc:	2f62      	cmp	r7, #98	; 0x62
 8005fde:	d80a      	bhi.n	8005ff6 <_printf_i+0x32>
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	f000 80d8 	beq.w	8006196 <_printf_i+0x1d2>
 8005fe6:	2f58      	cmp	r7, #88	; 0x58
 8005fe8:	f000 80a3 	beq.w	8006132 <_printf_i+0x16e>
 8005fec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ff4:	e03a      	b.n	800606c <_printf_i+0xa8>
 8005ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ffa:	2b15      	cmp	r3, #21
 8005ffc:	d8f6      	bhi.n	8005fec <_printf_i+0x28>
 8005ffe:	a001      	add	r0, pc, #4	; (adr r0, 8006004 <_printf_i+0x40>)
 8006000:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006004:	0800605d 	.word	0x0800605d
 8006008:	08006071 	.word	0x08006071
 800600c:	08005fed 	.word	0x08005fed
 8006010:	08005fed 	.word	0x08005fed
 8006014:	08005fed 	.word	0x08005fed
 8006018:	08005fed 	.word	0x08005fed
 800601c:	08006071 	.word	0x08006071
 8006020:	08005fed 	.word	0x08005fed
 8006024:	08005fed 	.word	0x08005fed
 8006028:	08005fed 	.word	0x08005fed
 800602c:	08005fed 	.word	0x08005fed
 8006030:	0800617d 	.word	0x0800617d
 8006034:	080060a1 	.word	0x080060a1
 8006038:	0800615f 	.word	0x0800615f
 800603c:	08005fed 	.word	0x08005fed
 8006040:	08005fed 	.word	0x08005fed
 8006044:	0800619f 	.word	0x0800619f
 8006048:	08005fed 	.word	0x08005fed
 800604c:	080060a1 	.word	0x080060a1
 8006050:	08005fed 	.word	0x08005fed
 8006054:	08005fed 	.word	0x08005fed
 8006058:	08006167 	.word	0x08006167
 800605c:	680b      	ldr	r3, [r1, #0]
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	600a      	str	r2, [r1, #0]
 8006064:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800606c:	2301      	movs	r3, #1
 800606e:	e0a3      	b.n	80061b8 <_printf_i+0x1f4>
 8006070:	6825      	ldr	r5, [r4, #0]
 8006072:	6808      	ldr	r0, [r1, #0]
 8006074:	062e      	lsls	r6, r5, #24
 8006076:	f100 0304 	add.w	r3, r0, #4
 800607a:	d50a      	bpl.n	8006092 <_printf_i+0xce>
 800607c:	6805      	ldr	r5, [r0, #0]
 800607e:	600b      	str	r3, [r1, #0]
 8006080:	2d00      	cmp	r5, #0
 8006082:	da03      	bge.n	800608c <_printf_i+0xc8>
 8006084:	232d      	movs	r3, #45	; 0x2d
 8006086:	426d      	negs	r5, r5
 8006088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800608c:	485e      	ldr	r0, [pc, #376]	; (8006208 <_printf_i+0x244>)
 800608e:	230a      	movs	r3, #10
 8006090:	e019      	b.n	80060c6 <_printf_i+0x102>
 8006092:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006096:	6805      	ldr	r5, [r0, #0]
 8006098:	600b      	str	r3, [r1, #0]
 800609a:	bf18      	it	ne
 800609c:	b22d      	sxthne	r5, r5
 800609e:	e7ef      	b.n	8006080 <_printf_i+0xbc>
 80060a0:	680b      	ldr	r3, [r1, #0]
 80060a2:	6825      	ldr	r5, [r4, #0]
 80060a4:	1d18      	adds	r0, r3, #4
 80060a6:	6008      	str	r0, [r1, #0]
 80060a8:	0628      	lsls	r0, r5, #24
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0xec>
 80060ac:	681d      	ldr	r5, [r3, #0]
 80060ae:	e002      	b.n	80060b6 <_printf_i+0xf2>
 80060b0:	0669      	lsls	r1, r5, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0xe8>
 80060b4:	881d      	ldrh	r5, [r3, #0]
 80060b6:	4854      	ldr	r0, [pc, #336]	; (8006208 <_printf_i+0x244>)
 80060b8:	2f6f      	cmp	r7, #111	; 0x6f
 80060ba:	bf0c      	ite	eq
 80060bc:	2308      	moveq	r3, #8
 80060be:	230a      	movne	r3, #10
 80060c0:	2100      	movs	r1, #0
 80060c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060c6:	6866      	ldr	r6, [r4, #4]
 80060c8:	60a6      	str	r6, [r4, #8]
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	bfa2      	ittt	ge
 80060ce:	6821      	ldrge	r1, [r4, #0]
 80060d0:	f021 0104 	bicge.w	r1, r1, #4
 80060d4:	6021      	strge	r1, [r4, #0]
 80060d6:	b90d      	cbnz	r5, 80060dc <_printf_i+0x118>
 80060d8:	2e00      	cmp	r6, #0
 80060da:	d04d      	beq.n	8006178 <_printf_i+0x1b4>
 80060dc:	4616      	mov	r6, r2
 80060de:	fbb5 f1f3 	udiv	r1, r5, r3
 80060e2:	fb03 5711 	mls	r7, r3, r1, r5
 80060e6:	5dc7      	ldrb	r7, [r0, r7]
 80060e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060ec:	462f      	mov	r7, r5
 80060ee:	42bb      	cmp	r3, r7
 80060f0:	460d      	mov	r5, r1
 80060f2:	d9f4      	bls.n	80060de <_printf_i+0x11a>
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d10b      	bne.n	8006110 <_printf_i+0x14c>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	07df      	lsls	r7, r3, #31
 80060fc:	d508      	bpl.n	8006110 <_printf_i+0x14c>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	6861      	ldr	r1, [r4, #4]
 8006102:	4299      	cmp	r1, r3
 8006104:	bfde      	ittt	le
 8006106:	2330      	movle	r3, #48	; 0x30
 8006108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800610c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006110:	1b92      	subs	r2, r2, r6
 8006112:	6122      	str	r2, [r4, #16]
 8006114:	f8cd a000 	str.w	sl, [sp]
 8006118:	464b      	mov	r3, r9
 800611a:	aa03      	add	r2, sp, #12
 800611c:	4621      	mov	r1, r4
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fee2 	bl	8005ee8 <_printf_common>
 8006124:	3001      	adds	r0, #1
 8006126:	d14c      	bne.n	80061c2 <_printf_i+0x1fe>
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	b004      	add	sp, #16
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	4835      	ldr	r0, [pc, #212]	; (8006208 <_printf_i+0x244>)
 8006134:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	680e      	ldr	r6, [r1, #0]
 800613c:	061f      	lsls	r7, r3, #24
 800613e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006142:	600e      	str	r6, [r1, #0]
 8006144:	d514      	bpl.n	8006170 <_printf_i+0x1ac>
 8006146:	07d9      	lsls	r1, r3, #31
 8006148:	bf44      	itt	mi
 800614a:	f043 0320 	orrmi.w	r3, r3, #32
 800614e:	6023      	strmi	r3, [r4, #0]
 8006150:	b91d      	cbnz	r5, 800615a <_printf_i+0x196>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	f023 0320 	bic.w	r3, r3, #32
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	2310      	movs	r3, #16
 800615c:	e7b0      	b.n	80060c0 <_printf_i+0xfc>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f043 0320 	orr.w	r3, r3, #32
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	2378      	movs	r3, #120	; 0x78
 8006168:	4828      	ldr	r0, [pc, #160]	; (800620c <_printf_i+0x248>)
 800616a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800616e:	e7e3      	b.n	8006138 <_printf_i+0x174>
 8006170:	065e      	lsls	r6, r3, #25
 8006172:	bf48      	it	mi
 8006174:	b2ad      	uxthmi	r5, r5
 8006176:	e7e6      	b.n	8006146 <_printf_i+0x182>
 8006178:	4616      	mov	r6, r2
 800617a:	e7bb      	b.n	80060f4 <_printf_i+0x130>
 800617c:	680b      	ldr	r3, [r1, #0]
 800617e:	6826      	ldr	r6, [r4, #0]
 8006180:	6960      	ldr	r0, [r4, #20]
 8006182:	1d1d      	adds	r5, r3, #4
 8006184:	600d      	str	r5, [r1, #0]
 8006186:	0635      	lsls	r5, r6, #24
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	d501      	bpl.n	8006190 <_printf_i+0x1cc>
 800618c:	6018      	str	r0, [r3, #0]
 800618e:	e002      	b.n	8006196 <_printf_i+0x1d2>
 8006190:	0671      	lsls	r1, r6, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0x1c8>
 8006194:	8018      	strh	r0, [r3, #0]
 8006196:	2300      	movs	r3, #0
 8006198:	6123      	str	r3, [r4, #16]
 800619a:	4616      	mov	r6, r2
 800619c:	e7ba      	b.n	8006114 <_printf_i+0x150>
 800619e:	680b      	ldr	r3, [r1, #0]
 80061a0:	1d1a      	adds	r2, r3, #4
 80061a2:	600a      	str	r2, [r1, #0]
 80061a4:	681e      	ldr	r6, [r3, #0]
 80061a6:	6862      	ldr	r2, [r4, #4]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7fa f838 	bl	8000220 <memchr>
 80061b0:	b108      	cbz	r0, 80061b6 <_printf_i+0x1f2>
 80061b2:	1b80      	subs	r0, r0, r6
 80061b4:	6060      	str	r0, [r4, #4]
 80061b6:	6863      	ldr	r3, [r4, #4]
 80061b8:	6123      	str	r3, [r4, #16]
 80061ba:	2300      	movs	r3, #0
 80061bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c0:	e7a8      	b.n	8006114 <_printf_i+0x150>
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	4632      	mov	r2, r6
 80061c6:	4649      	mov	r1, r9
 80061c8:	4640      	mov	r0, r8
 80061ca:	47d0      	blx	sl
 80061cc:	3001      	adds	r0, #1
 80061ce:	d0ab      	beq.n	8006128 <_printf_i+0x164>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	079b      	lsls	r3, r3, #30
 80061d4:	d413      	bmi.n	80061fe <_printf_i+0x23a>
 80061d6:	68e0      	ldr	r0, [r4, #12]
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	4298      	cmp	r0, r3
 80061dc:	bfb8      	it	lt
 80061de:	4618      	movlt	r0, r3
 80061e0:	e7a4      	b.n	800612c <_printf_i+0x168>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4632      	mov	r2, r6
 80061e6:	4649      	mov	r1, r9
 80061e8:	4640      	mov	r0, r8
 80061ea:	47d0      	blx	sl
 80061ec:	3001      	adds	r0, #1
 80061ee:	d09b      	beq.n	8006128 <_printf_i+0x164>
 80061f0:	3501      	adds	r5, #1
 80061f2:	68e3      	ldr	r3, [r4, #12]
 80061f4:	9903      	ldr	r1, [sp, #12]
 80061f6:	1a5b      	subs	r3, r3, r1
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	dcf2      	bgt.n	80061e2 <_printf_i+0x21e>
 80061fc:	e7eb      	b.n	80061d6 <_printf_i+0x212>
 80061fe:	2500      	movs	r5, #0
 8006200:	f104 0619 	add.w	r6, r4, #25
 8006204:	e7f5      	b.n	80061f2 <_printf_i+0x22e>
 8006206:	bf00      	nop
 8006208:	08008de6 	.word	0x08008de6
 800620c:	08008df7 	.word	0x08008df7

08006210 <_puts_r>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	460e      	mov	r6, r1
 8006214:	4605      	mov	r5, r0
 8006216:	b118      	cbz	r0, 8006220 <_puts_r+0x10>
 8006218:	6983      	ldr	r3, [r0, #24]
 800621a:	b90b      	cbnz	r3, 8006220 <_puts_r+0x10>
 800621c:	f001 f8e2 	bl	80073e4 <__sinit>
 8006220:	69ab      	ldr	r3, [r5, #24]
 8006222:	68ac      	ldr	r4, [r5, #8]
 8006224:	b913      	cbnz	r3, 800622c <_puts_r+0x1c>
 8006226:	4628      	mov	r0, r5
 8006228:	f001 f8dc 	bl	80073e4 <__sinit>
 800622c:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <_puts_r+0xd0>)
 800622e:	429c      	cmp	r4, r3
 8006230:	d120      	bne.n	8006274 <_puts_r+0x64>
 8006232:	686c      	ldr	r4, [r5, #4]
 8006234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006236:	07db      	lsls	r3, r3, #31
 8006238:	d405      	bmi.n	8006246 <_puts_r+0x36>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	0598      	lsls	r0, r3, #22
 800623e:	d402      	bmi.n	8006246 <_puts_r+0x36>
 8006240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006242:	f001 f972 	bl	800752a <__retarget_lock_acquire_recursive>
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	0719      	lsls	r1, r3, #28
 800624a:	d51d      	bpl.n	8006288 <_puts_r+0x78>
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	b1db      	cbz	r3, 8006288 <_puts_r+0x78>
 8006250:	3e01      	subs	r6, #1
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006258:	3b01      	subs	r3, #1
 800625a:	60a3      	str	r3, [r4, #8]
 800625c:	bb39      	cbnz	r1, 80062ae <_puts_r+0x9e>
 800625e:	2b00      	cmp	r3, #0
 8006260:	da38      	bge.n	80062d4 <_puts_r+0xc4>
 8006262:	4622      	mov	r2, r4
 8006264:	210a      	movs	r1, #10
 8006266:	4628      	mov	r0, r5
 8006268:	f000 f868 	bl	800633c <__swbuf_r>
 800626c:	3001      	adds	r0, #1
 800626e:	d011      	beq.n	8006294 <_puts_r+0x84>
 8006270:	250a      	movs	r5, #10
 8006272:	e011      	b.n	8006298 <_puts_r+0x88>
 8006274:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <_puts_r+0xd4>)
 8006276:	429c      	cmp	r4, r3
 8006278:	d101      	bne.n	800627e <_puts_r+0x6e>
 800627a:	68ac      	ldr	r4, [r5, #8]
 800627c:	e7da      	b.n	8006234 <_puts_r+0x24>
 800627e:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <_puts_r+0xd8>)
 8006280:	429c      	cmp	r4, r3
 8006282:	bf08      	it	eq
 8006284:	68ec      	ldreq	r4, [r5, #12]
 8006286:	e7d5      	b.n	8006234 <_puts_r+0x24>
 8006288:	4621      	mov	r1, r4
 800628a:	4628      	mov	r0, r5
 800628c:	f000 f8a8 	bl	80063e0 <__swsetup_r>
 8006290:	2800      	cmp	r0, #0
 8006292:	d0dd      	beq.n	8006250 <_puts_r+0x40>
 8006294:	f04f 35ff 	mov.w	r5, #4294967295
 8006298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800629a:	07da      	lsls	r2, r3, #31
 800629c:	d405      	bmi.n	80062aa <_puts_r+0x9a>
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	059b      	lsls	r3, r3, #22
 80062a2:	d402      	bmi.n	80062aa <_puts_r+0x9a>
 80062a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a6:	f001 f941 	bl	800752c <__retarget_lock_release_recursive>
 80062aa:	4628      	mov	r0, r5
 80062ac:	bd70      	pop	{r4, r5, r6, pc}
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da04      	bge.n	80062bc <_puts_r+0xac>
 80062b2:	69a2      	ldr	r2, [r4, #24]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	dc06      	bgt.n	80062c6 <_puts_r+0xb6>
 80062b8:	290a      	cmp	r1, #10
 80062ba:	d004      	beq.n	80062c6 <_puts_r+0xb6>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	6022      	str	r2, [r4, #0]
 80062c2:	7019      	strb	r1, [r3, #0]
 80062c4:	e7c5      	b.n	8006252 <_puts_r+0x42>
 80062c6:	4622      	mov	r2, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 f837 	bl	800633c <__swbuf_r>
 80062ce:	3001      	adds	r0, #1
 80062d0:	d1bf      	bne.n	8006252 <_puts_r+0x42>
 80062d2:	e7df      	b.n	8006294 <_puts_r+0x84>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	250a      	movs	r5, #10
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	6022      	str	r2, [r4, #0]
 80062dc:	701d      	strb	r5, [r3, #0]
 80062de:	e7db      	b.n	8006298 <_puts_r+0x88>
 80062e0:	08008ebc 	.word	0x08008ebc
 80062e4:	08008edc 	.word	0x08008edc
 80062e8:	08008e9c 	.word	0x08008e9c

080062ec <puts>:
 80062ec:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <puts+0xc>)
 80062ee:	4601      	mov	r1, r0
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	f7ff bf8d 	b.w	8006210 <_puts_r>
 80062f6:	bf00      	nop
 80062f8:	20000018 	.word	0x20000018

080062fc <siprintf>:
 80062fc:	b40e      	push	{r1, r2, r3}
 80062fe:	b500      	push	{lr}
 8006300:	b09c      	sub	sp, #112	; 0x70
 8006302:	ab1d      	add	r3, sp, #116	; 0x74
 8006304:	9002      	str	r0, [sp, #8]
 8006306:	9006      	str	r0, [sp, #24]
 8006308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800630c:	4809      	ldr	r0, [pc, #36]	; (8006334 <siprintf+0x38>)
 800630e:	9107      	str	r1, [sp, #28]
 8006310:	9104      	str	r1, [sp, #16]
 8006312:	4909      	ldr	r1, [pc, #36]	; (8006338 <siprintf+0x3c>)
 8006314:	f853 2b04 	ldr.w	r2, [r3], #4
 8006318:	9105      	str	r1, [sp, #20]
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	a902      	add	r1, sp, #8
 8006320:	f001 fe14 	bl	8007f4c <_svfiprintf_r>
 8006324:	9b02      	ldr	r3, [sp, #8]
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	b01c      	add	sp, #112	; 0x70
 800632c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006330:	b003      	add	sp, #12
 8006332:	4770      	bx	lr
 8006334:	20000018 	.word	0x20000018
 8006338:	ffff0208 	.word	0xffff0208

0800633c <__swbuf_r>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	460e      	mov	r6, r1
 8006340:	4614      	mov	r4, r2
 8006342:	4605      	mov	r5, r0
 8006344:	b118      	cbz	r0, 800634e <__swbuf_r+0x12>
 8006346:	6983      	ldr	r3, [r0, #24]
 8006348:	b90b      	cbnz	r3, 800634e <__swbuf_r+0x12>
 800634a:	f001 f84b 	bl	80073e4 <__sinit>
 800634e:	4b21      	ldr	r3, [pc, #132]	; (80063d4 <__swbuf_r+0x98>)
 8006350:	429c      	cmp	r4, r3
 8006352:	d12b      	bne.n	80063ac <__swbuf_r+0x70>
 8006354:	686c      	ldr	r4, [r5, #4]
 8006356:	69a3      	ldr	r3, [r4, #24]
 8006358:	60a3      	str	r3, [r4, #8]
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	071a      	lsls	r2, r3, #28
 800635e:	d52f      	bpl.n	80063c0 <__swbuf_r+0x84>
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	b36b      	cbz	r3, 80063c0 <__swbuf_r+0x84>
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	6820      	ldr	r0, [r4, #0]
 8006368:	1ac0      	subs	r0, r0, r3
 800636a:	6963      	ldr	r3, [r4, #20]
 800636c:	b2f6      	uxtb	r6, r6
 800636e:	4283      	cmp	r3, r0
 8006370:	4637      	mov	r7, r6
 8006372:	dc04      	bgt.n	800637e <__swbuf_r+0x42>
 8006374:	4621      	mov	r1, r4
 8006376:	4628      	mov	r0, r5
 8006378:	f000 ffa0 	bl	80072bc <_fflush_r>
 800637c:	bb30      	cbnz	r0, 80063cc <__swbuf_r+0x90>
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	3b01      	subs	r3, #1
 8006382:	60a3      	str	r3, [r4, #8]
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	6022      	str	r2, [r4, #0]
 800638a:	701e      	strb	r6, [r3, #0]
 800638c:	6963      	ldr	r3, [r4, #20]
 800638e:	3001      	adds	r0, #1
 8006390:	4283      	cmp	r3, r0
 8006392:	d004      	beq.n	800639e <__swbuf_r+0x62>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	07db      	lsls	r3, r3, #31
 8006398:	d506      	bpl.n	80063a8 <__swbuf_r+0x6c>
 800639a:	2e0a      	cmp	r6, #10
 800639c:	d104      	bne.n	80063a8 <__swbuf_r+0x6c>
 800639e:	4621      	mov	r1, r4
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 ff8b 	bl	80072bc <_fflush_r>
 80063a6:	b988      	cbnz	r0, 80063cc <__swbuf_r+0x90>
 80063a8:	4638      	mov	r0, r7
 80063aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <__swbuf_r+0x9c>)
 80063ae:	429c      	cmp	r4, r3
 80063b0:	d101      	bne.n	80063b6 <__swbuf_r+0x7a>
 80063b2:	68ac      	ldr	r4, [r5, #8]
 80063b4:	e7cf      	b.n	8006356 <__swbuf_r+0x1a>
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <__swbuf_r+0xa0>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	bf08      	it	eq
 80063bc:	68ec      	ldreq	r4, [r5, #12]
 80063be:	e7ca      	b.n	8006356 <__swbuf_r+0x1a>
 80063c0:	4621      	mov	r1, r4
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 f80c 	bl	80063e0 <__swsetup_r>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d0cb      	beq.n	8006364 <__swbuf_r+0x28>
 80063cc:	f04f 37ff 	mov.w	r7, #4294967295
 80063d0:	e7ea      	b.n	80063a8 <__swbuf_r+0x6c>
 80063d2:	bf00      	nop
 80063d4:	08008ebc 	.word	0x08008ebc
 80063d8:	08008edc 	.word	0x08008edc
 80063dc:	08008e9c 	.word	0x08008e9c

080063e0 <__swsetup_r>:
 80063e0:	4b32      	ldr	r3, [pc, #200]	; (80064ac <__swsetup_r+0xcc>)
 80063e2:	b570      	push	{r4, r5, r6, lr}
 80063e4:	681d      	ldr	r5, [r3, #0]
 80063e6:	4606      	mov	r6, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	b125      	cbz	r5, 80063f6 <__swsetup_r+0x16>
 80063ec:	69ab      	ldr	r3, [r5, #24]
 80063ee:	b913      	cbnz	r3, 80063f6 <__swsetup_r+0x16>
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 fff7 	bl	80073e4 <__sinit>
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <__swsetup_r+0xd0>)
 80063f8:	429c      	cmp	r4, r3
 80063fa:	d10f      	bne.n	800641c <__swsetup_r+0x3c>
 80063fc:	686c      	ldr	r4, [r5, #4]
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006404:	0719      	lsls	r1, r3, #28
 8006406:	d42c      	bmi.n	8006462 <__swsetup_r+0x82>
 8006408:	06dd      	lsls	r5, r3, #27
 800640a:	d411      	bmi.n	8006430 <__swsetup_r+0x50>
 800640c:	2309      	movs	r3, #9
 800640e:	6033      	str	r3, [r6, #0]
 8006410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	f04f 30ff 	mov.w	r0, #4294967295
 800641a:	e03e      	b.n	800649a <__swsetup_r+0xba>
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <__swsetup_r+0xd4>)
 800641e:	429c      	cmp	r4, r3
 8006420:	d101      	bne.n	8006426 <__swsetup_r+0x46>
 8006422:	68ac      	ldr	r4, [r5, #8]
 8006424:	e7eb      	b.n	80063fe <__swsetup_r+0x1e>
 8006426:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <__swsetup_r+0xd8>)
 8006428:	429c      	cmp	r4, r3
 800642a:	bf08      	it	eq
 800642c:	68ec      	ldreq	r4, [r5, #12]
 800642e:	e7e6      	b.n	80063fe <__swsetup_r+0x1e>
 8006430:	0758      	lsls	r0, r3, #29
 8006432:	d512      	bpl.n	800645a <__swsetup_r+0x7a>
 8006434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006436:	b141      	cbz	r1, 800644a <__swsetup_r+0x6a>
 8006438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800643c:	4299      	cmp	r1, r3
 800643e:	d002      	beq.n	8006446 <__swsetup_r+0x66>
 8006440:	4630      	mov	r0, r6
 8006442:	f001 fc7d 	bl	8007d40 <_free_r>
 8006446:	2300      	movs	r3, #0
 8006448:	6363      	str	r3, [r4, #52]	; 0x34
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	2300      	movs	r3, #0
 8006454:	6063      	str	r3, [r4, #4]
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f043 0308 	orr.w	r3, r3, #8
 8006460:	81a3      	strh	r3, [r4, #12]
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	b94b      	cbnz	r3, 800647a <__swsetup_r+0x9a>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800646c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006470:	d003      	beq.n	800647a <__swsetup_r+0x9a>
 8006472:	4621      	mov	r1, r4
 8006474:	4630      	mov	r0, r6
 8006476:	f001 f87f 	bl	8007578 <__smakebuf_r>
 800647a:	89a0      	ldrh	r0, [r4, #12]
 800647c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006480:	f010 0301 	ands.w	r3, r0, #1
 8006484:	d00a      	beq.n	800649c <__swsetup_r+0xbc>
 8006486:	2300      	movs	r3, #0
 8006488:	60a3      	str	r3, [r4, #8]
 800648a:	6963      	ldr	r3, [r4, #20]
 800648c:	425b      	negs	r3, r3
 800648e:	61a3      	str	r3, [r4, #24]
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	b943      	cbnz	r3, 80064a6 <__swsetup_r+0xc6>
 8006494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006498:	d1ba      	bne.n	8006410 <__swsetup_r+0x30>
 800649a:	bd70      	pop	{r4, r5, r6, pc}
 800649c:	0781      	lsls	r1, r0, #30
 800649e:	bf58      	it	pl
 80064a0:	6963      	ldrpl	r3, [r4, #20]
 80064a2:	60a3      	str	r3, [r4, #8]
 80064a4:	e7f4      	b.n	8006490 <__swsetup_r+0xb0>
 80064a6:	2000      	movs	r0, #0
 80064a8:	e7f7      	b.n	800649a <__swsetup_r+0xba>
 80064aa:	bf00      	nop
 80064ac:	20000018 	.word	0x20000018
 80064b0:	08008ebc 	.word	0x08008ebc
 80064b4:	08008edc 	.word	0x08008edc
 80064b8:	08008e9c 	.word	0x08008e9c

080064bc <quorem>:
 80064bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	6903      	ldr	r3, [r0, #16]
 80064c2:	690c      	ldr	r4, [r1, #16]
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	4607      	mov	r7, r0
 80064c8:	f2c0 8081 	blt.w	80065ce <quorem+0x112>
 80064cc:	3c01      	subs	r4, #1
 80064ce:	f101 0814 	add.w	r8, r1, #20
 80064d2:	f100 0514 	add.w	r5, r0, #20
 80064d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064e4:	3301      	adds	r3, #1
 80064e6:	429a      	cmp	r2, r3
 80064e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064f4:	d331      	bcc.n	800655a <quorem+0x9e>
 80064f6:	f04f 0e00 	mov.w	lr, #0
 80064fa:	4640      	mov	r0, r8
 80064fc:	46ac      	mov	ip, r5
 80064fe:	46f2      	mov	sl, lr
 8006500:	f850 2b04 	ldr.w	r2, [r0], #4
 8006504:	b293      	uxth	r3, r2
 8006506:	fb06 e303 	mla	r3, r6, r3, lr
 800650a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800650e:	b29b      	uxth	r3, r3
 8006510:	ebaa 0303 	sub.w	r3, sl, r3
 8006514:	0c12      	lsrs	r2, r2, #16
 8006516:	f8dc a000 	ldr.w	sl, [ip]
 800651a:	fb06 e202 	mla	r2, r6, r2, lr
 800651e:	fa13 f38a 	uxtah	r3, r3, sl
 8006522:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006526:	fa1f fa82 	uxth.w	sl, r2
 800652a:	f8dc 2000 	ldr.w	r2, [ip]
 800652e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006532:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006536:	b29b      	uxth	r3, r3
 8006538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800653c:	4581      	cmp	r9, r0
 800653e:	f84c 3b04 	str.w	r3, [ip], #4
 8006542:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006546:	d2db      	bcs.n	8006500 <quorem+0x44>
 8006548:	f855 300b 	ldr.w	r3, [r5, fp]
 800654c:	b92b      	cbnz	r3, 800655a <quorem+0x9e>
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	3b04      	subs	r3, #4
 8006552:	429d      	cmp	r5, r3
 8006554:	461a      	mov	r2, r3
 8006556:	d32e      	bcc.n	80065b6 <quorem+0xfa>
 8006558:	613c      	str	r4, [r7, #16]
 800655a:	4638      	mov	r0, r7
 800655c:	f001 fae0 	bl	8007b20 <__mcmp>
 8006560:	2800      	cmp	r0, #0
 8006562:	db24      	blt.n	80065ae <quorem+0xf2>
 8006564:	3601      	adds	r6, #1
 8006566:	4628      	mov	r0, r5
 8006568:	f04f 0c00 	mov.w	ip, #0
 800656c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006570:	f8d0 e000 	ldr.w	lr, [r0]
 8006574:	b293      	uxth	r3, r2
 8006576:	ebac 0303 	sub.w	r3, ip, r3
 800657a:	0c12      	lsrs	r2, r2, #16
 800657c:	fa13 f38e 	uxtah	r3, r3, lr
 8006580:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006588:	b29b      	uxth	r3, r3
 800658a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800658e:	45c1      	cmp	r9, r8
 8006590:	f840 3b04 	str.w	r3, [r0], #4
 8006594:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006598:	d2e8      	bcs.n	800656c <quorem+0xb0>
 800659a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800659e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065a2:	b922      	cbnz	r2, 80065ae <quorem+0xf2>
 80065a4:	3b04      	subs	r3, #4
 80065a6:	429d      	cmp	r5, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	d30a      	bcc.n	80065c2 <quorem+0x106>
 80065ac:	613c      	str	r4, [r7, #16]
 80065ae:	4630      	mov	r0, r6
 80065b0:	b003      	add	sp, #12
 80065b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	3b04      	subs	r3, #4
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	d1cc      	bne.n	8006558 <quorem+0x9c>
 80065be:	3c01      	subs	r4, #1
 80065c0:	e7c7      	b.n	8006552 <quorem+0x96>
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d1f0      	bne.n	80065ac <quorem+0xf0>
 80065ca:	3c01      	subs	r4, #1
 80065cc:	e7eb      	b.n	80065a6 <quorem+0xea>
 80065ce:	2000      	movs	r0, #0
 80065d0:	e7ee      	b.n	80065b0 <quorem+0xf4>
 80065d2:	0000      	movs	r0, r0
 80065d4:	0000      	movs	r0, r0
	...

080065d8 <_dtoa_r>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	ed2d 8b02 	vpush	{d8}
 80065e0:	ec57 6b10 	vmov	r6, r7, d0
 80065e4:	b095      	sub	sp, #84	; 0x54
 80065e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065ec:	9105      	str	r1, [sp, #20]
 80065ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80065f2:	4604      	mov	r4, r0
 80065f4:	9209      	str	r2, [sp, #36]	; 0x24
 80065f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065f8:	b975      	cbnz	r5, 8006618 <_dtoa_r+0x40>
 80065fa:	2010      	movs	r0, #16
 80065fc:	f000 fffc 	bl	80075f8 <malloc>
 8006600:	4602      	mov	r2, r0
 8006602:	6260      	str	r0, [r4, #36]	; 0x24
 8006604:	b920      	cbnz	r0, 8006610 <_dtoa_r+0x38>
 8006606:	4bb2      	ldr	r3, [pc, #712]	; (80068d0 <_dtoa_r+0x2f8>)
 8006608:	21ea      	movs	r1, #234	; 0xea
 800660a:	48b2      	ldr	r0, [pc, #712]	; (80068d4 <_dtoa_r+0x2fc>)
 800660c:	f001 fe04 	bl	8008218 <__assert_func>
 8006610:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006614:	6005      	str	r5, [r0, #0]
 8006616:	60c5      	str	r5, [r0, #12]
 8006618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800661a:	6819      	ldr	r1, [r3, #0]
 800661c:	b151      	cbz	r1, 8006634 <_dtoa_r+0x5c>
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	604a      	str	r2, [r1, #4]
 8006622:	2301      	movs	r3, #1
 8006624:	4093      	lsls	r3, r2
 8006626:	608b      	str	r3, [r1, #8]
 8006628:	4620      	mov	r0, r4
 800662a:	f001 f83b 	bl	80076a4 <_Bfree>
 800662e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	1e3b      	subs	r3, r7, #0
 8006636:	bfb9      	ittee	lt
 8006638:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800663c:	9303      	strlt	r3, [sp, #12]
 800663e:	2300      	movge	r3, #0
 8006640:	f8c8 3000 	strge.w	r3, [r8]
 8006644:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006648:	4ba3      	ldr	r3, [pc, #652]	; (80068d8 <_dtoa_r+0x300>)
 800664a:	bfbc      	itt	lt
 800664c:	2201      	movlt	r2, #1
 800664e:	f8c8 2000 	strlt.w	r2, [r8]
 8006652:	ea33 0309 	bics.w	r3, r3, r9
 8006656:	d11b      	bne.n	8006690 <_dtoa_r+0xb8>
 8006658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800665a:	f242 730f 	movw	r3, #9999	; 0x270f
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006664:	4333      	orrs	r3, r6
 8006666:	f000 857a 	beq.w	800715e <_dtoa_r+0xb86>
 800666a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800666c:	b963      	cbnz	r3, 8006688 <_dtoa_r+0xb0>
 800666e:	4b9b      	ldr	r3, [pc, #620]	; (80068dc <_dtoa_r+0x304>)
 8006670:	e024      	b.n	80066bc <_dtoa_r+0xe4>
 8006672:	4b9b      	ldr	r3, [pc, #620]	; (80068e0 <_dtoa_r+0x308>)
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	3308      	adds	r3, #8
 8006678:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	9800      	ldr	r0, [sp, #0]
 800667e:	b015      	add	sp, #84	; 0x54
 8006680:	ecbd 8b02 	vpop	{d8}
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	4b94      	ldr	r3, [pc, #592]	; (80068dc <_dtoa_r+0x304>)
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	3303      	adds	r3, #3
 800668e:	e7f3      	b.n	8006678 <_dtoa_r+0xa0>
 8006690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006694:	2200      	movs	r2, #0
 8006696:	ec51 0b17 	vmov	r0, r1, d7
 800669a:	2300      	movs	r3, #0
 800669c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80066a0:	f7fa fa32 	bl	8000b08 <__aeabi_dcmpeq>
 80066a4:	4680      	mov	r8, r0
 80066a6:	b158      	cbz	r0, 80066c0 <_dtoa_r+0xe8>
 80066a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066aa:	2301      	movs	r3, #1
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8551 	beq.w	8007158 <_dtoa_r+0xb80>
 80066b6:	488b      	ldr	r0, [pc, #556]	; (80068e4 <_dtoa_r+0x30c>)
 80066b8:	6018      	str	r0, [r3, #0]
 80066ba:	1e43      	subs	r3, r0, #1
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	e7dd      	b.n	800667c <_dtoa_r+0xa4>
 80066c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80066c4:	aa12      	add	r2, sp, #72	; 0x48
 80066c6:	a913      	add	r1, sp, #76	; 0x4c
 80066c8:	4620      	mov	r0, r4
 80066ca:	f001 facd 	bl	8007c68 <__d2b>
 80066ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066d2:	4683      	mov	fp, r0
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	d07c      	beq.n	80067d2 <_dtoa_r+0x1fa>
 80066d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80066de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80066e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066f2:	4b7d      	ldr	r3, [pc, #500]	; (80068e8 <_dtoa_r+0x310>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	4630      	mov	r0, r6
 80066f8:	4639      	mov	r1, r7
 80066fa:	f7f9 fde5 	bl	80002c8 <__aeabi_dsub>
 80066fe:	a36e      	add	r3, pc, #440	; (adr r3, 80068b8 <_dtoa_r+0x2e0>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f7f9 ff98 	bl	8000638 <__aeabi_dmul>
 8006708:	a36d      	add	r3, pc, #436	; (adr r3, 80068c0 <_dtoa_r+0x2e8>)
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f7f9 fddd 	bl	80002cc <__adddf3>
 8006712:	4606      	mov	r6, r0
 8006714:	4628      	mov	r0, r5
 8006716:	460f      	mov	r7, r1
 8006718:	f7f9 ff24 	bl	8000564 <__aeabi_i2d>
 800671c:	a36a      	add	r3, pc, #424	; (adr r3, 80068c8 <_dtoa_r+0x2f0>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7f9 ff89 	bl	8000638 <__aeabi_dmul>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7f9 fdcd 	bl	80002cc <__adddf3>
 8006732:	4606      	mov	r6, r0
 8006734:	460f      	mov	r7, r1
 8006736:	f7fa fa2f 	bl	8000b98 <__aeabi_d2iz>
 800673a:	2200      	movs	r2, #0
 800673c:	4682      	mov	sl, r0
 800673e:	2300      	movs	r3, #0
 8006740:	4630      	mov	r0, r6
 8006742:	4639      	mov	r1, r7
 8006744:	f7fa f9ea 	bl	8000b1c <__aeabi_dcmplt>
 8006748:	b148      	cbz	r0, 800675e <_dtoa_r+0x186>
 800674a:	4650      	mov	r0, sl
 800674c:	f7f9 ff0a 	bl	8000564 <__aeabi_i2d>
 8006750:	4632      	mov	r2, r6
 8006752:	463b      	mov	r3, r7
 8006754:	f7fa f9d8 	bl	8000b08 <__aeabi_dcmpeq>
 8006758:	b908      	cbnz	r0, 800675e <_dtoa_r+0x186>
 800675a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800675e:	f1ba 0f16 	cmp.w	sl, #22
 8006762:	d854      	bhi.n	800680e <_dtoa_r+0x236>
 8006764:	4b61      	ldr	r3, [pc, #388]	; (80068ec <_dtoa_r+0x314>)
 8006766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006772:	f7fa f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8006776:	2800      	cmp	r0, #0
 8006778:	d04b      	beq.n	8006812 <_dtoa_r+0x23a>
 800677a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800677e:	2300      	movs	r3, #0
 8006780:	930e      	str	r3, [sp, #56]	; 0x38
 8006782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006784:	1b5d      	subs	r5, r3, r5
 8006786:	1e6b      	subs	r3, r5, #1
 8006788:	9304      	str	r3, [sp, #16]
 800678a:	bf43      	ittte	mi
 800678c:	2300      	movmi	r3, #0
 800678e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006792:	9304      	strmi	r3, [sp, #16]
 8006794:	f04f 0800 	movpl.w	r8, #0
 8006798:	f1ba 0f00 	cmp.w	sl, #0
 800679c:	db3b      	blt.n	8006816 <_dtoa_r+0x23e>
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80067a4:	4453      	add	r3, sl
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	2300      	movs	r3, #0
 80067aa:	9306      	str	r3, [sp, #24]
 80067ac:	9b05      	ldr	r3, [sp, #20]
 80067ae:	2b09      	cmp	r3, #9
 80067b0:	d869      	bhi.n	8006886 <_dtoa_r+0x2ae>
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	bfc4      	itt	gt
 80067b6:	3b04      	subgt	r3, #4
 80067b8:	9305      	strgt	r3, [sp, #20]
 80067ba:	9b05      	ldr	r3, [sp, #20]
 80067bc:	f1a3 0302 	sub.w	r3, r3, #2
 80067c0:	bfcc      	ite	gt
 80067c2:	2500      	movgt	r5, #0
 80067c4:	2501      	movle	r5, #1
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d869      	bhi.n	800689e <_dtoa_r+0x2c6>
 80067ca:	e8df f003 	tbb	[pc, r3]
 80067ce:	4e2c      	.short	0x4e2c
 80067d0:	5a4c      	.short	0x5a4c
 80067d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80067d6:	441d      	add	r5, r3
 80067d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067dc:	2b20      	cmp	r3, #32
 80067de:	bfc1      	itttt	gt
 80067e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80067ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067f0:	bfda      	itte	le
 80067f2:	f1c3 0320 	rsble	r3, r3, #32
 80067f6:	fa06 f003 	lslle.w	r0, r6, r3
 80067fa:	4318      	orrgt	r0, r3
 80067fc:	f7f9 fea2 	bl	8000544 <__aeabi_ui2d>
 8006800:	2301      	movs	r3, #1
 8006802:	4606      	mov	r6, r0
 8006804:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006808:	3d01      	subs	r5, #1
 800680a:	9310      	str	r3, [sp, #64]	; 0x40
 800680c:	e771      	b.n	80066f2 <_dtoa_r+0x11a>
 800680e:	2301      	movs	r3, #1
 8006810:	e7b6      	b.n	8006780 <_dtoa_r+0x1a8>
 8006812:	900e      	str	r0, [sp, #56]	; 0x38
 8006814:	e7b5      	b.n	8006782 <_dtoa_r+0x1aa>
 8006816:	f1ca 0300 	rsb	r3, sl, #0
 800681a:	9306      	str	r3, [sp, #24]
 800681c:	2300      	movs	r3, #0
 800681e:	eba8 080a 	sub.w	r8, r8, sl
 8006822:	930d      	str	r3, [sp, #52]	; 0x34
 8006824:	e7c2      	b.n	80067ac <_dtoa_r+0x1d4>
 8006826:	2300      	movs	r3, #0
 8006828:	9308      	str	r3, [sp, #32]
 800682a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	dc39      	bgt.n	80068a4 <_dtoa_r+0x2cc>
 8006830:	f04f 0901 	mov.w	r9, #1
 8006834:	f8cd 9004 	str.w	r9, [sp, #4]
 8006838:	464b      	mov	r3, r9
 800683a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800683e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006840:	2200      	movs	r2, #0
 8006842:	6042      	str	r2, [r0, #4]
 8006844:	2204      	movs	r2, #4
 8006846:	f102 0614 	add.w	r6, r2, #20
 800684a:	429e      	cmp	r6, r3
 800684c:	6841      	ldr	r1, [r0, #4]
 800684e:	d92f      	bls.n	80068b0 <_dtoa_r+0x2d8>
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fee7 	bl	8007624 <_Balloc>
 8006856:	9000      	str	r0, [sp, #0]
 8006858:	2800      	cmp	r0, #0
 800685a:	d14b      	bne.n	80068f4 <_dtoa_r+0x31c>
 800685c:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <_dtoa_r+0x318>)
 800685e:	4602      	mov	r2, r0
 8006860:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006864:	e6d1      	b.n	800660a <_dtoa_r+0x32>
 8006866:	2301      	movs	r3, #1
 8006868:	e7de      	b.n	8006828 <_dtoa_r+0x250>
 800686a:	2300      	movs	r3, #0
 800686c:	9308      	str	r3, [sp, #32]
 800686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006870:	eb0a 0903 	add.w	r9, sl, r3
 8006874:	f109 0301 	add.w	r3, r9, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	bfb8      	it	lt
 800687e:	2301      	movlt	r3, #1
 8006880:	e7dd      	b.n	800683e <_dtoa_r+0x266>
 8006882:	2301      	movs	r3, #1
 8006884:	e7f2      	b.n	800686c <_dtoa_r+0x294>
 8006886:	2501      	movs	r5, #1
 8006888:	2300      	movs	r3, #0
 800688a:	9305      	str	r3, [sp, #20]
 800688c:	9508      	str	r5, [sp, #32]
 800688e:	f04f 39ff 	mov.w	r9, #4294967295
 8006892:	2200      	movs	r2, #0
 8006894:	f8cd 9004 	str.w	r9, [sp, #4]
 8006898:	2312      	movs	r3, #18
 800689a:	9209      	str	r2, [sp, #36]	; 0x24
 800689c:	e7cf      	b.n	800683e <_dtoa_r+0x266>
 800689e:	2301      	movs	r3, #1
 80068a0:	9308      	str	r3, [sp, #32]
 80068a2:	e7f4      	b.n	800688e <_dtoa_r+0x2b6>
 80068a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80068a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80068ac:	464b      	mov	r3, r9
 80068ae:	e7c6      	b.n	800683e <_dtoa_r+0x266>
 80068b0:	3101      	adds	r1, #1
 80068b2:	6041      	str	r1, [r0, #4]
 80068b4:	0052      	lsls	r2, r2, #1
 80068b6:	e7c6      	b.n	8006846 <_dtoa_r+0x26e>
 80068b8:	636f4361 	.word	0x636f4361
 80068bc:	3fd287a7 	.word	0x3fd287a7
 80068c0:	8b60c8b3 	.word	0x8b60c8b3
 80068c4:	3fc68a28 	.word	0x3fc68a28
 80068c8:	509f79fb 	.word	0x509f79fb
 80068cc:	3fd34413 	.word	0x3fd34413
 80068d0:	08008e15 	.word	0x08008e15
 80068d4:	08008e2c 	.word	0x08008e2c
 80068d8:	7ff00000 	.word	0x7ff00000
 80068dc:	08008e11 	.word	0x08008e11
 80068e0:	08008e08 	.word	0x08008e08
 80068e4:	08008de5 	.word	0x08008de5
 80068e8:	3ff80000 	.word	0x3ff80000
 80068ec:	08008f88 	.word	0x08008f88
 80068f0:	08008e8b 	.word	0x08008e8b
 80068f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f6:	9a00      	ldr	r2, [sp, #0]
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	9b01      	ldr	r3, [sp, #4]
 80068fc:	2b0e      	cmp	r3, #14
 80068fe:	f200 80ad 	bhi.w	8006a5c <_dtoa_r+0x484>
 8006902:	2d00      	cmp	r5, #0
 8006904:	f000 80aa 	beq.w	8006a5c <_dtoa_r+0x484>
 8006908:	f1ba 0f00 	cmp.w	sl, #0
 800690c:	dd36      	ble.n	800697c <_dtoa_r+0x3a4>
 800690e:	4ac3      	ldr	r2, [pc, #780]	; (8006c1c <_dtoa_r+0x644>)
 8006910:	f00a 030f 	and.w	r3, sl, #15
 8006914:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006918:	ed93 7b00 	vldr	d7, [r3]
 800691c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006920:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006924:	eeb0 8a47 	vmov.f32	s16, s14
 8006928:	eef0 8a67 	vmov.f32	s17, s15
 800692c:	d016      	beq.n	800695c <_dtoa_r+0x384>
 800692e:	4bbc      	ldr	r3, [pc, #752]	; (8006c20 <_dtoa_r+0x648>)
 8006930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006938:	f7f9 ffa8 	bl	800088c <__aeabi_ddiv>
 800693c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006940:	f007 070f 	and.w	r7, r7, #15
 8006944:	2503      	movs	r5, #3
 8006946:	4eb6      	ldr	r6, [pc, #728]	; (8006c20 <_dtoa_r+0x648>)
 8006948:	b957      	cbnz	r7, 8006960 <_dtoa_r+0x388>
 800694a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800694e:	ec53 2b18 	vmov	r2, r3, d8
 8006952:	f7f9 ff9b 	bl	800088c <__aeabi_ddiv>
 8006956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800695a:	e029      	b.n	80069b0 <_dtoa_r+0x3d8>
 800695c:	2502      	movs	r5, #2
 800695e:	e7f2      	b.n	8006946 <_dtoa_r+0x36e>
 8006960:	07f9      	lsls	r1, r7, #31
 8006962:	d508      	bpl.n	8006976 <_dtoa_r+0x39e>
 8006964:	ec51 0b18 	vmov	r0, r1, d8
 8006968:	e9d6 2300 	ldrd	r2, r3, [r6]
 800696c:	f7f9 fe64 	bl	8000638 <__aeabi_dmul>
 8006970:	ec41 0b18 	vmov	d8, r0, r1
 8006974:	3501      	adds	r5, #1
 8006976:	107f      	asrs	r7, r7, #1
 8006978:	3608      	adds	r6, #8
 800697a:	e7e5      	b.n	8006948 <_dtoa_r+0x370>
 800697c:	f000 80a6 	beq.w	8006acc <_dtoa_r+0x4f4>
 8006980:	f1ca 0600 	rsb	r6, sl, #0
 8006984:	4ba5      	ldr	r3, [pc, #660]	; (8006c1c <_dtoa_r+0x644>)
 8006986:	4fa6      	ldr	r7, [pc, #664]	; (8006c20 <_dtoa_r+0x648>)
 8006988:	f006 020f 	and.w	r2, r6, #15
 800698c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006998:	f7f9 fe4e 	bl	8000638 <__aeabi_dmul>
 800699c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a0:	1136      	asrs	r6, r6, #4
 80069a2:	2300      	movs	r3, #0
 80069a4:	2502      	movs	r5, #2
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	f040 8085 	bne.w	8006ab6 <_dtoa_r+0x4de>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1d2      	bne.n	8006956 <_dtoa_r+0x37e>
 80069b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 808c 	beq.w	8006ad0 <_dtoa_r+0x4f8>
 80069b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069bc:	4b99      	ldr	r3, [pc, #612]	; (8006c24 <_dtoa_r+0x64c>)
 80069be:	2200      	movs	r2, #0
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	f7fa f8aa 	bl	8000b1c <__aeabi_dcmplt>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f000 8081 	beq.w	8006ad0 <_dtoa_r+0x4f8>
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d07d      	beq.n	8006ad0 <_dtoa_r+0x4f8>
 80069d4:	f1b9 0f00 	cmp.w	r9, #0
 80069d8:	dd3c      	ble.n	8006a54 <_dtoa_r+0x47c>
 80069da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80069de:	9307      	str	r3, [sp, #28]
 80069e0:	2200      	movs	r2, #0
 80069e2:	4b91      	ldr	r3, [pc, #580]	; (8006c28 <_dtoa_r+0x650>)
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	f7f9 fe26 	bl	8000638 <__aeabi_dmul>
 80069ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f0:	3501      	adds	r5, #1
 80069f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80069f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069fa:	4628      	mov	r0, r5
 80069fc:	f7f9 fdb2 	bl	8000564 <__aeabi_i2d>
 8006a00:	4632      	mov	r2, r6
 8006a02:	463b      	mov	r3, r7
 8006a04:	f7f9 fe18 	bl	8000638 <__aeabi_dmul>
 8006a08:	4b88      	ldr	r3, [pc, #544]	; (8006c2c <_dtoa_r+0x654>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f7f9 fc5e 	bl	80002cc <__adddf3>
 8006a10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a18:	9303      	str	r3, [sp, #12]
 8006a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d15c      	bne.n	8006ada <_dtoa_r+0x502>
 8006a20:	4b83      	ldr	r3, [pc, #524]	; (8006c30 <_dtoa_r+0x658>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	4630      	mov	r0, r6
 8006a26:	4639      	mov	r1, r7
 8006a28:	f7f9 fc4e 	bl	80002c8 <__aeabi_dsub>
 8006a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a30:	4606      	mov	r6, r0
 8006a32:	460f      	mov	r7, r1
 8006a34:	f7fa f890 	bl	8000b58 <__aeabi_dcmpgt>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	f040 8296 	bne.w	8006f6a <_dtoa_r+0x992>
 8006a3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a42:	4630      	mov	r0, r6
 8006a44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a48:	4639      	mov	r1, r7
 8006a4a:	f7fa f867 	bl	8000b1c <__aeabi_dcmplt>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f040 8288 	bne.w	8006f64 <_dtoa_r+0x98c>
 8006a54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f2c0 8158 	blt.w	8006d14 <_dtoa_r+0x73c>
 8006a64:	f1ba 0f0e 	cmp.w	sl, #14
 8006a68:	f300 8154 	bgt.w	8006d14 <_dtoa_r+0x73c>
 8006a6c:	4b6b      	ldr	r3, [pc, #428]	; (8006c1c <_dtoa_r+0x644>)
 8006a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f280 80e3 	bge.w	8006c44 <_dtoa_r+0x66c>
 8006a7e:	9b01      	ldr	r3, [sp, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f300 80df 	bgt.w	8006c44 <_dtoa_r+0x66c>
 8006a86:	f040 826d 	bne.w	8006f64 <_dtoa_r+0x98c>
 8006a8a:	4b69      	ldr	r3, [pc, #420]	; (8006c30 <_dtoa_r+0x658>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7f9 fdd1 	bl	8000638 <__aeabi_dmul>
 8006a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a9a:	f7fa f853 	bl	8000b44 <__aeabi_dcmpge>
 8006a9e:	9e01      	ldr	r6, [sp, #4]
 8006aa0:	4637      	mov	r7, r6
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f040 8243 	bne.w	8006f2e <_dtoa_r+0x956>
 8006aa8:	9d00      	ldr	r5, [sp, #0]
 8006aaa:	2331      	movs	r3, #49	; 0x31
 8006aac:	f805 3b01 	strb.w	r3, [r5], #1
 8006ab0:	f10a 0a01 	add.w	sl, sl, #1
 8006ab4:	e23f      	b.n	8006f36 <_dtoa_r+0x95e>
 8006ab6:	07f2      	lsls	r2, r6, #31
 8006ab8:	d505      	bpl.n	8006ac6 <_dtoa_r+0x4ee>
 8006aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006abe:	f7f9 fdbb 	bl	8000638 <__aeabi_dmul>
 8006ac2:	3501      	adds	r5, #1
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	1076      	asrs	r6, r6, #1
 8006ac8:	3708      	adds	r7, #8
 8006aca:	e76c      	b.n	80069a6 <_dtoa_r+0x3ce>
 8006acc:	2502      	movs	r5, #2
 8006ace:	e76f      	b.n	80069b0 <_dtoa_r+0x3d8>
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ad8:	e78d      	b.n	80069f6 <_dtoa_r+0x41e>
 8006ada:	9900      	ldr	r1, [sp, #0]
 8006adc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae0:	4b4e      	ldr	r3, [pc, #312]	; (8006c1c <_dtoa_r+0x644>)
 8006ae2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ae6:	4401      	add	r1, r0
 8006ae8:	9102      	str	r1, [sp, #8]
 8006aea:	9908      	ldr	r1, [sp, #32]
 8006aec:	eeb0 8a47 	vmov.f32	s16, s14
 8006af0:	eef0 8a67 	vmov.f32	s17, s15
 8006af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006afc:	2900      	cmp	r1, #0
 8006afe:	d045      	beq.n	8006b8c <_dtoa_r+0x5b4>
 8006b00:	494c      	ldr	r1, [pc, #304]	; (8006c34 <_dtoa_r+0x65c>)
 8006b02:	2000      	movs	r0, #0
 8006b04:	f7f9 fec2 	bl	800088c <__aeabi_ddiv>
 8006b08:	ec53 2b18 	vmov	r2, r3, d8
 8006b0c:	f7f9 fbdc 	bl	80002c8 <__aeabi_dsub>
 8006b10:	9d00      	ldr	r5, [sp, #0]
 8006b12:	ec41 0b18 	vmov	d8, r0, r1
 8006b16:	4639      	mov	r1, r7
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7fa f83d 	bl	8000b98 <__aeabi_d2iz>
 8006b1e:	900c      	str	r0, [sp, #48]	; 0x30
 8006b20:	f7f9 fd20 	bl	8000564 <__aeabi_i2d>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fbcc 	bl	80002c8 <__aeabi_dsub>
 8006b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b32:	3330      	adds	r3, #48	; 0x30
 8006b34:	f805 3b01 	strb.w	r3, [r5], #1
 8006b38:	ec53 2b18 	vmov	r2, r3, d8
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	460f      	mov	r7, r1
 8006b40:	f7f9 ffec 	bl	8000b1c <__aeabi_dcmplt>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d165      	bne.n	8006c14 <_dtoa_r+0x63c>
 8006b48:	4632      	mov	r2, r6
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	4935      	ldr	r1, [pc, #212]	; (8006c24 <_dtoa_r+0x64c>)
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f7f9 fbba 	bl	80002c8 <__aeabi_dsub>
 8006b54:	ec53 2b18 	vmov	r2, r3, d8
 8006b58:	f7f9 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f040 80b9 	bne.w	8006cd4 <_dtoa_r+0x6fc>
 8006b62:	9b02      	ldr	r3, [sp, #8]
 8006b64:	429d      	cmp	r5, r3
 8006b66:	f43f af75 	beq.w	8006a54 <_dtoa_r+0x47c>
 8006b6a:	4b2f      	ldr	r3, [pc, #188]	; (8006c28 <_dtoa_r+0x650>)
 8006b6c:	ec51 0b18 	vmov	r0, r1, d8
 8006b70:	2200      	movs	r2, #0
 8006b72:	f7f9 fd61 	bl	8000638 <__aeabi_dmul>
 8006b76:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <_dtoa_r+0x650>)
 8006b78:	ec41 0b18 	vmov	d8, r0, r1
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4639      	mov	r1, r7
 8006b82:	f7f9 fd59 	bl	8000638 <__aeabi_dmul>
 8006b86:	4606      	mov	r6, r0
 8006b88:	460f      	mov	r7, r1
 8006b8a:	e7c4      	b.n	8006b16 <_dtoa_r+0x53e>
 8006b8c:	ec51 0b17 	vmov	r0, r1, d7
 8006b90:	f7f9 fd52 	bl	8000638 <__aeabi_dmul>
 8006b94:	9b02      	ldr	r3, [sp, #8]
 8006b96:	9d00      	ldr	r5, [sp, #0]
 8006b98:	930c      	str	r3, [sp, #48]	; 0x30
 8006b9a:	ec41 0b18 	vmov	d8, r0, r1
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7f9 fff9 	bl	8000b98 <__aeabi_d2iz>
 8006ba6:	9011      	str	r0, [sp, #68]	; 0x44
 8006ba8:	f7f9 fcdc 	bl	8000564 <__aeabi_i2d>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	f7f9 fb88 	bl	80002c8 <__aeabi_dsub>
 8006bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bba:	3330      	adds	r3, #48	; 0x30
 8006bbc:	f805 3b01 	strb.w	r3, [r5], #1
 8006bc0:	9b02      	ldr	r3, [sp, #8]
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	460f      	mov	r7, r1
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	d134      	bne.n	8006c38 <_dtoa_r+0x660>
 8006bce:	4b19      	ldr	r3, [pc, #100]	; (8006c34 <_dtoa_r+0x65c>)
 8006bd0:	ec51 0b18 	vmov	r0, r1, d8
 8006bd4:	f7f9 fb7a 	bl	80002cc <__adddf3>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4630      	mov	r0, r6
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 ffba 	bl	8000b58 <__aeabi_dcmpgt>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d175      	bne.n	8006cd4 <_dtoa_r+0x6fc>
 8006be8:	ec53 2b18 	vmov	r2, r3, d8
 8006bec:	4911      	ldr	r1, [pc, #68]	; (8006c34 <_dtoa_r+0x65c>)
 8006bee:	2000      	movs	r0, #0
 8006bf0:	f7f9 fb6a 	bl	80002c8 <__aeabi_dsub>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	f7f9 ff8e 	bl	8000b1c <__aeabi_dcmplt>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	f43f af27 	beq.w	8006a54 <_dtoa_r+0x47c>
 8006c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c08:	1e6b      	subs	r3, r5, #1
 8006c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c10:	2b30      	cmp	r3, #48	; 0x30
 8006c12:	d0f8      	beq.n	8006c06 <_dtoa_r+0x62e>
 8006c14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c18:	e04a      	b.n	8006cb0 <_dtoa_r+0x6d8>
 8006c1a:	bf00      	nop
 8006c1c:	08008f88 	.word	0x08008f88
 8006c20:	08008f60 	.word	0x08008f60
 8006c24:	3ff00000 	.word	0x3ff00000
 8006c28:	40240000 	.word	0x40240000
 8006c2c:	401c0000 	.word	0x401c0000
 8006c30:	40140000 	.word	0x40140000
 8006c34:	3fe00000 	.word	0x3fe00000
 8006c38:	4baf      	ldr	r3, [pc, #700]	; (8006ef8 <_dtoa_r+0x920>)
 8006c3a:	f7f9 fcfd 	bl	8000638 <__aeabi_dmul>
 8006c3e:	4606      	mov	r6, r0
 8006c40:	460f      	mov	r7, r1
 8006c42:	e7ac      	b.n	8006b9e <_dtoa_r+0x5c6>
 8006c44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c48:	9d00      	ldr	r5, [sp, #0]
 8006c4a:	4642      	mov	r2, r8
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	4630      	mov	r0, r6
 8006c50:	4639      	mov	r1, r7
 8006c52:	f7f9 fe1b 	bl	800088c <__aeabi_ddiv>
 8006c56:	f7f9 ff9f 	bl	8000b98 <__aeabi_d2iz>
 8006c5a:	9002      	str	r0, [sp, #8]
 8006c5c:	f7f9 fc82 	bl	8000564 <__aeabi_i2d>
 8006c60:	4642      	mov	r2, r8
 8006c62:	464b      	mov	r3, r9
 8006c64:	f7f9 fce8 	bl	8000638 <__aeabi_dmul>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	4639      	mov	r1, r7
 8006c70:	f7f9 fb2a 	bl	80002c8 <__aeabi_dsub>
 8006c74:	9e02      	ldr	r6, [sp, #8]
 8006c76:	9f01      	ldr	r7, [sp, #4]
 8006c78:	3630      	adds	r6, #48	; 0x30
 8006c7a:	f805 6b01 	strb.w	r6, [r5], #1
 8006c7e:	9e00      	ldr	r6, [sp, #0]
 8006c80:	1bae      	subs	r6, r5, r6
 8006c82:	42b7      	cmp	r7, r6
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	d137      	bne.n	8006cfa <_dtoa_r+0x722>
 8006c8a:	f7f9 fb1f 	bl	80002cc <__adddf3>
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	4606      	mov	r6, r0
 8006c94:	460f      	mov	r7, r1
 8006c96:	f7f9 ff5f 	bl	8000b58 <__aeabi_dcmpgt>
 8006c9a:	b9c8      	cbnz	r0, 8006cd0 <_dtoa_r+0x6f8>
 8006c9c:	4642      	mov	r2, r8
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	f7f9 ff30 	bl	8000b08 <__aeabi_dcmpeq>
 8006ca8:	b110      	cbz	r0, 8006cb0 <_dtoa_r+0x6d8>
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	07d9      	lsls	r1, r3, #31
 8006cae:	d40f      	bmi.n	8006cd0 <_dtoa_r+0x6f8>
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	4659      	mov	r1, fp
 8006cb4:	f000 fcf6 	bl	80076a4 <_Bfree>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	702b      	strb	r3, [r5, #0]
 8006cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cbe:	f10a 0001 	add.w	r0, sl, #1
 8006cc2:	6018      	str	r0, [r3, #0]
 8006cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f43f acd8 	beq.w	800667c <_dtoa_r+0xa4>
 8006ccc:	601d      	str	r5, [r3, #0]
 8006cce:	e4d5      	b.n	800667c <_dtoa_r+0xa4>
 8006cd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cdc:	2a39      	cmp	r2, #57	; 0x39
 8006cde:	d108      	bne.n	8006cf2 <_dtoa_r+0x71a>
 8006ce0:	9a00      	ldr	r2, [sp, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d1f7      	bne.n	8006cd6 <_dtoa_r+0x6fe>
 8006ce6:	9a07      	ldr	r2, [sp, #28]
 8006ce8:	9900      	ldr	r1, [sp, #0]
 8006cea:	3201      	adds	r2, #1
 8006cec:	9207      	str	r2, [sp, #28]
 8006cee:	2230      	movs	r2, #48	; 0x30
 8006cf0:	700a      	strb	r2, [r1, #0]
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	3201      	adds	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	e78c      	b.n	8006c14 <_dtoa_r+0x63c>
 8006cfa:	4b7f      	ldr	r3, [pc, #508]	; (8006ef8 <_dtoa_r+0x920>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f7f9 fc9b 	bl	8000638 <__aeabi_dmul>
 8006d02:	2200      	movs	r2, #0
 8006d04:	2300      	movs	r3, #0
 8006d06:	4606      	mov	r6, r0
 8006d08:	460f      	mov	r7, r1
 8006d0a:	f7f9 fefd 	bl	8000b08 <__aeabi_dcmpeq>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d09b      	beq.n	8006c4a <_dtoa_r+0x672>
 8006d12:	e7cd      	b.n	8006cb0 <_dtoa_r+0x6d8>
 8006d14:	9a08      	ldr	r2, [sp, #32]
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	f000 80c4 	beq.w	8006ea4 <_dtoa_r+0x8cc>
 8006d1c:	9a05      	ldr	r2, [sp, #20]
 8006d1e:	2a01      	cmp	r2, #1
 8006d20:	f300 80a8 	bgt.w	8006e74 <_dtoa_r+0x89c>
 8006d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	f000 80a0 	beq.w	8006e6c <_dtoa_r+0x894>
 8006d2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d30:	9e06      	ldr	r6, [sp, #24]
 8006d32:	4645      	mov	r5, r8
 8006d34:	9a04      	ldr	r2, [sp, #16]
 8006d36:	2101      	movs	r1, #1
 8006d38:	441a      	add	r2, r3
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4498      	add	r8, r3
 8006d3e:	9204      	str	r2, [sp, #16]
 8006d40:	f000 fd6c 	bl	800781c <__i2b>
 8006d44:	4607      	mov	r7, r0
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	dd0b      	ble.n	8006d62 <_dtoa_r+0x78a>
 8006d4a:	9b04      	ldr	r3, [sp, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	dd08      	ble.n	8006d62 <_dtoa_r+0x78a>
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	9a04      	ldr	r2, [sp, #16]
 8006d54:	bfa8      	it	ge
 8006d56:	462b      	movge	r3, r5
 8006d58:	eba8 0803 	sub.w	r8, r8, r3
 8006d5c:	1aed      	subs	r5, r5, r3
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	b1fb      	cbz	r3, 8006da6 <_dtoa_r+0x7ce>
 8006d66:	9b08      	ldr	r3, [sp, #32]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 809f 	beq.w	8006eac <_dtoa_r+0x8d4>
 8006d6e:	2e00      	cmp	r6, #0
 8006d70:	dd11      	ble.n	8006d96 <_dtoa_r+0x7be>
 8006d72:	4639      	mov	r1, r7
 8006d74:	4632      	mov	r2, r6
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 fe0c 	bl	8007994 <__pow5mult>
 8006d7c:	465a      	mov	r2, fp
 8006d7e:	4601      	mov	r1, r0
 8006d80:	4607      	mov	r7, r0
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 fd60 	bl	8007848 <__multiply>
 8006d88:	4659      	mov	r1, fp
 8006d8a:	9007      	str	r0, [sp, #28]
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 fc89 	bl	80076a4 <_Bfree>
 8006d92:	9b07      	ldr	r3, [sp, #28]
 8006d94:	469b      	mov	fp, r3
 8006d96:	9b06      	ldr	r3, [sp, #24]
 8006d98:	1b9a      	subs	r2, r3, r6
 8006d9a:	d004      	beq.n	8006da6 <_dtoa_r+0x7ce>
 8006d9c:	4659      	mov	r1, fp
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fdf8 	bl	8007994 <__pow5mult>
 8006da4:	4683      	mov	fp, r0
 8006da6:	2101      	movs	r1, #1
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fd37 	bl	800781c <__i2b>
 8006dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	4606      	mov	r6, r0
 8006db4:	dd7c      	ble.n	8006eb0 <_dtoa_r+0x8d8>
 8006db6:	461a      	mov	r2, r3
 8006db8:	4601      	mov	r1, r0
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 fdea 	bl	8007994 <__pow5mult>
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	dd76      	ble.n	8006eb6 <_dtoa_r+0x8de>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9306      	str	r3, [sp, #24]
 8006dcc:	6933      	ldr	r3, [r6, #16]
 8006dce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dd2:	6918      	ldr	r0, [r3, #16]
 8006dd4:	f000 fcd2 	bl	800777c <__hi0bits>
 8006dd8:	f1c0 0020 	rsb	r0, r0, #32
 8006ddc:	9b04      	ldr	r3, [sp, #16]
 8006dde:	4418      	add	r0, r3
 8006de0:	f010 001f 	ands.w	r0, r0, #31
 8006de4:	f000 8086 	beq.w	8006ef4 <_dtoa_r+0x91c>
 8006de8:	f1c0 0320 	rsb	r3, r0, #32
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	dd7f      	ble.n	8006ef0 <_dtoa_r+0x918>
 8006df0:	f1c0 001c 	rsb	r0, r0, #28
 8006df4:	9b04      	ldr	r3, [sp, #16]
 8006df6:	4403      	add	r3, r0
 8006df8:	4480      	add	r8, r0
 8006dfa:	4405      	add	r5, r0
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	f1b8 0f00 	cmp.w	r8, #0
 8006e02:	dd05      	ble.n	8006e10 <_dtoa_r+0x838>
 8006e04:	4659      	mov	r1, fp
 8006e06:	4642      	mov	r2, r8
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fe1d 	bl	8007a48 <__lshift>
 8006e0e:	4683      	mov	fp, r0
 8006e10:	9b04      	ldr	r3, [sp, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd05      	ble.n	8006e22 <_dtoa_r+0x84a>
 8006e16:	4631      	mov	r1, r6
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 fe14 	bl	8007a48 <__lshift>
 8006e20:	4606      	mov	r6, r0
 8006e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d069      	beq.n	8006efc <_dtoa_r+0x924>
 8006e28:	4631      	mov	r1, r6
 8006e2a:	4658      	mov	r0, fp
 8006e2c:	f000 fe78 	bl	8007b20 <__mcmp>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	da63      	bge.n	8006efc <_dtoa_r+0x924>
 8006e34:	2300      	movs	r3, #0
 8006e36:	4659      	mov	r1, fp
 8006e38:	220a      	movs	r2, #10
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 fc54 	bl	80076e8 <__multadd>
 8006e40:	9b08      	ldr	r3, [sp, #32]
 8006e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e46:	4683      	mov	fp, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 818f 	beq.w	800716c <_dtoa_r+0xb94>
 8006e4e:	4639      	mov	r1, r7
 8006e50:	2300      	movs	r3, #0
 8006e52:	220a      	movs	r2, #10
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 fc47 	bl	80076e8 <__multadd>
 8006e5a:	f1b9 0f00 	cmp.w	r9, #0
 8006e5e:	4607      	mov	r7, r0
 8006e60:	f300 808e 	bgt.w	8006f80 <_dtoa_r+0x9a8>
 8006e64:	9b05      	ldr	r3, [sp, #20]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	dc50      	bgt.n	8006f0c <_dtoa_r+0x934>
 8006e6a:	e089      	b.n	8006f80 <_dtoa_r+0x9a8>
 8006e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e72:	e75d      	b.n	8006d30 <_dtoa_r+0x758>
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	1e5e      	subs	r6, r3, #1
 8006e78:	9b06      	ldr	r3, [sp, #24]
 8006e7a:	42b3      	cmp	r3, r6
 8006e7c:	bfbf      	itttt	lt
 8006e7e:	9b06      	ldrlt	r3, [sp, #24]
 8006e80:	9606      	strlt	r6, [sp, #24]
 8006e82:	1af2      	sublt	r2, r6, r3
 8006e84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006e86:	bfb6      	itet	lt
 8006e88:	189b      	addlt	r3, r3, r2
 8006e8a:	1b9e      	subge	r6, r3, r6
 8006e8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	bfb8      	it	lt
 8006e92:	2600      	movlt	r6, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfb5      	itete	lt
 8006e98:	eba8 0503 	sublt.w	r5, r8, r3
 8006e9c:	9b01      	ldrge	r3, [sp, #4]
 8006e9e:	2300      	movlt	r3, #0
 8006ea0:	4645      	movge	r5, r8
 8006ea2:	e747      	b.n	8006d34 <_dtoa_r+0x75c>
 8006ea4:	9e06      	ldr	r6, [sp, #24]
 8006ea6:	9f08      	ldr	r7, [sp, #32]
 8006ea8:	4645      	mov	r5, r8
 8006eaa:	e74c      	b.n	8006d46 <_dtoa_r+0x76e>
 8006eac:	9a06      	ldr	r2, [sp, #24]
 8006eae:	e775      	b.n	8006d9c <_dtoa_r+0x7c4>
 8006eb0:	9b05      	ldr	r3, [sp, #20]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	dc18      	bgt.n	8006ee8 <_dtoa_r+0x910>
 8006eb6:	9b02      	ldr	r3, [sp, #8]
 8006eb8:	b9b3      	cbnz	r3, 8006ee8 <_dtoa_r+0x910>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ec0:	b9a3      	cbnz	r3, 8006eec <_dtoa_r+0x914>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ec8:	0d1b      	lsrs	r3, r3, #20
 8006eca:	051b      	lsls	r3, r3, #20
 8006ecc:	b12b      	cbz	r3, 8006eda <_dtoa_r+0x902>
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	9304      	str	r3, [sp, #16]
 8006ed4:	f108 0801 	add.w	r8, r8, #1
 8006ed8:	2301      	movs	r3, #1
 8006eda:	9306      	str	r3, [sp, #24]
 8006edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f47f af74 	bne.w	8006dcc <_dtoa_r+0x7f4>
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	e779      	b.n	8006ddc <_dtoa_r+0x804>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e7f6      	b.n	8006eda <_dtoa_r+0x902>
 8006eec:	9b02      	ldr	r3, [sp, #8]
 8006eee:	e7f4      	b.n	8006eda <_dtoa_r+0x902>
 8006ef0:	d085      	beq.n	8006dfe <_dtoa_r+0x826>
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	301c      	adds	r0, #28
 8006ef6:	e77d      	b.n	8006df4 <_dtoa_r+0x81c>
 8006ef8:	40240000 	.word	0x40240000
 8006efc:	9b01      	ldr	r3, [sp, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	dc38      	bgt.n	8006f74 <_dtoa_r+0x99c>
 8006f02:	9b05      	ldr	r3, [sp, #20]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	dd35      	ble.n	8006f74 <_dtoa_r+0x99c>
 8006f08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f0c:	f1b9 0f00 	cmp.w	r9, #0
 8006f10:	d10d      	bne.n	8006f2e <_dtoa_r+0x956>
 8006f12:	4631      	mov	r1, r6
 8006f14:	464b      	mov	r3, r9
 8006f16:	2205      	movs	r2, #5
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 fbe5 	bl	80076e8 <__multadd>
 8006f1e:	4601      	mov	r1, r0
 8006f20:	4606      	mov	r6, r0
 8006f22:	4658      	mov	r0, fp
 8006f24:	f000 fdfc 	bl	8007b20 <__mcmp>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	f73f adbd 	bgt.w	8006aa8 <_dtoa_r+0x4d0>
 8006f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f30:	9d00      	ldr	r5, [sp, #0]
 8006f32:	ea6f 0a03 	mvn.w	sl, r3
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fbb1 	bl	80076a4 <_Bfree>
 8006f42:	2f00      	cmp	r7, #0
 8006f44:	f43f aeb4 	beq.w	8006cb0 <_dtoa_r+0x6d8>
 8006f48:	f1b8 0f00 	cmp.w	r8, #0
 8006f4c:	d005      	beq.n	8006f5a <_dtoa_r+0x982>
 8006f4e:	45b8      	cmp	r8, r7
 8006f50:	d003      	beq.n	8006f5a <_dtoa_r+0x982>
 8006f52:	4641      	mov	r1, r8
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 fba5 	bl	80076a4 <_Bfree>
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 fba1 	bl	80076a4 <_Bfree>
 8006f62:	e6a5      	b.n	8006cb0 <_dtoa_r+0x6d8>
 8006f64:	2600      	movs	r6, #0
 8006f66:	4637      	mov	r7, r6
 8006f68:	e7e1      	b.n	8006f2e <_dtoa_r+0x956>
 8006f6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006f6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f70:	4637      	mov	r7, r6
 8006f72:	e599      	b.n	8006aa8 <_dtoa_r+0x4d0>
 8006f74:	9b08      	ldr	r3, [sp, #32]
 8006f76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80fd 	beq.w	800717a <_dtoa_r+0xba2>
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	dd05      	ble.n	8006f90 <_dtoa_r+0x9b8>
 8006f84:	4639      	mov	r1, r7
 8006f86:	462a      	mov	r2, r5
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 fd5d 	bl	8007a48 <__lshift>
 8006f8e:	4607      	mov	r7, r0
 8006f90:	9b06      	ldr	r3, [sp, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d05c      	beq.n	8007050 <_dtoa_r+0xa78>
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 fb43 	bl	8007624 <_Balloc>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b928      	cbnz	r0, 8006fae <_dtoa_r+0x9d6>
 8006fa2:	4b80      	ldr	r3, [pc, #512]	; (80071a4 <_dtoa_r+0xbcc>)
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006faa:	f7ff bb2e 	b.w	800660a <_dtoa_r+0x32>
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	3202      	adds	r2, #2
 8006fb2:	0092      	lsls	r2, r2, #2
 8006fb4:	f107 010c 	add.w	r1, r7, #12
 8006fb8:	300c      	adds	r0, #12
 8006fba:	f000 fb25 	bl	8007608 <memcpy>
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fd40 	bl	8007a48 <__lshift>
 8006fc8:	9b00      	ldr	r3, [sp, #0]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	444b      	add	r3, r9
 8006fd2:	9307      	str	r3, [sp, #28]
 8006fd4:	9b02      	ldr	r3, [sp, #8]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	46b8      	mov	r8, r7
 8006fdc:	9306      	str	r3, [sp, #24]
 8006fde:	4607      	mov	r7, r0
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	4658      	mov	r0, fp
 8006fe8:	9302      	str	r3, [sp, #8]
 8006fea:	f7ff fa67 	bl	80064bc <quorem>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	3330      	adds	r3, #48	; 0x30
 8006ff2:	9004      	str	r0, [sp, #16]
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	9308      	str	r3, [sp, #32]
 8006ffa:	f000 fd91 	bl	8007b20 <__mcmp>
 8006ffe:	463a      	mov	r2, r7
 8007000:	4681      	mov	r9, r0
 8007002:	4631      	mov	r1, r6
 8007004:	4620      	mov	r0, r4
 8007006:	f000 fda7 	bl	8007b58 <__mdiff>
 800700a:	68c2      	ldr	r2, [r0, #12]
 800700c:	9b08      	ldr	r3, [sp, #32]
 800700e:	4605      	mov	r5, r0
 8007010:	bb02      	cbnz	r2, 8007054 <_dtoa_r+0xa7c>
 8007012:	4601      	mov	r1, r0
 8007014:	4658      	mov	r0, fp
 8007016:	f000 fd83 	bl	8007b20 <__mcmp>
 800701a:	9b08      	ldr	r3, [sp, #32]
 800701c:	4602      	mov	r2, r0
 800701e:	4629      	mov	r1, r5
 8007020:	4620      	mov	r0, r4
 8007022:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007026:	f000 fb3d 	bl	80076a4 <_Bfree>
 800702a:	9b05      	ldr	r3, [sp, #20]
 800702c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800702e:	9d01      	ldr	r5, [sp, #4]
 8007030:	ea43 0102 	orr.w	r1, r3, r2
 8007034:	9b06      	ldr	r3, [sp, #24]
 8007036:	430b      	orrs	r3, r1
 8007038:	9b08      	ldr	r3, [sp, #32]
 800703a:	d10d      	bne.n	8007058 <_dtoa_r+0xa80>
 800703c:	2b39      	cmp	r3, #57	; 0x39
 800703e:	d029      	beq.n	8007094 <_dtoa_r+0xabc>
 8007040:	f1b9 0f00 	cmp.w	r9, #0
 8007044:	dd01      	ble.n	800704a <_dtoa_r+0xa72>
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	3331      	adds	r3, #49	; 0x31
 800704a:	9a02      	ldr	r2, [sp, #8]
 800704c:	7013      	strb	r3, [r2, #0]
 800704e:	e774      	b.n	8006f3a <_dtoa_r+0x962>
 8007050:	4638      	mov	r0, r7
 8007052:	e7b9      	b.n	8006fc8 <_dtoa_r+0x9f0>
 8007054:	2201      	movs	r2, #1
 8007056:	e7e2      	b.n	800701e <_dtoa_r+0xa46>
 8007058:	f1b9 0f00 	cmp.w	r9, #0
 800705c:	db06      	blt.n	800706c <_dtoa_r+0xa94>
 800705e:	9905      	ldr	r1, [sp, #20]
 8007060:	ea41 0909 	orr.w	r9, r1, r9
 8007064:	9906      	ldr	r1, [sp, #24]
 8007066:	ea59 0101 	orrs.w	r1, r9, r1
 800706a:	d120      	bne.n	80070ae <_dtoa_r+0xad6>
 800706c:	2a00      	cmp	r2, #0
 800706e:	ddec      	ble.n	800704a <_dtoa_r+0xa72>
 8007070:	4659      	mov	r1, fp
 8007072:	2201      	movs	r2, #1
 8007074:	4620      	mov	r0, r4
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	f000 fce6 	bl	8007a48 <__lshift>
 800707c:	4631      	mov	r1, r6
 800707e:	4683      	mov	fp, r0
 8007080:	f000 fd4e 	bl	8007b20 <__mcmp>
 8007084:	2800      	cmp	r0, #0
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	dc02      	bgt.n	8007090 <_dtoa_r+0xab8>
 800708a:	d1de      	bne.n	800704a <_dtoa_r+0xa72>
 800708c:	07da      	lsls	r2, r3, #31
 800708e:	d5dc      	bpl.n	800704a <_dtoa_r+0xa72>
 8007090:	2b39      	cmp	r3, #57	; 0x39
 8007092:	d1d8      	bne.n	8007046 <_dtoa_r+0xa6e>
 8007094:	9a02      	ldr	r2, [sp, #8]
 8007096:	2339      	movs	r3, #57	; 0x39
 8007098:	7013      	strb	r3, [r2, #0]
 800709a:	462b      	mov	r3, r5
 800709c:	461d      	mov	r5, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070a4:	2a39      	cmp	r2, #57	; 0x39
 80070a6:	d050      	beq.n	800714a <_dtoa_r+0xb72>
 80070a8:	3201      	adds	r2, #1
 80070aa:	701a      	strb	r2, [r3, #0]
 80070ac:	e745      	b.n	8006f3a <_dtoa_r+0x962>
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	dd03      	ble.n	80070ba <_dtoa_r+0xae2>
 80070b2:	2b39      	cmp	r3, #57	; 0x39
 80070b4:	d0ee      	beq.n	8007094 <_dtoa_r+0xabc>
 80070b6:	3301      	adds	r3, #1
 80070b8:	e7c7      	b.n	800704a <_dtoa_r+0xa72>
 80070ba:	9a01      	ldr	r2, [sp, #4]
 80070bc:	9907      	ldr	r1, [sp, #28]
 80070be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070c2:	428a      	cmp	r2, r1
 80070c4:	d02a      	beq.n	800711c <_dtoa_r+0xb44>
 80070c6:	4659      	mov	r1, fp
 80070c8:	2300      	movs	r3, #0
 80070ca:	220a      	movs	r2, #10
 80070cc:	4620      	mov	r0, r4
 80070ce:	f000 fb0b 	bl	80076e8 <__multadd>
 80070d2:	45b8      	cmp	r8, r7
 80070d4:	4683      	mov	fp, r0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	f04f 020a 	mov.w	r2, #10
 80070de:	4641      	mov	r1, r8
 80070e0:	4620      	mov	r0, r4
 80070e2:	d107      	bne.n	80070f4 <_dtoa_r+0xb1c>
 80070e4:	f000 fb00 	bl	80076e8 <__multadd>
 80070e8:	4680      	mov	r8, r0
 80070ea:	4607      	mov	r7, r0
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	3301      	adds	r3, #1
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	e775      	b.n	8006fe0 <_dtoa_r+0xa08>
 80070f4:	f000 faf8 	bl	80076e8 <__multadd>
 80070f8:	4639      	mov	r1, r7
 80070fa:	4680      	mov	r8, r0
 80070fc:	2300      	movs	r3, #0
 80070fe:	220a      	movs	r2, #10
 8007100:	4620      	mov	r0, r4
 8007102:	f000 faf1 	bl	80076e8 <__multadd>
 8007106:	4607      	mov	r7, r0
 8007108:	e7f0      	b.n	80070ec <_dtoa_r+0xb14>
 800710a:	f1b9 0f00 	cmp.w	r9, #0
 800710e:	9a00      	ldr	r2, [sp, #0]
 8007110:	bfcc      	ite	gt
 8007112:	464d      	movgt	r5, r9
 8007114:	2501      	movle	r5, #1
 8007116:	4415      	add	r5, r2
 8007118:	f04f 0800 	mov.w	r8, #0
 800711c:	4659      	mov	r1, fp
 800711e:	2201      	movs	r2, #1
 8007120:	4620      	mov	r0, r4
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	f000 fc90 	bl	8007a48 <__lshift>
 8007128:	4631      	mov	r1, r6
 800712a:	4683      	mov	fp, r0
 800712c:	f000 fcf8 	bl	8007b20 <__mcmp>
 8007130:	2800      	cmp	r0, #0
 8007132:	dcb2      	bgt.n	800709a <_dtoa_r+0xac2>
 8007134:	d102      	bne.n	800713c <_dtoa_r+0xb64>
 8007136:	9b01      	ldr	r3, [sp, #4]
 8007138:	07db      	lsls	r3, r3, #31
 800713a:	d4ae      	bmi.n	800709a <_dtoa_r+0xac2>
 800713c:	462b      	mov	r3, r5
 800713e:	461d      	mov	r5, r3
 8007140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007144:	2a30      	cmp	r2, #48	; 0x30
 8007146:	d0fa      	beq.n	800713e <_dtoa_r+0xb66>
 8007148:	e6f7      	b.n	8006f3a <_dtoa_r+0x962>
 800714a:	9a00      	ldr	r2, [sp, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d1a5      	bne.n	800709c <_dtoa_r+0xac4>
 8007150:	f10a 0a01 	add.w	sl, sl, #1
 8007154:	2331      	movs	r3, #49	; 0x31
 8007156:	e779      	b.n	800704c <_dtoa_r+0xa74>
 8007158:	4b13      	ldr	r3, [pc, #76]	; (80071a8 <_dtoa_r+0xbd0>)
 800715a:	f7ff baaf 	b.w	80066bc <_dtoa_r+0xe4>
 800715e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007160:	2b00      	cmp	r3, #0
 8007162:	f47f aa86 	bne.w	8006672 <_dtoa_r+0x9a>
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <_dtoa_r+0xbd4>)
 8007168:	f7ff baa8 	b.w	80066bc <_dtoa_r+0xe4>
 800716c:	f1b9 0f00 	cmp.w	r9, #0
 8007170:	dc03      	bgt.n	800717a <_dtoa_r+0xba2>
 8007172:	9b05      	ldr	r3, [sp, #20]
 8007174:	2b02      	cmp	r3, #2
 8007176:	f73f aec9 	bgt.w	8006f0c <_dtoa_r+0x934>
 800717a:	9d00      	ldr	r5, [sp, #0]
 800717c:	4631      	mov	r1, r6
 800717e:	4658      	mov	r0, fp
 8007180:	f7ff f99c 	bl	80064bc <quorem>
 8007184:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007188:	f805 3b01 	strb.w	r3, [r5], #1
 800718c:	9a00      	ldr	r2, [sp, #0]
 800718e:	1aaa      	subs	r2, r5, r2
 8007190:	4591      	cmp	r9, r2
 8007192:	ddba      	ble.n	800710a <_dtoa_r+0xb32>
 8007194:	4659      	mov	r1, fp
 8007196:	2300      	movs	r3, #0
 8007198:	220a      	movs	r2, #10
 800719a:	4620      	mov	r0, r4
 800719c:	f000 faa4 	bl	80076e8 <__multadd>
 80071a0:	4683      	mov	fp, r0
 80071a2:	e7eb      	b.n	800717c <_dtoa_r+0xba4>
 80071a4:	08008e8b 	.word	0x08008e8b
 80071a8:	08008de4 	.word	0x08008de4
 80071ac:	08008e08 	.word	0x08008e08

080071b0 <__sflush_r>:
 80071b0:	898a      	ldrh	r2, [r1, #12]
 80071b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b6:	4605      	mov	r5, r0
 80071b8:	0710      	lsls	r0, r2, #28
 80071ba:	460c      	mov	r4, r1
 80071bc:	d458      	bmi.n	8007270 <__sflush_r+0xc0>
 80071be:	684b      	ldr	r3, [r1, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dc05      	bgt.n	80071d0 <__sflush_r+0x20>
 80071c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dc02      	bgt.n	80071d0 <__sflush_r+0x20>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	d0f9      	beq.n	80071ca <__sflush_r+0x1a>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071dc:	682f      	ldr	r7, [r5, #0]
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	d032      	beq.n	8007248 <__sflush_r+0x98>
 80071e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	075a      	lsls	r2, r3, #29
 80071e8:	d505      	bpl.n	80071f6 <__sflush_r+0x46>
 80071ea:	6863      	ldr	r3, [r4, #4]
 80071ec:	1ac0      	subs	r0, r0, r3
 80071ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071f0:	b10b      	cbz	r3, 80071f6 <__sflush_r+0x46>
 80071f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071f4:	1ac0      	subs	r0, r0, r3
 80071f6:	2300      	movs	r3, #0
 80071f8:	4602      	mov	r2, r0
 80071fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071fc:	6a21      	ldr	r1, [r4, #32]
 80071fe:	4628      	mov	r0, r5
 8007200:	47b0      	blx	r6
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	d106      	bne.n	8007216 <__sflush_r+0x66>
 8007208:	6829      	ldr	r1, [r5, #0]
 800720a:	291d      	cmp	r1, #29
 800720c:	d82c      	bhi.n	8007268 <__sflush_r+0xb8>
 800720e:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <__sflush_r+0x108>)
 8007210:	40ca      	lsrs	r2, r1
 8007212:	07d6      	lsls	r6, r2, #31
 8007214:	d528      	bpl.n	8007268 <__sflush_r+0xb8>
 8007216:	2200      	movs	r2, #0
 8007218:	6062      	str	r2, [r4, #4]
 800721a:	04d9      	lsls	r1, r3, #19
 800721c:	6922      	ldr	r2, [r4, #16]
 800721e:	6022      	str	r2, [r4, #0]
 8007220:	d504      	bpl.n	800722c <__sflush_r+0x7c>
 8007222:	1c42      	adds	r2, r0, #1
 8007224:	d101      	bne.n	800722a <__sflush_r+0x7a>
 8007226:	682b      	ldr	r3, [r5, #0]
 8007228:	b903      	cbnz	r3, 800722c <__sflush_r+0x7c>
 800722a:	6560      	str	r0, [r4, #84]	; 0x54
 800722c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800722e:	602f      	str	r7, [r5, #0]
 8007230:	2900      	cmp	r1, #0
 8007232:	d0ca      	beq.n	80071ca <__sflush_r+0x1a>
 8007234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007238:	4299      	cmp	r1, r3
 800723a:	d002      	beq.n	8007242 <__sflush_r+0x92>
 800723c:	4628      	mov	r0, r5
 800723e:	f000 fd7f 	bl	8007d40 <_free_r>
 8007242:	2000      	movs	r0, #0
 8007244:	6360      	str	r0, [r4, #52]	; 0x34
 8007246:	e7c1      	b.n	80071cc <__sflush_r+0x1c>
 8007248:	6a21      	ldr	r1, [r4, #32]
 800724a:	2301      	movs	r3, #1
 800724c:	4628      	mov	r0, r5
 800724e:	47b0      	blx	r6
 8007250:	1c41      	adds	r1, r0, #1
 8007252:	d1c7      	bne.n	80071e4 <__sflush_r+0x34>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0c4      	beq.n	80071e4 <__sflush_r+0x34>
 800725a:	2b1d      	cmp	r3, #29
 800725c:	d001      	beq.n	8007262 <__sflush_r+0xb2>
 800725e:	2b16      	cmp	r3, #22
 8007260:	d101      	bne.n	8007266 <__sflush_r+0xb6>
 8007262:	602f      	str	r7, [r5, #0]
 8007264:	e7b1      	b.n	80071ca <__sflush_r+0x1a>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	e7ad      	b.n	80071cc <__sflush_r+0x1c>
 8007270:	690f      	ldr	r7, [r1, #16]
 8007272:	2f00      	cmp	r7, #0
 8007274:	d0a9      	beq.n	80071ca <__sflush_r+0x1a>
 8007276:	0793      	lsls	r3, r2, #30
 8007278:	680e      	ldr	r6, [r1, #0]
 800727a:	bf08      	it	eq
 800727c:	694b      	ldreq	r3, [r1, #20]
 800727e:	600f      	str	r7, [r1, #0]
 8007280:	bf18      	it	ne
 8007282:	2300      	movne	r3, #0
 8007284:	eba6 0807 	sub.w	r8, r6, r7
 8007288:	608b      	str	r3, [r1, #8]
 800728a:	f1b8 0f00 	cmp.w	r8, #0
 800728e:	dd9c      	ble.n	80071ca <__sflush_r+0x1a>
 8007290:	6a21      	ldr	r1, [r4, #32]
 8007292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007294:	4643      	mov	r3, r8
 8007296:	463a      	mov	r2, r7
 8007298:	4628      	mov	r0, r5
 800729a:	47b0      	blx	r6
 800729c:	2800      	cmp	r0, #0
 800729e:	dc06      	bgt.n	80072ae <__sflush_r+0xfe>
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	e78e      	b.n	80071cc <__sflush_r+0x1c>
 80072ae:	4407      	add	r7, r0
 80072b0:	eba8 0800 	sub.w	r8, r8, r0
 80072b4:	e7e9      	b.n	800728a <__sflush_r+0xda>
 80072b6:	bf00      	nop
 80072b8:	20400001 	.word	0x20400001

080072bc <_fflush_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	690b      	ldr	r3, [r1, #16]
 80072c0:	4605      	mov	r5, r0
 80072c2:	460c      	mov	r4, r1
 80072c4:	b913      	cbnz	r3, 80072cc <_fflush_r+0x10>
 80072c6:	2500      	movs	r5, #0
 80072c8:	4628      	mov	r0, r5
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	b118      	cbz	r0, 80072d6 <_fflush_r+0x1a>
 80072ce:	6983      	ldr	r3, [r0, #24]
 80072d0:	b90b      	cbnz	r3, 80072d6 <_fflush_r+0x1a>
 80072d2:	f000 f887 	bl	80073e4 <__sinit>
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <_fflush_r+0x6c>)
 80072d8:	429c      	cmp	r4, r3
 80072da:	d11b      	bne.n	8007314 <_fflush_r+0x58>
 80072dc:	686c      	ldr	r4, [r5, #4]
 80072de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0ef      	beq.n	80072c6 <_fflush_r+0xa>
 80072e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072e8:	07d0      	lsls	r0, r2, #31
 80072ea:	d404      	bmi.n	80072f6 <_fflush_r+0x3a>
 80072ec:	0599      	lsls	r1, r3, #22
 80072ee:	d402      	bmi.n	80072f6 <_fflush_r+0x3a>
 80072f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072f2:	f000 f91a 	bl	800752a <__retarget_lock_acquire_recursive>
 80072f6:	4628      	mov	r0, r5
 80072f8:	4621      	mov	r1, r4
 80072fa:	f7ff ff59 	bl	80071b0 <__sflush_r>
 80072fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007300:	07da      	lsls	r2, r3, #31
 8007302:	4605      	mov	r5, r0
 8007304:	d4e0      	bmi.n	80072c8 <_fflush_r+0xc>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	059b      	lsls	r3, r3, #22
 800730a:	d4dd      	bmi.n	80072c8 <_fflush_r+0xc>
 800730c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730e:	f000 f90d 	bl	800752c <__retarget_lock_release_recursive>
 8007312:	e7d9      	b.n	80072c8 <_fflush_r+0xc>
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <_fflush_r+0x70>)
 8007316:	429c      	cmp	r4, r3
 8007318:	d101      	bne.n	800731e <_fflush_r+0x62>
 800731a:	68ac      	ldr	r4, [r5, #8]
 800731c:	e7df      	b.n	80072de <_fflush_r+0x22>
 800731e:	4b04      	ldr	r3, [pc, #16]	; (8007330 <_fflush_r+0x74>)
 8007320:	429c      	cmp	r4, r3
 8007322:	bf08      	it	eq
 8007324:	68ec      	ldreq	r4, [r5, #12]
 8007326:	e7da      	b.n	80072de <_fflush_r+0x22>
 8007328:	08008ebc 	.word	0x08008ebc
 800732c:	08008edc 	.word	0x08008edc
 8007330:	08008e9c 	.word	0x08008e9c

08007334 <std>:
 8007334:	2300      	movs	r3, #0
 8007336:	b510      	push	{r4, lr}
 8007338:	4604      	mov	r4, r0
 800733a:	e9c0 3300 	strd	r3, r3, [r0]
 800733e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007342:	6083      	str	r3, [r0, #8]
 8007344:	8181      	strh	r1, [r0, #12]
 8007346:	6643      	str	r3, [r0, #100]	; 0x64
 8007348:	81c2      	strh	r2, [r0, #14]
 800734a:	6183      	str	r3, [r0, #24]
 800734c:	4619      	mov	r1, r3
 800734e:	2208      	movs	r2, #8
 8007350:	305c      	adds	r0, #92	; 0x5c
 8007352:	f7fe faeb 	bl	800592c <memset>
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <std+0x38>)
 8007358:	6263      	str	r3, [r4, #36]	; 0x24
 800735a:	4b05      	ldr	r3, [pc, #20]	; (8007370 <std+0x3c>)
 800735c:	62a3      	str	r3, [r4, #40]	; 0x28
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <std+0x40>)
 8007360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <std+0x44>)
 8007364:	6224      	str	r4, [r4, #32]
 8007366:	6323      	str	r3, [r4, #48]	; 0x30
 8007368:	bd10      	pop	{r4, pc}
 800736a:	bf00      	nop
 800736c:	0800816d 	.word	0x0800816d
 8007370:	0800818f 	.word	0x0800818f
 8007374:	080081c7 	.word	0x080081c7
 8007378:	080081eb 	.word	0x080081eb

0800737c <_cleanup_r>:
 800737c:	4901      	ldr	r1, [pc, #4]	; (8007384 <_cleanup_r+0x8>)
 800737e:	f000 b8af 	b.w	80074e0 <_fwalk_reent>
 8007382:	bf00      	nop
 8007384:	080072bd 	.word	0x080072bd

08007388 <__sfmoreglue>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	1e4a      	subs	r2, r1, #1
 800738c:	2568      	movs	r5, #104	; 0x68
 800738e:	4355      	muls	r5, r2
 8007390:	460e      	mov	r6, r1
 8007392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007396:	f000 fd23 	bl	8007de0 <_malloc_r>
 800739a:	4604      	mov	r4, r0
 800739c:	b140      	cbz	r0, 80073b0 <__sfmoreglue+0x28>
 800739e:	2100      	movs	r1, #0
 80073a0:	e9c0 1600 	strd	r1, r6, [r0]
 80073a4:	300c      	adds	r0, #12
 80073a6:	60a0      	str	r0, [r4, #8]
 80073a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073ac:	f7fe fabe 	bl	800592c <memset>
 80073b0:	4620      	mov	r0, r4
 80073b2:	bd70      	pop	{r4, r5, r6, pc}

080073b4 <__sfp_lock_acquire>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__sfp_lock_acquire+0x8>)
 80073b6:	f000 b8b8 	b.w	800752a <__retarget_lock_acquire_recursive>
 80073ba:	bf00      	nop
 80073bc:	200005d0 	.word	0x200005d0

080073c0 <__sfp_lock_release>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__sfp_lock_release+0x8>)
 80073c2:	f000 b8b3 	b.w	800752c <__retarget_lock_release_recursive>
 80073c6:	bf00      	nop
 80073c8:	200005d0 	.word	0x200005d0

080073cc <__sinit_lock_acquire>:
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <__sinit_lock_acquire+0x8>)
 80073ce:	f000 b8ac 	b.w	800752a <__retarget_lock_acquire_recursive>
 80073d2:	bf00      	nop
 80073d4:	200005cb 	.word	0x200005cb

080073d8 <__sinit_lock_release>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__sinit_lock_release+0x8>)
 80073da:	f000 b8a7 	b.w	800752c <__retarget_lock_release_recursive>
 80073de:	bf00      	nop
 80073e0:	200005cb 	.word	0x200005cb

080073e4 <__sinit>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	f7ff fff0 	bl	80073cc <__sinit_lock_acquire>
 80073ec:	69a3      	ldr	r3, [r4, #24]
 80073ee:	b11b      	cbz	r3, 80073f8 <__sinit+0x14>
 80073f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f4:	f7ff bff0 	b.w	80073d8 <__sinit_lock_release>
 80073f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073fc:	6523      	str	r3, [r4, #80]	; 0x50
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <__sinit+0x68>)
 8007400:	4a13      	ldr	r2, [pc, #76]	; (8007450 <__sinit+0x6c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	62a2      	str	r2, [r4, #40]	; 0x28
 8007406:	42a3      	cmp	r3, r4
 8007408:	bf04      	itt	eq
 800740a:	2301      	moveq	r3, #1
 800740c:	61a3      	streq	r3, [r4, #24]
 800740e:	4620      	mov	r0, r4
 8007410:	f000 f820 	bl	8007454 <__sfp>
 8007414:	6060      	str	r0, [r4, #4]
 8007416:	4620      	mov	r0, r4
 8007418:	f000 f81c 	bl	8007454 <__sfp>
 800741c:	60a0      	str	r0, [r4, #8]
 800741e:	4620      	mov	r0, r4
 8007420:	f000 f818 	bl	8007454 <__sfp>
 8007424:	2200      	movs	r2, #0
 8007426:	60e0      	str	r0, [r4, #12]
 8007428:	2104      	movs	r1, #4
 800742a:	6860      	ldr	r0, [r4, #4]
 800742c:	f7ff ff82 	bl	8007334 <std>
 8007430:	68a0      	ldr	r0, [r4, #8]
 8007432:	2201      	movs	r2, #1
 8007434:	2109      	movs	r1, #9
 8007436:	f7ff ff7d 	bl	8007334 <std>
 800743a:	68e0      	ldr	r0, [r4, #12]
 800743c:	2202      	movs	r2, #2
 800743e:	2112      	movs	r1, #18
 8007440:	f7ff ff78 	bl	8007334 <std>
 8007444:	2301      	movs	r3, #1
 8007446:	61a3      	str	r3, [r4, #24]
 8007448:	e7d2      	b.n	80073f0 <__sinit+0xc>
 800744a:	bf00      	nop
 800744c:	08008dd0 	.word	0x08008dd0
 8007450:	0800737d 	.word	0x0800737d

08007454 <__sfp>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	4607      	mov	r7, r0
 8007458:	f7ff ffac 	bl	80073b4 <__sfp_lock_acquire>
 800745c:	4b1e      	ldr	r3, [pc, #120]	; (80074d8 <__sfp+0x84>)
 800745e:	681e      	ldr	r6, [r3, #0]
 8007460:	69b3      	ldr	r3, [r6, #24]
 8007462:	b913      	cbnz	r3, 800746a <__sfp+0x16>
 8007464:	4630      	mov	r0, r6
 8007466:	f7ff ffbd 	bl	80073e4 <__sinit>
 800746a:	3648      	adds	r6, #72	; 0x48
 800746c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007470:	3b01      	subs	r3, #1
 8007472:	d503      	bpl.n	800747c <__sfp+0x28>
 8007474:	6833      	ldr	r3, [r6, #0]
 8007476:	b30b      	cbz	r3, 80074bc <__sfp+0x68>
 8007478:	6836      	ldr	r6, [r6, #0]
 800747a:	e7f7      	b.n	800746c <__sfp+0x18>
 800747c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007480:	b9d5      	cbnz	r5, 80074b8 <__sfp+0x64>
 8007482:	4b16      	ldr	r3, [pc, #88]	; (80074dc <__sfp+0x88>)
 8007484:	60e3      	str	r3, [r4, #12]
 8007486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800748a:	6665      	str	r5, [r4, #100]	; 0x64
 800748c:	f000 f84c 	bl	8007528 <__retarget_lock_init_recursive>
 8007490:	f7ff ff96 	bl	80073c0 <__sfp_lock_release>
 8007494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800749c:	6025      	str	r5, [r4, #0]
 800749e:	61a5      	str	r5, [r4, #24]
 80074a0:	2208      	movs	r2, #8
 80074a2:	4629      	mov	r1, r5
 80074a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074a8:	f7fe fa40 	bl	800592c <memset>
 80074ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074b4:	4620      	mov	r0, r4
 80074b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b8:	3468      	adds	r4, #104	; 0x68
 80074ba:	e7d9      	b.n	8007470 <__sfp+0x1c>
 80074bc:	2104      	movs	r1, #4
 80074be:	4638      	mov	r0, r7
 80074c0:	f7ff ff62 	bl	8007388 <__sfmoreglue>
 80074c4:	4604      	mov	r4, r0
 80074c6:	6030      	str	r0, [r6, #0]
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d1d5      	bne.n	8007478 <__sfp+0x24>
 80074cc:	f7ff ff78 	bl	80073c0 <__sfp_lock_release>
 80074d0:	230c      	movs	r3, #12
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	e7ee      	b.n	80074b4 <__sfp+0x60>
 80074d6:	bf00      	nop
 80074d8:	08008dd0 	.word	0x08008dd0
 80074dc:	ffff0001 	.word	0xffff0001

080074e0 <_fwalk_reent>:
 80074e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e4:	4606      	mov	r6, r0
 80074e6:	4688      	mov	r8, r1
 80074e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074ec:	2700      	movs	r7, #0
 80074ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074f2:	f1b9 0901 	subs.w	r9, r9, #1
 80074f6:	d505      	bpl.n	8007504 <_fwalk_reent+0x24>
 80074f8:	6824      	ldr	r4, [r4, #0]
 80074fa:	2c00      	cmp	r4, #0
 80074fc:	d1f7      	bne.n	80074ee <_fwalk_reent+0xe>
 80074fe:	4638      	mov	r0, r7
 8007500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007504:	89ab      	ldrh	r3, [r5, #12]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d907      	bls.n	800751a <_fwalk_reent+0x3a>
 800750a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800750e:	3301      	adds	r3, #1
 8007510:	d003      	beq.n	800751a <_fwalk_reent+0x3a>
 8007512:	4629      	mov	r1, r5
 8007514:	4630      	mov	r0, r6
 8007516:	47c0      	blx	r8
 8007518:	4307      	orrs	r7, r0
 800751a:	3568      	adds	r5, #104	; 0x68
 800751c:	e7e9      	b.n	80074f2 <_fwalk_reent+0x12>
	...

08007520 <_localeconv_r>:
 8007520:	4800      	ldr	r0, [pc, #0]	; (8007524 <_localeconv_r+0x4>)
 8007522:	4770      	bx	lr
 8007524:	2000016c 	.word	0x2000016c

08007528 <__retarget_lock_init_recursive>:
 8007528:	4770      	bx	lr

0800752a <__retarget_lock_acquire_recursive>:
 800752a:	4770      	bx	lr

0800752c <__retarget_lock_release_recursive>:
 800752c:	4770      	bx	lr

0800752e <__swhatbuf_r>:
 800752e:	b570      	push	{r4, r5, r6, lr}
 8007530:	460e      	mov	r6, r1
 8007532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007536:	2900      	cmp	r1, #0
 8007538:	b096      	sub	sp, #88	; 0x58
 800753a:	4614      	mov	r4, r2
 800753c:	461d      	mov	r5, r3
 800753e:	da07      	bge.n	8007550 <__swhatbuf_r+0x22>
 8007540:	2300      	movs	r3, #0
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	89b3      	ldrh	r3, [r6, #12]
 8007546:	061a      	lsls	r2, r3, #24
 8007548:	d410      	bmi.n	800756c <__swhatbuf_r+0x3e>
 800754a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800754e:	e00e      	b.n	800756e <__swhatbuf_r+0x40>
 8007550:	466a      	mov	r2, sp
 8007552:	f000 fea1 	bl	8008298 <_fstat_r>
 8007556:	2800      	cmp	r0, #0
 8007558:	dbf2      	blt.n	8007540 <__swhatbuf_r+0x12>
 800755a:	9a01      	ldr	r2, [sp, #4]
 800755c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007560:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007564:	425a      	negs	r2, r3
 8007566:	415a      	adcs	r2, r3
 8007568:	602a      	str	r2, [r5, #0]
 800756a:	e7ee      	b.n	800754a <__swhatbuf_r+0x1c>
 800756c:	2340      	movs	r3, #64	; 0x40
 800756e:	2000      	movs	r0, #0
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	b016      	add	sp, #88	; 0x58
 8007574:	bd70      	pop	{r4, r5, r6, pc}
	...

08007578 <__smakebuf_r>:
 8007578:	898b      	ldrh	r3, [r1, #12]
 800757a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800757c:	079d      	lsls	r5, r3, #30
 800757e:	4606      	mov	r6, r0
 8007580:	460c      	mov	r4, r1
 8007582:	d507      	bpl.n	8007594 <__smakebuf_r+0x1c>
 8007584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	6123      	str	r3, [r4, #16]
 800758c:	2301      	movs	r3, #1
 800758e:	6163      	str	r3, [r4, #20]
 8007590:	b002      	add	sp, #8
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	ab01      	add	r3, sp, #4
 8007596:	466a      	mov	r2, sp
 8007598:	f7ff ffc9 	bl	800752e <__swhatbuf_r>
 800759c:	9900      	ldr	r1, [sp, #0]
 800759e:	4605      	mov	r5, r0
 80075a0:	4630      	mov	r0, r6
 80075a2:	f000 fc1d 	bl	8007de0 <_malloc_r>
 80075a6:	b948      	cbnz	r0, 80075bc <__smakebuf_r+0x44>
 80075a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ac:	059a      	lsls	r2, r3, #22
 80075ae:	d4ef      	bmi.n	8007590 <__smakebuf_r+0x18>
 80075b0:	f023 0303 	bic.w	r3, r3, #3
 80075b4:	f043 0302 	orr.w	r3, r3, #2
 80075b8:	81a3      	strh	r3, [r4, #12]
 80075ba:	e7e3      	b.n	8007584 <__smakebuf_r+0xc>
 80075bc:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <__smakebuf_r+0x7c>)
 80075be:	62b3      	str	r3, [r6, #40]	; 0x28
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	6020      	str	r0, [r4, #0]
 80075c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c8:	81a3      	strh	r3, [r4, #12]
 80075ca:	9b00      	ldr	r3, [sp, #0]
 80075cc:	6163      	str	r3, [r4, #20]
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	6120      	str	r0, [r4, #16]
 80075d2:	b15b      	cbz	r3, 80075ec <__smakebuf_r+0x74>
 80075d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d8:	4630      	mov	r0, r6
 80075da:	f000 fe6f 	bl	80082bc <_isatty_r>
 80075de:	b128      	cbz	r0, 80075ec <__smakebuf_r+0x74>
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	f043 0301 	orr.w	r3, r3, #1
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	89a0      	ldrh	r0, [r4, #12]
 80075ee:	4305      	orrs	r5, r0
 80075f0:	81a5      	strh	r5, [r4, #12]
 80075f2:	e7cd      	b.n	8007590 <__smakebuf_r+0x18>
 80075f4:	0800737d 	.word	0x0800737d

080075f8 <malloc>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <malloc+0xc>)
 80075fa:	4601      	mov	r1, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f000 bbef 	b.w	8007de0 <_malloc_r>
 8007602:	bf00      	nop
 8007604:	20000018 	.word	0x20000018

08007608 <memcpy>:
 8007608:	440a      	add	r2, r1
 800760a:	4291      	cmp	r1, r2
 800760c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007610:	d100      	bne.n	8007614 <memcpy+0xc>
 8007612:	4770      	bx	lr
 8007614:	b510      	push	{r4, lr}
 8007616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800761a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800761e:	4291      	cmp	r1, r2
 8007620:	d1f9      	bne.n	8007616 <memcpy+0xe>
 8007622:	bd10      	pop	{r4, pc}

08007624 <_Balloc>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007628:	4604      	mov	r4, r0
 800762a:	460d      	mov	r5, r1
 800762c:	b976      	cbnz	r6, 800764c <_Balloc+0x28>
 800762e:	2010      	movs	r0, #16
 8007630:	f7ff ffe2 	bl	80075f8 <malloc>
 8007634:	4602      	mov	r2, r0
 8007636:	6260      	str	r0, [r4, #36]	; 0x24
 8007638:	b920      	cbnz	r0, 8007644 <_Balloc+0x20>
 800763a:	4b18      	ldr	r3, [pc, #96]	; (800769c <_Balloc+0x78>)
 800763c:	4818      	ldr	r0, [pc, #96]	; (80076a0 <_Balloc+0x7c>)
 800763e:	2166      	movs	r1, #102	; 0x66
 8007640:	f000 fdea 	bl	8008218 <__assert_func>
 8007644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007648:	6006      	str	r6, [r0, #0]
 800764a:	60c6      	str	r6, [r0, #12]
 800764c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800764e:	68f3      	ldr	r3, [r6, #12]
 8007650:	b183      	cbz	r3, 8007674 <_Balloc+0x50>
 8007652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800765a:	b9b8      	cbnz	r0, 800768c <_Balloc+0x68>
 800765c:	2101      	movs	r1, #1
 800765e:	fa01 f605 	lsl.w	r6, r1, r5
 8007662:	1d72      	adds	r2, r6, #5
 8007664:	0092      	lsls	r2, r2, #2
 8007666:	4620      	mov	r0, r4
 8007668:	f000 fb5a 	bl	8007d20 <_calloc_r>
 800766c:	b160      	cbz	r0, 8007688 <_Balloc+0x64>
 800766e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007672:	e00e      	b.n	8007692 <_Balloc+0x6e>
 8007674:	2221      	movs	r2, #33	; 0x21
 8007676:	2104      	movs	r1, #4
 8007678:	4620      	mov	r0, r4
 800767a:	f000 fb51 	bl	8007d20 <_calloc_r>
 800767e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007680:	60f0      	str	r0, [r6, #12]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e4      	bne.n	8007652 <_Balloc+0x2e>
 8007688:	2000      	movs	r0, #0
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	6802      	ldr	r2, [r0, #0]
 800768e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007692:	2300      	movs	r3, #0
 8007694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007698:	e7f7      	b.n	800768a <_Balloc+0x66>
 800769a:	bf00      	nop
 800769c:	08008e15 	.word	0x08008e15
 80076a0:	08008efc 	.word	0x08008efc

080076a4 <_Bfree>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076a8:	4605      	mov	r5, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	b976      	cbnz	r6, 80076cc <_Bfree+0x28>
 80076ae:	2010      	movs	r0, #16
 80076b0:	f7ff ffa2 	bl	80075f8 <malloc>
 80076b4:	4602      	mov	r2, r0
 80076b6:	6268      	str	r0, [r5, #36]	; 0x24
 80076b8:	b920      	cbnz	r0, 80076c4 <_Bfree+0x20>
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <_Bfree+0x3c>)
 80076bc:	4809      	ldr	r0, [pc, #36]	; (80076e4 <_Bfree+0x40>)
 80076be:	218a      	movs	r1, #138	; 0x8a
 80076c0:	f000 fdaa 	bl	8008218 <__assert_func>
 80076c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076c8:	6006      	str	r6, [r0, #0]
 80076ca:	60c6      	str	r6, [r0, #12]
 80076cc:	b13c      	cbz	r4, 80076de <_Bfree+0x3a>
 80076ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076d0:	6862      	ldr	r2, [r4, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076d8:	6021      	str	r1, [r4, #0]
 80076da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	08008e15 	.word	0x08008e15
 80076e4:	08008efc 	.word	0x08008efc

080076e8 <__multadd>:
 80076e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	690e      	ldr	r6, [r1, #16]
 80076ee:	4607      	mov	r7, r0
 80076f0:	4698      	mov	r8, r3
 80076f2:	460c      	mov	r4, r1
 80076f4:	f101 0014 	add.w	r0, r1, #20
 80076f8:	2300      	movs	r3, #0
 80076fa:	6805      	ldr	r5, [r0, #0]
 80076fc:	b2a9      	uxth	r1, r5
 80076fe:	fb02 8101 	mla	r1, r2, r1, r8
 8007702:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007706:	0c2d      	lsrs	r5, r5, #16
 8007708:	fb02 c505 	mla	r5, r2, r5, ip
 800770c:	b289      	uxth	r1, r1
 800770e:	3301      	adds	r3, #1
 8007710:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007714:	429e      	cmp	r6, r3
 8007716:	f840 1b04 	str.w	r1, [r0], #4
 800771a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800771e:	dcec      	bgt.n	80076fa <__multadd+0x12>
 8007720:	f1b8 0f00 	cmp.w	r8, #0
 8007724:	d022      	beq.n	800776c <__multadd+0x84>
 8007726:	68a3      	ldr	r3, [r4, #8]
 8007728:	42b3      	cmp	r3, r6
 800772a:	dc19      	bgt.n	8007760 <__multadd+0x78>
 800772c:	6861      	ldr	r1, [r4, #4]
 800772e:	4638      	mov	r0, r7
 8007730:	3101      	adds	r1, #1
 8007732:	f7ff ff77 	bl	8007624 <_Balloc>
 8007736:	4605      	mov	r5, r0
 8007738:	b928      	cbnz	r0, 8007746 <__multadd+0x5e>
 800773a:	4602      	mov	r2, r0
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <__multadd+0x8c>)
 800773e:	480e      	ldr	r0, [pc, #56]	; (8007778 <__multadd+0x90>)
 8007740:	21b5      	movs	r1, #181	; 0xb5
 8007742:	f000 fd69 	bl	8008218 <__assert_func>
 8007746:	6922      	ldr	r2, [r4, #16]
 8007748:	3202      	adds	r2, #2
 800774a:	f104 010c 	add.w	r1, r4, #12
 800774e:	0092      	lsls	r2, r2, #2
 8007750:	300c      	adds	r0, #12
 8007752:	f7ff ff59 	bl	8007608 <memcpy>
 8007756:	4621      	mov	r1, r4
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff ffa3 	bl	80076a4 <_Bfree>
 800775e:	462c      	mov	r4, r5
 8007760:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007764:	3601      	adds	r6, #1
 8007766:	f8c3 8014 	str.w	r8, [r3, #20]
 800776a:	6126      	str	r6, [r4, #16]
 800776c:	4620      	mov	r0, r4
 800776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007772:	bf00      	nop
 8007774:	08008e8b 	.word	0x08008e8b
 8007778:	08008efc 	.word	0x08008efc

0800777c <__hi0bits>:
 800777c:	0c03      	lsrs	r3, r0, #16
 800777e:	041b      	lsls	r3, r3, #16
 8007780:	b9d3      	cbnz	r3, 80077b8 <__hi0bits+0x3c>
 8007782:	0400      	lsls	r0, r0, #16
 8007784:	2310      	movs	r3, #16
 8007786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800778a:	bf04      	itt	eq
 800778c:	0200      	lsleq	r0, r0, #8
 800778e:	3308      	addeq	r3, #8
 8007790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007794:	bf04      	itt	eq
 8007796:	0100      	lsleq	r0, r0, #4
 8007798:	3304      	addeq	r3, #4
 800779a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800779e:	bf04      	itt	eq
 80077a0:	0080      	lsleq	r0, r0, #2
 80077a2:	3302      	addeq	r3, #2
 80077a4:	2800      	cmp	r0, #0
 80077a6:	db05      	blt.n	80077b4 <__hi0bits+0x38>
 80077a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80077ac:	f103 0301 	add.w	r3, r3, #1
 80077b0:	bf08      	it	eq
 80077b2:	2320      	moveq	r3, #32
 80077b4:	4618      	mov	r0, r3
 80077b6:	4770      	bx	lr
 80077b8:	2300      	movs	r3, #0
 80077ba:	e7e4      	b.n	8007786 <__hi0bits+0xa>

080077bc <__lo0bits>:
 80077bc:	6803      	ldr	r3, [r0, #0]
 80077be:	f013 0207 	ands.w	r2, r3, #7
 80077c2:	4601      	mov	r1, r0
 80077c4:	d00b      	beq.n	80077de <__lo0bits+0x22>
 80077c6:	07da      	lsls	r2, r3, #31
 80077c8:	d424      	bmi.n	8007814 <__lo0bits+0x58>
 80077ca:	0798      	lsls	r0, r3, #30
 80077cc:	bf49      	itett	mi
 80077ce:	085b      	lsrmi	r3, r3, #1
 80077d0:	089b      	lsrpl	r3, r3, #2
 80077d2:	2001      	movmi	r0, #1
 80077d4:	600b      	strmi	r3, [r1, #0]
 80077d6:	bf5c      	itt	pl
 80077d8:	600b      	strpl	r3, [r1, #0]
 80077da:	2002      	movpl	r0, #2
 80077dc:	4770      	bx	lr
 80077de:	b298      	uxth	r0, r3
 80077e0:	b9b0      	cbnz	r0, 8007810 <__lo0bits+0x54>
 80077e2:	0c1b      	lsrs	r3, r3, #16
 80077e4:	2010      	movs	r0, #16
 80077e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077ea:	bf04      	itt	eq
 80077ec:	0a1b      	lsreq	r3, r3, #8
 80077ee:	3008      	addeq	r0, #8
 80077f0:	071a      	lsls	r2, r3, #28
 80077f2:	bf04      	itt	eq
 80077f4:	091b      	lsreq	r3, r3, #4
 80077f6:	3004      	addeq	r0, #4
 80077f8:	079a      	lsls	r2, r3, #30
 80077fa:	bf04      	itt	eq
 80077fc:	089b      	lsreq	r3, r3, #2
 80077fe:	3002      	addeq	r0, #2
 8007800:	07da      	lsls	r2, r3, #31
 8007802:	d403      	bmi.n	800780c <__lo0bits+0x50>
 8007804:	085b      	lsrs	r3, r3, #1
 8007806:	f100 0001 	add.w	r0, r0, #1
 800780a:	d005      	beq.n	8007818 <__lo0bits+0x5c>
 800780c:	600b      	str	r3, [r1, #0]
 800780e:	4770      	bx	lr
 8007810:	4610      	mov	r0, r2
 8007812:	e7e8      	b.n	80077e6 <__lo0bits+0x2a>
 8007814:	2000      	movs	r0, #0
 8007816:	4770      	bx	lr
 8007818:	2020      	movs	r0, #32
 800781a:	4770      	bx	lr

0800781c <__i2b>:
 800781c:	b510      	push	{r4, lr}
 800781e:	460c      	mov	r4, r1
 8007820:	2101      	movs	r1, #1
 8007822:	f7ff feff 	bl	8007624 <_Balloc>
 8007826:	4602      	mov	r2, r0
 8007828:	b928      	cbnz	r0, 8007836 <__i2b+0x1a>
 800782a:	4b05      	ldr	r3, [pc, #20]	; (8007840 <__i2b+0x24>)
 800782c:	4805      	ldr	r0, [pc, #20]	; (8007844 <__i2b+0x28>)
 800782e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007832:	f000 fcf1 	bl	8008218 <__assert_func>
 8007836:	2301      	movs	r3, #1
 8007838:	6144      	str	r4, [r0, #20]
 800783a:	6103      	str	r3, [r0, #16]
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	08008e8b 	.word	0x08008e8b
 8007844:	08008efc 	.word	0x08008efc

08007848 <__multiply>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	4614      	mov	r4, r2
 800784e:	690a      	ldr	r2, [r1, #16]
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	429a      	cmp	r2, r3
 8007854:	bfb8      	it	lt
 8007856:	460b      	movlt	r3, r1
 8007858:	460d      	mov	r5, r1
 800785a:	bfbc      	itt	lt
 800785c:	4625      	movlt	r5, r4
 800785e:	461c      	movlt	r4, r3
 8007860:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007864:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007868:	68ab      	ldr	r3, [r5, #8]
 800786a:	6869      	ldr	r1, [r5, #4]
 800786c:	eb0a 0709 	add.w	r7, sl, r9
 8007870:	42bb      	cmp	r3, r7
 8007872:	b085      	sub	sp, #20
 8007874:	bfb8      	it	lt
 8007876:	3101      	addlt	r1, #1
 8007878:	f7ff fed4 	bl	8007624 <_Balloc>
 800787c:	b930      	cbnz	r0, 800788c <__multiply+0x44>
 800787e:	4602      	mov	r2, r0
 8007880:	4b42      	ldr	r3, [pc, #264]	; (800798c <__multiply+0x144>)
 8007882:	4843      	ldr	r0, [pc, #268]	; (8007990 <__multiply+0x148>)
 8007884:	f240 115d 	movw	r1, #349	; 0x15d
 8007888:	f000 fcc6 	bl	8008218 <__assert_func>
 800788c:	f100 0614 	add.w	r6, r0, #20
 8007890:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007894:	4633      	mov	r3, r6
 8007896:	2200      	movs	r2, #0
 8007898:	4543      	cmp	r3, r8
 800789a:	d31e      	bcc.n	80078da <__multiply+0x92>
 800789c:	f105 0c14 	add.w	ip, r5, #20
 80078a0:	f104 0314 	add.w	r3, r4, #20
 80078a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80078a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80078ac:	9202      	str	r2, [sp, #8]
 80078ae:	ebac 0205 	sub.w	r2, ip, r5
 80078b2:	3a15      	subs	r2, #21
 80078b4:	f022 0203 	bic.w	r2, r2, #3
 80078b8:	3204      	adds	r2, #4
 80078ba:	f105 0115 	add.w	r1, r5, #21
 80078be:	458c      	cmp	ip, r1
 80078c0:	bf38      	it	cc
 80078c2:	2204      	movcc	r2, #4
 80078c4:	9201      	str	r2, [sp, #4]
 80078c6:	9a02      	ldr	r2, [sp, #8]
 80078c8:	9303      	str	r3, [sp, #12]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d808      	bhi.n	80078e0 <__multiply+0x98>
 80078ce:	2f00      	cmp	r7, #0
 80078d0:	dc55      	bgt.n	800797e <__multiply+0x136>
 80078d2:	6107      	str	r7, [r0, #16]
 80078d4:	b005      	add	sp, #20
 80078d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078da:	f843 2b04 	str.w	r2, [r3], #4
 80078de:	e7db      	b.n	8007898 <__multiply+0x50>
 80078e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80078e4:	f1ba 0f00 	cmp.w	sl, #0
 80078e8:	d020      	beq.n	800792c <__multiply+0xe4>
 80078ea:	f105 0e14 	add.w	lr, r5, #20
 80078ee:	46b1      	mov	r9, r6
 80078f0:	2200      	movs	r2, #0
 80078f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80078f6:	f8d9 b000 	ldr.w	fp, [r9]
 80078fa:	b2a1      	uxth	r1, r4
 80078fc:	fa1f fb8b 	uxth.w	fp, fp
 8007900:	fb0a b101 	mla	r1, sl, r1, fp
 8007904:	4411      	add	r1, r2
 8007906:	f8d9 2000 	ldr.w	r2, [r9]
 800790a:	0c24      	lsrs	r4, r4, #16
 800790c:	0c12      	lsrs	r2, r2, #16
 800790e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007912:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007916:	b289      	uxth	r1, r1
 8007918:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800791c:	45f4      	cmp	ip, lr
 800791e:	f849 1b04 	str.w	r1, [r9], #4
 8007922:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007926:	d8e4      	bhi.n	80078f2 <__multiply+0xaa>
 8007928:	9901      	ldr	r1, [sp, #4]
 800792a:	5072      	str	r2, [r6, r1]
 800792c:	9a03      	ldr	r2, [sp, #12]
 800792e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007932:	3304      	adds	r3, #4
 8007934:	f1b9 0f00 	cmp.w	r9, #0
 8007938:	d01f      	beq.n	800797a <__multiply+0x132>
 800793a:	6834      	ldr	r4, [r6, #0]
 800793c:	f105 0114 	add.w	r1, r5, #20
 8007940:	46b6      	mov	lr, r6
 8007942:	f04f 0a00 	mov.w	sl, #0
 8007946:	880a      	ldrh	r2, [r1, #0]
 8007948:	f8be b002 	ldrh.w	fp, [lr, #2]
 800794c:	fb09 b202 	mla	r2, r9, r2, fp
 8007950:	4492      	add	sl, r2
 8007952:	b2a4      	uxth	r4, r4
 8007954:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007958:	f84e 4b04 	str.w	r4, [lr], #4
 800795c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007960:	f8be 2000 	ldrh.w	r2, [lr]
 8007964:	0c24      	lsrs	r4, r4, #16
 8007966:	fb09 2404 	mla	r4, r9, r4, r2
 800796a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800796e:	458c      	cmp	ip, r1
 8007970:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007974:	d8e7      	bhi.n	8007946 <__multiply+0xfe>
 8007976:	9a01      	ldr	r2, [sp, #4]
 8007978:	50b4      	str	r4, [r6, r2]
 800797a:	3604      	adds	r6, #4
 800797c:	e7a3      	b.n	80078c6 <__multiply+0x7e>
 800797e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1a5      	bne.n	80078d2 <__multiply+0x8a>
 8007986:	3f01      	subs	r7, #1
 8007988:	e7a1      	b.n	80078ce <__multiply+0x86>
 800798a:	bf00      	nop
 800798c:	08008e8b 	.word	0x08008e8b
 8007990:	08008efc 	.word	0x08008efc

08007994 <__pow5mult>:
 8007994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007998:	4615      	mov	r5, r2
 800799a:	f012 0203 	ands.w	r2, r2, #3
 800799e:	4606      	mov	r6, r0
 80079a0:	460f      	mov	r7, r1
 80079a2:	d007      	beq.n	80079b4 <__pow5mult+0x20>
 80079a4:	4c25      	ldr	r4, [pc, #148]	; (8007a3c <__pow5mult+0xa8>)
 80079a6:	3a01      	subs	r2, #1
 80079a8:	2300      	movs	r3, #0
 80079aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079ae:	f7ff fe9b 	bl	80076e8 <__multadd>
 80079b2:	4607      	mov	r7, r0
 80079b4:	10ad      	asrs	r5, r5, #2
 80079b6:	d03d      	beq.n	8007a34 <__pow5mult+0xa0>
 80079b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079ba:	b97c      	cbnz	r4, 80079dc <__pow5mult+0x48>
 80079bc:	2010      	movs	r0, #16
 80079be:	f7ff fe1b 	bl	80075f8 <malloc>
 80079c2:	4602      	mov	r2, r0
 80079c4:	6270      	str	r0, [r6, #36]	; 0x24
 80079c6:	b928      	cbnz	r0, 80079d4 <__pow5mult+0x40>
 80079c8:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <__pow5mult+0xac>)
 80079ca:	481e      	ldr	r0, [pc, #120]	; (8007a44 <__pow5mult+0xb0>)
 80079cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80079d0:	f000 fc22 	bl	8008218 <__assert_func>
 80079d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079d8:	6004      	str	r4, [r0, #0]
 80079da:	60c4      	str	r4, [r0, #12]
 80079dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079e4:	b94c      	cbnz	r4, 80079fa <__pow5mult+0x66>
 80079e6:	f240 2171 	movw	r1, #625	; 0x271
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff ff16 	bl	800781c <__i2b>
 80079f0:	2300      	movs	r3, #0
 80079f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80079f6:	4604      	mov	r4, r0
 80079f8:	6003      	str	r3, [r0, #0]
 80079fa:	f04f 0900 	mov.w	r9, #0
 80079fe:	07eb      	lsls	r3, r5, #31
 8007a00:	d50a      	bpl.n	8007a18 <__pow5mult+0x84>
 8007a02:	4639      	mov	r1, r7
 8007a04:	4622      	mov	r2, r4
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ff1e 	bl	8007848 <__multiply>
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	4680      	mov	r8, r0
 8007a10:	4630      	mov	r0, r6
 8007a12:	f7ff fe47 	bl	80076a4 <_Bfree>
 8007a16:	4647      	mov	r7, r8
 8007a18:	106d      	asrs	r5, r5, #1
 8007a1a:	d00b      	beq.n	8007a34 <__pow5mult+0xa0>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	b938      	cbnz	r0, 8007a30 <__pow5mult+0x9c>
 8007a20:	4622      	mov	r2, r4
 8007a22:	4621      	mov	r1, r4
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff ff0f 	bl	8007848 <__multiply>
 8007a2a:	6020      	str	r0, [r4, #0]
 8007a2c:	f8c0 9000 	str.w	r9, [r0]
 8007a30:	4604      	mov	r4, r0
 8007a32:	e7e4      	b.n	80079fe <__pow5mult+0x6a>
 8007a34:	4638      	mov	r0, r7
 8007a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08009050 	.word	0x08009050
 8007a40:	08008e15 	.word	0x08008e15
 8007a44:	08008efc 	.word	0x08008efc

08007a48 <__lshift>:
 8007a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	6849      	ldr	r1, [r1, #4]
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a56:	68a3      	ldr	r3, [r4, #8]
 8007a58:	4607      	mov	r7, r0
 8007a5a:	4691      	mov	r9, r2
 8007a5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a60:	f108 0601 	add.w	r6, r8, #1
 8007a64:	42b3      	cmp	r3, r6
 8007a66:	db0b      	blt.n	8007a80 <__lshift+0x38>
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff fddb 	bl	8007624 <_Balloc>
 8007a6e:	4605      	mov	r5, r0
 8007a70:	b948      	cbnz	r0, 8007a86 <__lshift+0x3e>
 8007a72:	4602      	mov	r2, r0
 8007a74:	4b28      	ldr	r3, [pc, #160]	; (8007b18 <__lshift+0xd0>)
 8007a76:	4829      	ldr	r0, [pc, #164]	; (8007b1c <__lshift+0xd4>)
 8007a78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a7c:	f000 fbcc 	bl	8008218 <__assert_func>
 8007a80:	3101      	adds	r1, #1
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	e7ee      	b.n	8007a64 <__lshift+0x1c>
 8007a86:	2300      	movs	r3, #0
 8007a88:	f100 0114 	add.w	r1, r0, #20
 8007a8c:	f100 0210 	add.w	r2, r0, #16
 8007a90:	4618      	mov	r0, r3
 8007a92:	4553      	cmp	r3, sl
 8007a94:	db33      	blt.n	8007afe <__lshift+0xb6>
 8007a96:	6920      	ldr	r0, [r4, #16]
 8007a98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a9c:	f104 0314 	add.w	r3, r4, #20
 8007aa0:	f019 091f 	ands.w	r9, r9, #31
 8007aa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007aa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007aac:	d02b      	beq.n	8007b06 <__lshift+0xbe>
 8007aae:	f1c9 0e20 	rsb	lr, r9, #32
 8007ab2:	468a      	mov	sl, r1
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	6818      	ldr	r0, [r3, #0]
 8007ab8:	fa00 f009 	lsl.w	r0, r0, r9
 8007abc:	4302      	orrs	r2, r0
 8007abe:	f84a 2b04 	str.w	r2, [sl], #4
 8007ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac6:	459c      	cmp	ip, r3
 8007ac8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007acc:	d8f3      	bhi.n	8007ab6 <__lshift+0x6e>
 8007ace:	ebac 0304 	sub.w	r3, ip, r4
 8007ad2:	3b15      	subs	r3, #21
 8007ad4:	f023 0303 	bic.w	r3, r3, #3
 8007ad8:	3304      	adds	r3, #4
 8007ada:	f104 0015 	add.w	r0, r4, #21
 8007ade:	4584      	cmp	ip, r0
 8007ae0:	bf38      	it	cc
 8007ae2:	2304      	movcc	r3, #4
 8007ae4:	50ca      	str	r2, [r1, r3]
 8007ae6:	b10a      	cbz	r2, 8007aec <__lshift+0xa4>
 8007ae8:	f108 0602 	add.w	r6, r8, #2
 8007aec:	3e01      	subs	r6, #1
 8007aee:	4638      	mov	r0, r7
 8007af0:	612e      	str	r6, [r5, #16]
 8007af2:	4621      	mov	r1, r4
 8007af4:	f7ff fdd6 	bl	80076a4 <_Bfree>
 8007af8:	4628      	mov	r0, r5
 8007afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b02:	3301      	adds	r3, #1
 8007b04:	e7c5      	b.n	8007a92 <__lshift+0x4a>
 8007b06:	3904      	subs	r1, #4
 8007b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b10:	459c      	cmp	ip, r3
 8007b12:	d8f9      	bhi.n	8007b08 <__lshift+0xc0>
 8007b14:	e7ea      	b.n	8007aec <__lshift+0xa4>
 8007b16:	bf00      	nop
 8007b18:	08008e8b 	.word	0x08008e8b
 8007b1c:	08008efc 	.word	0x08008efc

08007b20 <__mcmp>:
 8007b20:	b530      	push	{r4, r5, lr}
 8007b22:	6902      	ldr	r2, [r0, #16]
 8007b24:	690c      	ldr	r4, [r1, #16]
 8007b26:	1b12      	subs	r2, r2, r4
 8007b28:	d10e      	bne.n	8007b48 <__mcmp+0x28>
 8007b2a:	f100 0314 	add.w	r3, r0, #20
 8007b2e:	3114      	adds	r1, #20
 8007b30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b40:	42a5      	cmp	r5, r4
 8007b42:	d003      	beq.n	8007b4c <__mcmp+0x2c>
 8007b44:	d305      	bcc.n	8007b52 <__mcmp+0x32>
 8007b46:	2201      	movs	r2, #1
 8007b48:	4610      	mov	r0, r2
 8007b4a:	bd30      	pop	{r4, r5, pc}
 8007b4c:	4283      	cmp	r3, r0
 8007b4e:	d3f3      	bcc.n	8007b38 <__mcmp+0x18>
 8007b50:	e7fa      	b.n	8007b48 <__mcmp+0x28>
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295
 8007b56:	e7f7      	b.n	8007b48 <__mcmp+0x28>

08007b58 <__mdiff>:
 8007b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	4606      	mov	r6, r0
 8007b60:	4611      	mov	r1, r2
 8007b62:	4620      	mov	r0, r4
 8007b64:	4617      	mov	r7, r2
 8007b66:	f7ff ffdb 	bl	8007b20 <__mcmp>
 8007b6a:	1e05      	subs	r5, r0, #0
 8007b6c:	d110      	bne.n	8007b90 <__mdiff+0x38>
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4630      	mov	r0, r6
 8007b72:	f7ff fd57 	bl	8007624 <_Balloc>
 8007b76:	b930      	cbnz	r0, 8007b86 <__mdiff+0x2e>
 8007b78:	4b39      	ldr	r3, [pc, #228]	; (8007c60 <__mdiff+0x108>)
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	f240 2132 	movw	r1, #562	; 0x232
 8007b80:	4838      	ldr	r0, [pc, #224]	; (8007c64 <__mdiff+0x10c>)
 8007b82:	f000 fb49 	bl	8008218 <__assert_func>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b90:	bfa4      	itt	ge
 8007b92:	463b      	movge	r3, r7
 8007b94:	4627      	movge	r7, r4
 8007b96:	4630      	mov	r0, r6
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	bfa6      	itte	ge
 8007b9c:	461c      	movge	r4, r3
 8007b9e:	2500      	movge	r5, #0
 8007ba0:	2501      	movlt	r5, #1
 8007ba2:	f7ff fd3f 	bl	8007624 <_Balloc>
 8007ba6:	b920      	cbnz	r0, 8007bb2 <__mdiff+0x5a>
 8007ba8:	4b2d      	ldr	r3, [pc, #180]	; (8007c60 <__mdiff+0x108>)
 8007baa:	4602      	mov	r2, r0
 8007bac:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007bb0:	e7e6      	b.n	8007b80 <__mdiff+0x28>
 8007bb2:	693e      	ldr	r6, [r7, #16]
 8007bb4:	60c5      	str	r5, [r0, #12]
 8007bb6:	6925      	ldr	r5, [r4, #16]
 8007bb8:	f107 0114 	add.w	r1, r7, #20
 8007bbc:	f104 0914 	add.w	r9, r4, #20
 8007bc0:	f100 0e14 	add.w	lr, r0, #20
 8007bc4:	f107 0210 	add.w	r2, r7, #16
 8007bc8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007bcc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007bd0:	46f2      	mov	sl, lr
 8007bd2:	2700      	movs	r7, #0
 8007bd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007bdc:	fa1f f883 	uxth.w	r8, r3
 8007be0:	fa17 f78b 	uxtah	r7, r7, fp
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	eba7 0808 	sub.w	r8, r7, r8
 8007bea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007bf2:	fa1f f888 	uxth.w	r8, r8
 8007bf6:	141f      	asrs	r7, r3, #16
 8007bf8:	454d      	cmp	r5, r9
 8007bfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007bfe:	f84a 3b04 	str.w	r3, [sl], #4
 8007c02:	d8e7      	bhi.n	8007bd4 <__mdiff+0x7c>
 8007c04:	1b2b      	subs	r3, r5, r4
 8007c06:	3b15      	subs	r3, #21
 8007c08:	f023 0303 	bic.w	r3, r3, #3
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	3415      	adds	r4, #21
 8007c10:	42a5      	cmp	r5, r4
 8007c12:	bf38      	it	cc
 8007c14:	2304      	movcc	r3, #4
 8007c16:	4419      	add	r1, r3
 8007c18:	4473      	add	r3, lr
 8007c1a:	469e      	mov	lr, r3
 8007c1c:	460d      	mov	r5, r1
 8007c1e:	4565      	cmp	r5, ip
 8007c20:	d30e      	bcc.n	8007c40 <__mdiff+0xe8>
 8007c22:	f10c 0203 	add.w	r2, ip, #3
 8007c26:	1a52      	subs	r2, r2, r1
 8007c28:	f022 0203 	bic.w	r2, r2, #3
 8007c2c:	3903      	subs	r1, #3
 8007c2e:	458c      	cmp	ip, r1
 8007c30:	bf38      	it	cc
 8007c32:	2200      	movcc	r2, #0
 8007c34:	441a      	add	r2, r3
 8007c36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007c3a:	b17b      	cbz	r3, 8007c5c <__mdiff+0x104>
 8007c3c:	6106      	str	r6, [r0, #16]
 8007c3e:	e7a5      	b.n	8007b8c <__mdiff+0x34>
 8007c40:	f855 8b04 	ldr.w	r8, [r5], #4
 8007c44:	fa17 f488 	uxtah	r4, r7, r8
 8007c48:	1422      	asrs	r2, r4, #16
 8007c4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007c4e:	b2a4      	uxth	r4, r4
 8007c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007c54:	f84e 4b04 	str.w	r4, [lr], #4
 8007c58:	1417      	asrs	r7, r2, #16
 8007c5a:	e7e0      	b.n	8007c1e <__mdiff+0xc6>
 8007c5c:	3e01      	subs	r6, #1
 8007c5e:	e7ea      	b.n	8007c36 <__mdiff+0xde>
 8007c60:	08008e8b 	.word	0x08008e8b
 8007c64:	08008efc 	.word	0x08008efc

08007c68 <__d2b>:
 8007c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c6c:	4689      	mov	r9, r1
 8007c6e:	2101      	movs	r1, #1
 8007c70:	ec57 6b10 	vmov	r6, r7, d0
 8007c74:	4690      	mov	r8, r2
 8007c76:	f7ff fcd5 	bl	8007624 <_Balloc>
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	b930      	cbnz	r0, 8007c8c <__d2b+0x24>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <__d2b+0xb0>)
 8007c82:	4826      	ldr	r0, [pc, #152]	; (8007d1c <__d2b+0xb4>)
 8007c84:	f240 310a 	movw	r1, #778	; 0x30a
 8007c88:	f000 fac6 	bl	8008218 <__assert_func>
 8007c8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c94:	bb35      	cbnz	r5, 8007ce4 <__d2b+0x7c>
 8007c96:	2e00      	cmp	r6, #0
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	d028      	beq.n	8007cee <__d2b+0x86>
 8007c9c:	4668      	mov	r0, sp
 8007c9e:	9600      	str	r6, [sp, #0]
 8007ca0:	f7ff fd8c 	bl	80077bc <__lo0bits>
 8007ca4:	9900      	ldr	r1, [sp, #0]
 8007ca6:	b300      	cbz	r0, 8007cea <__d2b+0x82>
 8007ca8:	9a01      	ldr	r2, [sp, #4]
 8007caa:	f1c0 0320 	rsb	r3, r0, #32
 8007cae:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb2:	430b      	orrs	r3, r1
 8007cb4:	40c2      	lsrs	r2, r0
 8007cb6:	6163      	str	r3, [r4, #20]
 8007cb8:	9201      	str	r2, [sp, #4]
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	61a3      	str	r3, [r4, #24]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bf14      	ite	ne
 8007cc2:	2202      	movne	r2, #2
 8007cc4:	2201      	moveq	r2, #1
 8007cc6:	6122      	str	r2, [r4, #16]
 8007cc8:	b1d5      	cbz	r5, 8007d00 <__d2b+0x98>
 8007cca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cce:	4405      	add	r5, r0
 8007cd0:	f8c9 5000 	str.w	r5, [r9]
 8007cd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cd8:	f8c8 0000 	str.w	r0, [r8]
 8007cdc:	4620      	mov	r0, r4
 8007cde:	b003      	add	sp, #12
 8007ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ce8:	e7d5      	b.n	8007c96 <__d2b+0x2e>
 8007cea:	6161      	str	r1, [r4, #20]
 8007cec:	e7e5      	b.n	8007cba <__d2b+0x52>
 8007cee:	a801      	add	r0, sp, #4
 8007cf0:	f7ff fd64 	bl	80077bc <__lo0bits>
 8007cf4:	9b01      	ldr	r3, [sp, #4]
 8007cf6:	6163      	str	r3, [r4, #20]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	6122      	str	r2, [r4, #16]
 8007cfc:	3020      	adds	r0, #32
 8007cfe:	e7e3      	b.n	8007cc8 <__d2b+0x60>
 8007d00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d08:	f8c9 0000 	str.w	r0, [r9]
 8007d0c:	6918      	ldr	r0, [r3, #16]
 8007d0e:	f7ff fd35 	bl	800777c <__hi0bits>
 8007d12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d16:	e7df      	b.n	8007cd8 <__d2b+0x70>
 8007d18:	08008e8b 	.word	0x08008e8b
 8007d1c:	08008efc 	.word	0x08008efc

08007d20 <_calloc_r>:
 8007d20:	b513      	push	{r0, r1, r4, lr}
 8007d22:	434a      	muls	r2, r1
 8007d24:	4611      	mov	r1, r2
 8007d26:	9201      	str	r2, [sp, #4]
 8007d28:	f000 f85a 	bl	8007de0 <_malloc_r>
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	b118      	cbz	r0, 8007d38 <_calloc_r+0x18>
 8007d30:	9a01      	ldr	r2, [sp, #4]
 8007d32:	2100      	movs	r1, #0
 8007d34:	f7fd fdfa 	bl	800592c <memset>
 8007d38:	4620      	mov	r0, r4
 8007d3a:	b002      	add	sp, #8
 8007d3c:	bd10      	pop	{r4, pc}
	...

08007d40 <_free_r>:
 8007d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d42:	2900      	cmp	r1, #0
 8007d44:	d048      	beq.n	8007dd8 <_free_r+0x98>
 8007d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d4a:	9001      	str	r0, [sp, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d52:	bfb8      	it	lt
 8007d54:	18e4      	addlt	r4, r4, r3
 8007d56:	f000 faff 	bl	8008358 <__malloc_lock>
 8007d5a:	4a20      	ldr	r2, [pc, #128]	; (8007ddc <_free_r+0x9c>)
 8007d5c:	9801      	ldr	r0, [sp, #4]
 8007d5e:	6813      	ldr	r3, [r2, #0]
 8007d60:	4615      	mov	r5, r2
 8007d62:	b933      	cbnz	r3, 8007d72 <_free_r+0x32>
 8007d64:	6063      	str	r3, [r4, #4]
 8007d66:	6014      	str	r4, [r2, #0]
 8007d68:	b003      	add	sp, #12
 8007d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d6e:	f000 baf9 	b.w	8008364 <__malloc_unlock>
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	d90b      	bls.n	8007d8e <_free_r+0x4e>
 8007d76:	6821      	ldr	r1, [r4, #0]
 8007d78:	1862      	adds	r2, r4, r1
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	bf04      	itt	eq
 8007d7e:	681a      	ldreq	r2, [r3, #0]
 8007d80:	685b      	ldreq	r3, [r3, #4]
 8007d82:	6063      	str	r3, [r4, #4]
 8007d84:	bf04      	itt	eq
 8007d86:	1852      	addeq	r2, r2, r1
 8007d88:	6022      	streq	r2, [r4, #0]
 8007d8a:	602c      	str	r4, [r5, #0]
 8007d8c:	e7ec      	b.n	8007d68 <_free_r+0x28>
 8007d8e:	461a      	mov	r2, r3
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	b10b      	cbz	r3, 8007d98 <_free_r+0x58>
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d9fa      	bls.n	8007d8e <_free_r+0x4e>
 8007d98:	6811      	ldr	r1, [r2, #0]
 8007d9a:	1855      	adds	r5, r2, r1
 8007d9c:	42a5      	cmp	r5, r4
 8007d9e:	d10b      	bne.n	8007db8 <_free_r+0x78>
 8007da0:	6824      	ldr	r4, [r4, #0]
 8007da2:	4421      	add	r1, r4
 8007da4:	1854      	adds	r4, r2, r1
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	6011      	str	r1, [r2, #0]
 8007daa:	d1dd      	bne.n	8007d68 <_free_r+0x28>
 8007dac:	681c      	ldr	r4, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	6053      	str	r3, [r2, #4]
 8007db2:	4421      	add	r1, r4
 8007db4:	6011      	str	r1, [r2, #0]
 8007db6:	e7d7      	b.n	8007d68 <_free_r+0x28>
 8007db8:	d902      	bls.n	8007dc0 <_free_r+0x80>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	6003      	str	r3, [r0, #0]
 8007dbe:	e7d3      	b.n	8007d68 <_free_r+0x28>
 8007dc0:	6825      	ldr	r5, [r4, #0]
 8007dc2:	1961      	adds	r1, r4, r5
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf04      	itt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	6063      	str	r3, [r4, #4]
 8007dce:	bf04      	itt	eq
 8007dd0:	1949      	addeq	r1, r1, r5
 8007dd2:	6021      	streq	r1, [r4, #0]
 8007dd4:	6054      	str	r4, [r2, #4]
 8007dd6:	e7c7      	b.n	8007d68 <_free_r+0x28>
 8007dd8:	b003      	add	sp, #12
 8007dda:	bd30      	pop	{r4, r5, pc}
 8007ddc:	2000040c 	.word	0x2000040c

08007de0 <_malloc_r>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	1ccd      	adds	r5, r1, #3
 8007de4:	f025 0503 	bic.w	r5, r5, #3
 8007de8:	3508      	adds	r5, #8
 8007dea:	2d0c      	cmp	r5, #12
 8007dec:	bf38      	it	cc
 8007dee:	250c      	movcc	r5, #12
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	4606      	mov	r6, r0
 8007df4:	db01      	blt.n	8007dfa <_malloc_r+0x1a>
 8007df6:	42a9      	cmp	r1, r5
 8007df8:	d903      	bls.n	8007e02 <_malloc_r+0x22>
 8007dfa:	230c      	movs	r3, #12
 8007dfc:	6033      	str	r3, [r6, #0]
 8007dfe:	2000      	movs	r0, #0
 8007e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e02:	f000 faa9 	bl	8008358 <__malloc_lock>
 8007e06:	4921      	ldr	r1, [pc, #132]	; (8007e8c <_malloc_r+0xac>)
 8007e08:	680a      	ldr	r2, [r1, #0]
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	b99c      	cbnz	r4, 8007e36 <_malloc_r+0x56>
 8007e0e:	4f20      	ldr	r7, [pc, #128]	; (8007e90 <_malloc_r+0xb0>)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	b923      	cbnz	r3, 8007e1e <_malloc_r+0x3e>
 8007e14:	4621      	mov	r1, r4
 8007e16:	4630      	mov	r0, r6
 8007e18:	f000 f998 	bl	800814c <_sbrk_r>
 8007e1c:	6038      	str	r0, [r7, #0]
 8007e1e:	4629      	mov	r1, r5
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 f993 	bl	800814c <_sbrk_r>
 8007e26:	1c43      	adds	r3, r0, #1
 8007e28:	d123      	bne.n	8007e72 <_malloc_r+0x92>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	6033      	str	r3, [r6, #0]
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f000 fa98 	bl	8008364 <__malloc_unlock>
 8007e34:	e7e3      	b.n	8007dfe <_malloc_r+0x1e>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	1b5b      	subs	r3, r3, r5
 8007e3a:	d417      	bmi.n	8007e6c <_malloc_r+0x8c>
 8007e3c:	2b0b      	cmp	r3, #11
 8007e3e:	d903      	bls.n	8007e48 <_malloc_r+0x68>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	441c      	add	r4, r3
 8007e44:	6025      	str	r5, [r4, #0]
 8007e46:	e004      	b.n	8007e52 <_malloc_r+0x72>
 8007e48:	6863      	ldr	r3, [r4, #4]
 8007e4a:	42a2      	cmp	r2, r4
 8007e4c:	bf0c      	ite	eq
 8007e4e:	600b      	streq	r3, [r1, #0]
 8007e50:	6053      	strne	r3, [r2, #4]
 8007e52:	4630      	mov	r0, r6
 8007e54:	f000 fa86 	bl	8008364 <__malloc_unlock>
 8007e58:	f104 000b 	add.w	r0, r4, #11
 8007e5c:	1d23      	adds	r3, r4, #4
 8007e5e:	f020 0007 	bic.w	r0, r0, #7
 8007e62:	1ac2      	subs	r2, r0, r3
 8007e64:	d0cc      	beq.n	8007e00 <_malloc_r+0x20>
 8007e66:	1a1b      	subs	r3, r3, r0
 8007e68:	50a3      	str	r3, [r4, r2]
 8007e6a:	e7c9      	b.n	8007e00 <_malloc_r+0x20>
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	6864      	ldr	r4, [r4, #4]
 8007e70:	e7cc      	b.n	8007e0c <_malloc_r+0x2c>
 8007e72:	1cc4      	adds	r4, r0, #3
 8007e74:	f024 0403 	bic.w	r4, r4, #3
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d0e3      	beq.n	8007e44 <_malloc_r+0x64>
 8007e7c:	1a21      	subs	r1, r4, r0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f000 f964 	bl	800814c <_sbrk_r>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d1dd      	bne.n	8007e44 <_malloc_r+0x64>
 8007e88:	e7cf      	b.n	8007e2a <_malloc_r+0x4a>
 8007e8a:	bf00      	nop
 8007e8c:	2000040c 	.word	0x2000040c
 8007e90:	20000410 	.word	0x20000410

08007e94 <__ssputs_r>:
 8007e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e98:	688e      	ldr	r6, [r1, #8]
 8007e9a:	429e      	cmp	r6, r3
 8007e9c:	4682      	mov	sl, r0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	4690      	mov	r8, r2
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	d838      	bhi.n	8007f18 <__ssputs_r+0x84>
 8007ea6:	898a      	ldrh	r2, [r1, #12]
 8007ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eac:	d032      	beq.n	8007f14 <__ssputs_r+0x80>
 8007eae:	6825      	ldr	r5, [r4, #0]
 8007eb0:	6909      	ldr	r1, [r1, #16]
 8007eb2:	eba5 0901 	sub.w	r9, r5, r1
 8007eb6:	6965      	ldr	r5, [r4, #20]
 8007eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	444b      	add	r3, r9
 8007ec4:	106d      	asrs	r5, r5, #1
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	bf38      	it	cc
 8007eca:	461d      	movcc	r5, r3
 8007ecc:	0553      	lsls	r3, r2, #21
 8007ece:	d531      	bpl.n	8007f34 <__ssputs_r+0xa0>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7ff ff85 	bl	8007de0 <_malloc_r>
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	b950      	cbnz	r0, 8007ef0 <__ssputs_r+0x5c>
 8007eda:	230c      	movs	r3, #12
 8007edc:	f8ca 3000 	str.w	r3, [sl]
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee6:	81a3      	strh	r3, [r4, #12]
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef0:	6921      	ldr	r1, [r4, #16]
 8007ef2:	464a      	mov	r2, r9
 8007ef4:	f7ff fb88 	bl	8007608 <memcpy>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	6126      	str	r6, [r4, #16]
 8007f06:	6165      	str	r5, [r4, #20]
 8007f08:	444e      	add	r6, r9
 8007f0a:	eba5 0509 	sub.w	r5, r5, r9
 8007f0e:	6026      	str	r6, [r4, #0]
 8007f10:	60a5      	str	r5, [r4, #8]
 8007f12:	463e      	mov	r6, r7
 8007f14:	42be      	cmp	r6, r7
 8007f16:	d900      	bls.n	8007f1a <__ssputs_r+0x86>
 8007f18:	463e      	mov	r6, r7
 8007f1a:	4632      	mov	r2, r6
 8007f1c:	6820      	ldr	r0, [r4, #0]
 8007f1e:	4641      	mov	r1, r8
 8007f20:	f000 fa00 	bl	8008324 <memmove>
 8007f24:	68a3      	ldr	r3, [r4, #8]
 8007f26:	6822      	ldr	r2, [r4, #0]
 8007f28:	1b9b      	subs	r3, r3, r6
 8007f2a:	4432      	add	r2, r6
 8007f2c:	60a3      	str	r3, [r4, #8]
 8007f2e:	6022      	str	r2, [r4, #0]
 8007f30:	2000      	movs	r0, #0
 8007f32:	e7db      	b.n	8007eec <__ssputs_r+0x58>
 8007f34:	462a      	mov	r2, r5
 8007f36:	f000 fa1b 	bl	8008370 <_realloc_r>
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d1e1      	bne.n	8007f04 <__ssputs_r+0x70>
 8007f40:	6921      	ldr	r1, [r4, #16]
 8007f42:	4650      	mov	r0, sl
 8007f44:	f7ff fefc 	bl	8007d40 <_free_r>
 8007f48:	e7c7      	b.n	8007eda <__ssputs_r+0x46>
	...

08007f4c <_svfiprintf_r>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	4698      	mov	r8, r3
 8007f52:	898b      	ldrh	r3, [r1, #12]
 8007f54:	061b      	lsls	r3, r3, #24
 8007f56:	b09d      	sub	sp, #116	; 0x74
 8007f58:	4607      	mov	r7, r0
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	4614      	mov	r4, r2
 8007f5e:	d50e      	bpl.n	8007f7e <_svfiprintf_r+0x32>
 8007f60:	690b      	ldr	r3, [r1, #16]
 8007f62:	b963      	cbnz	r3, 8007f7e <_svfiprintf_r+0x32>
 8007f64:	2140      	movs	r1, #64	; 0x40
 8007f66:	f7ff ff3b 	bl	8007de0 <_malloc_r>
 8007f6a:	6028      	str	r0, [r5, #0]
 8007f6c:	6128      	str	r0, [r5, #16]
 8007f6e:	b920      	cbnz	r0, 8007f7a <_svfiprintf_r+0x2e>
 8007f70:	230c      	movs	r3, #12
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	e0d1      	b.n	800811e <_svfiprintf_r+0x1d2>
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	616b      	str	r3, [r5, #20]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9309      	str	r3, [sp, #36]	; 0x24
 8007f82:	2320      	movs	r3, #32
 8007f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f8c:	2330      	movs	r3, #48	; 0x30
 8007f8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008138 <_svfiprintf_r+0x1ec>
 8007f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f96:	f04f 0901 	mov.w	r9, #1
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	469a      	mov	sl, r3
 8007f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa2:	b10a      	cbz	r2, 8007fa8 <_svfiprintf_r+0x5c>
 8007fa4:	2a25      	cmp	r2, #37	; 0x25
 8007fa6:	d1f9      	bne.n	8007f9c <_svfiprintf_r+0x50>
 8007fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8007fac:	d00b      	beq.n	8007fc6 <_svfiprintf_r+0x7a>
 8007fae:	465b      	mov	r3, fp
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f7ff ff6d 	bl	8007e94 <__ssputs_r>
 8007fba:	3001      	adds	r0, #1
 8007fbc:	f000 80aa 	beq.w	8008114 <_svfiprintf_r+0x1c8>
 8007fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc2:	445a      	add	r2, fp
 8007fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80a2 	beq.w	8008114 <_svfiprintf_r+0x1c8>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fda:	f10a 0a01 	add.w	sl, sl, #1
 8007fde:	9304      	str	r3, [sp, #16]
 8007fe0:	9307      	str	r3, [sp, #28]
 8007fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8007fe8:	4654      	mov	r4, sl
 8007fea:	2205      	movs	r2, #5
 8007fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff0:	4851      	ldr	r0, [pc, #324]	; (8008138 <_svfiprintf_r+0x1ec>)
 8007ff2:	f7f8 f915 	bl	8000220 <memchr>
 8007ff6:	9a04      	ldr	r2, [sp, #16]
 8007ff8:	b9d8      	cbnz	r0, 8008032 <_svfiprintf_r+0xe6>
 8007ffa:	06d0      	lsls	r0, r2, #27
 8007ffc:	bf44      	itt	mi
 8007ffe:	2320      	movmi	r3, #32
 8008000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008004:	0711      	lsls	r1, r2, #28
 8008006:	bf44      	itt	mi
 8008008:	232b      	movmi	r3, #43	; 0x2b
 800800a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800800e:	f89a 3000 	ldrb.w	r3, [sl]
 8008012:	2b2a      	cmp	r3, #42	; 0x2a
 8008014:	d015      	beq.n	8008042 <_svfiprintf_r+0xf6>
 8008016:	9a07      	ldr	r2, [sp, #28]
 8008018:	4654      	mov	r4, sl
 800801a:	2000      	movs	r0, #0
 800801c:	f04f 0c0a 	mov.w	ip, #10
 8008020:	4621      	mov	r1, r4
 8008022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008026:	3b30      	subs	r3, #48	; 0x30
 8008028:	2b09      	cmp	r3, #9
 800802a:	d94e      	bls.n	80080ca <_svfiprintf_r+0x17e>
 800802c:	b1b0      	cbz	r0, 800805c <_svfiprintf_r+0x110>
 800802e:	9207      	str	r2, [sp, #28]
 8008030:	e014      	b.n	800805c <_svfiprintf_r+0x110>
 8008032:	eba0 0308 	sub.w	r3, r0, r8
 8008036:	fa09 f303 	lsl.w	r3, r9, r3
 800803a:	4313      	orrs	r3, r2
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	46a2      	mov	sl, r4
 8008040:	e7d2      	b.n	8007fe8 <_svfiprintf_r+0x9c>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	1d19      	adds	r1, r3, #4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	9103      	str	r1, [sp, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	bfbb      	ittet	lt
 800804e:	425b      	neglt	r3, r3
 8008050:	f042 0202 	orrlt.w	r2, r2, #2
 8008054:	9307      	strge	r3, [sp, #28]
 8008056:	9307      	strlt	r3, [sp, #28]
 8008058:	bfb8      	it	lt
 800805a:	9204      	strlt	r2, [sp, #16]
 800805c:	7823      	ldrb	r3, [r4, #0]
 800805e:	2b2e      	cmp	r3, #46	; 0x2e
 8008060:	d10c      	bne.n	800807c <_svfiprintf_r+0x130>
 8008062:	7863      	ldrb	r3, [r4, #1]
 8008064:	2b2a      	cmp	r3, #42	; 0x2a
 8008066:	d135      	bne.n	80080d4 <_svfiprintf_r+0x188>
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	1d1a      	adds	r2, r3, #4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	9203      	str	r2, [sp, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfb8      	it	lt
 8008074:	f04f 33ff 	movlt.w	r3, #4294967295
 8008078:	3402      	adds	r4, #2
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008148 <_svfiprintf_r+0x1fc>
 8008080:	7821      	ldrb	r1, [r4, #0]
 8008082:	2203      	movs	r2, #3
 8008084:	4650      	mov	r0, sl
 8008086:	f7f8 f8cb 	bl	8000220 <memchr>
 800808a:	b140      	cbz	r0, 800809e <_svfiprintf_r+0x152>
 800808c:	2340      	movs	r3, #64	; 0x40
 800808e:	eba0 000a 	sub.w	r0, r0, sl
 8008092:	fa03 f000 	lsl.w	r0, r3, r0
 8008096:	9b04      	ldr	r3, [sp, #16]
 8008098:	4303      	orrs	r3, r0
 800809a:	3401      	adds	r4, #1
 800809c:	9304      	str	r3, [sp, #16]
 800809e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a2:	4826      	ldr	r0, [pc, #152]	; (800813c <_svfiprintf_r+0x1f0>)
 80080a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080a8:	2206      	movs	r2, #6
 80080aa:	f7f8 f8b9 	bl	8000220 <memchr>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d038      	beq.n	8008124 <_svfiprintf_r+0x1d8>
 80080b2:	4b23      	ldr	r3, [pc, #140]	; (8008140 <_svfiprintf_r+0x1f4>)
 80080b4:	bb1b      	cbnz	r3, 80080fe <_svfiprintf_r+0x1b2>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	3307      	adds	r3, #7
 80080ba:	f023 0307 	bic.w	r3, r3, #7
 80080be:	3308      	adds	r3, #8
 80080c0:	9303      	str	r3, [sp, #12]
 80080c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c4:	4433      	add	r3, r6
 80080c6:	9309      	str	r3, [sp, #36]	; 0x24
 80080c8:	e767      	b.n	8007f9a <_svfiprintf_r+0x4e>
 80080ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ce:	460c      	mov	r4, r1
 80080d0:	2001      	movs	r0, #1
 80080d2:	e7a5      	b.n	8008020 <_svfiprintf_r+0xd4>
 80080d4:	2300      	movs	r3, #0
 80080d6:	3401      	adds	r4, #1
 80080d8:	9305      	str	r3, [sp, #20]
 80080da:	4619      	mov	r1, r3
 80080dc:	f04f 0c0a 	mov.w	ip, #10
 80080e0:	4620      	mov	r0, r4
 80080e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e6:	3a30      	subs	r2, #48	; 0x30
 80080e8:	2a09      	cmp	r2, #9
 80080ea:	d903      	bls.n	80080f4 <_svfiprintf_r+0x1a8>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0c5      	beq.n	800807c <_svfiprintf_r+0x130>
 80080f0:	9105      	str	r1, [sp, #20]
 80080f2:	e7c3      	b.n	800807c <_svfiprintf_r+0x130>
 80080f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080f8:	4604      	mov	r4, r0
 80080fa:	2301      	movs	r3, #1
 80080fc:	e7f0      	b.n	80080e0 <_svfiprintf_r+0x194>
 80080fe:	ab03      	add	r3, sp, #12
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	462a      	mov	r2, r5
 8008104:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <_svfiprintf_r+0x1f8>)
 8008106:	a904      	add	r1, sp, #16
 8008108:	4638      	mov	r0, r7
 800810a:	f7fd fcb7 	bl	8005a7c <_printf_float>
 800810e:	1c42      	adds	r2, r0, #1
 8008110:	4606      	mov	r6, r0
 8008112:	d1d6      	bne.n	80080c2 <_svfiprintf_r+0x176>
 8008114:	89ab      	ldrh	r3, [r5, #12]
 8008116:	065b      	lsls	r3, r3, #25
 8008118:	f53f af2c 	bmi.w	8007f74 <_svfiprintf_r+0x28>
 800811c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800811e:	b01d      	add	sp, #116	; 0x74
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008124:	ab03      	add	r3, sp, #12
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	462a      	mov	r2, r5
 800812a:	4b06      	ldr	r3, [pc, #24]	; (8008144 <_svfiprintf_r+0x1f8>)
 800812c:	a904      	add	r1, sp, #16
 800812e:	4638      	mov	r0, r7
 8008130:	f7fd ff48 	bl	8005fc4 <_printf_i>
 8008134:	e7eb      	b.n	800810e <_svfiprintf_r+0x1c2>
 8008136:	bf00      	nop
 8008138:	0800905c 	.word	0x0800905c
 800813c:	08009066 	.word	0x08009066
 8008140:	08005a7d 	.word	0x08005a7d
 8008144:	08007e95 	.word	0x08007e95
 8008148:	08009062 	.word	0x08009062

0800814c <_sbrk_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d06      	ldr	r5, [pc, #24]	; (8008168 <_sbrk_r+0x1c>)
 8008150:	2300      	movs	r3, #0
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7f9 fb5a 	bl	8001810 <_sbrk>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_sbrk_r+0x1a>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_sbrk_r+0x1a>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	200005d4 	.word	0x200005d4

0800816c <__sread>:
 800816c:	b510      	push	{r4, lr}
 800816e:	460c      	mov	r4, r1
 8008170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008174:	f000 fa7c 	bl	8008670 <_read_r>
 8008178:	2800      	cmp	r0, #0
 800817a:	bfab      	itete	ge
 800817c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800817e:	89a3      	ldrhlt	r3, [r4, #12]
 8008180:	181b      	addge	r3, r3, r0
 8008182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008186:	bfac      	ite	ge
 8008188:	6563      	strge	r3, [r4, #84]	; 0x54
 800818a:	81a3      	strhlt	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__swrite>:
 800818e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	461f      	mov	r7, r3
 8008194:	898b      	ldrh	r3, [r1, #12]
 8008196:	05db      	lsls	r3, r3, #23
 8008198:	4605      	mov	r5, r0
 800819a:	460c      	mov	r4, r1
 800819c:	4616      	mov	r6, r2
 800819e:	d505      	bpl.n	80081ac <__swrite+0x1e>
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	2302      	movs	r3, #2
 80081a6:	2200      	movs	r2, #0
 80081a8:	f000 f898 	bl	80082dc <_lseek_r>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081b6:	81a3      	strh	r3, [r4, #12]
 80081b8:	4632      	mov	r2, r6
 80081ba:	463b      	mov	r3, r7
 80081bc:	4628      	mov	r0, r5
 80081be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	f000 b817 	b.w	80081f4 <_write_r>

080081c6 <__sseek>:
 80081c6:	b510      	push	{r4, lr}
 80081c8:	460c      	mov	r4, r1
 80081ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ce:	f000 f885 	bl	80082dc <_lseek_r>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	bf15      	itete	ne
 80081d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80081da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081e2:	81a3      	strheq	r3, [r4, #12]
 80081e4:	bf18      	it	ne
 80081e6:	81a3      	strhne	r3, [r4, #12]
 80081e8:	bd10      	pop	{r4, pc}

080081ea <__sclose>:
 80081ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ee:	f000 b831 	b.w	8008254 <_close_r>
	...

080081f4 <_write_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d07      	ldr	r5, [pc, #28]	; (8008214 <_write_r+0x20>)
 80081f8:	4604      	mov	r4, r0
 80081fa:	4608      	mov	r0, r1
 80081fc:	4611      	mov	r1, r2
 80081fe:	2200      	movs	r2, #0
 8008200:	602a      	str	r2, [r5, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	f7f9 f96c 	bl	80014e0 <_write>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d102      	bne.n	8008212 <_write_r+0x1e>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	b103      	cbz	r3, 8008212 <_write_r+0x1e>
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	200005d4 	.word	0x200005d4

08008218 <__assert_func>:
 8008218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800821a:	4614      	mov	r4, r2
 800821c:	461a      	mov	r2, r3
 800821e:	4b09      	ldr	r3, [pc, #36]	; (8008244 <__assert_func+0x2c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4605      	mov	r5, r0
 8008224:	68d8      	ldr	r0, [r3, #12]
 8008226:	b14c      	cbz	r4, 800823c <__assert_func+0x24>
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <__assert_func+0x30>)
 800822a:	9100      	str	r1, [sp, #0]
 800822c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008230:	4906      	ldr	r1, [pc, #24]	; (800824c <__assert_func+0x34>)
 8008232:	462b      	mov	r3, r5
 8008234:	f000 f81e 	bl	8008274 <fiprintf>
 8008238:	f000 fa39 	bl	80086ae <abort>
 800823c:	4b04      	ldr	r3, [pc, #16]	; (8008250 <__assert_func+0x38>)
 800823e:	461c      	mov	r4, r3
 8008240:	e7f3      	b.n	800822a <__assert_func+0x12>
 8008242:	bf00      	nop
 8008244:	20000018 	.word	0x20000018
 8008248:	0800906d 	.word	0x0800906d
 800824c:	0800907a 	.word	0x0800907a
 8008250:	080090a8 	.word	0x080090a8

08008254 <_close_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4d06      	ldr	r5, [pc, #24]	; (8008270 <_close_r+0x1c>)
 8008258:	2300      	movs	r3, #0
 800825a:	4604      	mov	r4, r0
 800825c:	4608      	mov	r0, r1
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	f7f9 faa1 	bl	80017a6 <_close>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_close_r+0x1a>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_close_r+0x1a>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	200005d4 	.word	0x200005d4

08008274 <fiprintf>:
 8008274:	b40e      	push	{r1, r2, r3}
 8008276:	b503      	push	{r0, r1, lr}
 8008278:	4601      	mov	r1, r0
 800827a:	ab03      	add	r3, sp, #12
 800827c:	4805      	ldr	r0, [pc, #20]	; (8008294 <fiprintf+0x20>)
 800827e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008282:	6800      	ldr	r0, [r0, #0]
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	f000 f8c3 	bl	8008410 <_vfiprintf_r>
 800828a:	b002      	add	sp, #8
 800828c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008290:	b003      	add	sp, #12
 8008292:	4770      	bx	lr
 8008294:	20000018 	.word	0x20000018

08008298 <_fstat_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d07      	ldr	r5, [pc, #28]	; (80082b8 <_fstat_r+0x20>)
 800829c:	2300      	movs	r3, #0
 800829e:	4604      	mov	r4, r0
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	602b      	str	r3, [r5, #0]
 80082a6:	f7f9 fa8a 	bl	80017be <_fstat>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	d102      	bne.n	80082b4 <_fstat_r+0x1c>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	b103      	cbz	r3, 80082b4 <_fstat_r+0x1c>
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	bd38      	pop	{r3, r4, r5, pc}
 80082b6:	bf00      	nop
 80082b8:	200005d4 	.word	0x200005d4

080082bc <_isatty_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d06      	ldr	r5, [pc, #24]	; (80082d8 <_isatty_r+0x1c>)
 80082c0:	2300      	movs	r3, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	602b      	str	r3, [r5, #0]
 80082c8:	f7f9 fa89 	bl	80017de <_isatty>
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	d102      	bne.n	80082d6 <_isatty_r+0x1a>
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	b103      	cbz	r3, 80082d6 <_isatty_r+0x1a>
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	200005d4 	.word	0x200005d4

080082dc <_lseek_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d07      	ldr	r5, [pc, #28]	; (80082fc <_lseek_r+0x20>)
 80082e0:	4604      	mov	r4, r0
 80082e2:	4608      	mov	r0, r1
 80082e4:	4611      	mov	r1, r2
 80082e6:	2200      	movs	r2, #0
 80082e8:	602a      	str	r2, [r5, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f7f9 fa82 	bl	80017f4 <_lseek>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_lseek_r+0x1e>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_lseek_r+0x1e>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	200005d4 	.word	0x200005d4

08008300 <__ascii_mbtowc>:
 8008300:	b082      	sub	sp, #8
 8008302:	b901      	cbnz	r1, 8008306 <__ascii_mbtowc+0x6>
 8008304:	a901      	add	r1, sp, #4
 8008306:	b142      	cbz	r2, 800831a <__ascii_mbtowc+0x1a>
 8008308:	b14b      	cbz	r3, 800831e <__ascii_mbtowc+0x1e>
 800830a:	7813      	ldrb	r3, [r2, #0]
 800830c:	600b      	str	r3, [r1, #0]
 800830e:	7812      	ldrb	r2, [r2, #0]
 8008310:	1e10      	subs	r0, r2, #0
 8008312:	bf18      	it	ne
 8008314:	2001      	movne	r0, #1
 8008316:	b002      	add	sp, #8
 8008318:	4770      	bx	lr
 800831a:	4610      	mov	r0, r2
 800831c:	e7fb      	b.n	8008316 <__ascii_mbtowc+0x16>
 800831e:	f06f 0001 	mvn.w	r0, #1
 8008322:	e7f8      	b.n	8008316 <__ascii_mbtowc+0x16>

08008324 <memmove>:
 8008324:	4288      	cmp	r0, r1
 8008326:	b510      	push	{r4, lr}
 8008328:	eb01 0402 	add.w	r4, r1, r2
 800832c:	d902      	bls.n	8008334 <memmove+0x10>
 800832e:	4284      	cmp	r4, r0
 8008330:	4623      	mov	r3, r4
 8008332:	d807      	bhi.n	8008344 <memmove+0x20>
 8008334:	1e43      	subs	r3, r0, #1
 8008336:	42a1      	cmp	r1, r4
 8008338:	d008      	beq.n	800834c <memmove+0x28>
 800833a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800833e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008342:	e7f8      	b.n	8008336 <memmove+0x12>
 8008344:	4402      	add	r2, r0
 8008346:	4601      	mov	r1, r0
 8008348:	428a      	cmp	r2, r1
 800834a:	d100      	bne.n	800834e <memmove+0x2a>
 800834c:	bd10      	pop	{r4, pc}
 800834e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008356:	e7f7      	b.n	8008348 <memmove+0x24>

08008358 <__malloc_lock>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__malloc_lock+0x8>)
 800835a:	f7ff b8e6 	b.w	800752a <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	200005cc 	.word	0x200005cc

08008364 <__malloc_unlock>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__malloc_unlock+0x8>)
 8008366:	f7ff b8e1 	b.w	800752c <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	200005cc 	.word	0x200005cc

08008370 <_realloc_r>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	4607      	mov	r7, r0
 8008374:	4614      	mov	r4, r2
 8008376:	460e      	mov	r6, r1
 8008378:	b921      	cbnz	r1, 8008384 <_realloc_r+0x14>
 800837a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800837e:	4611      	mov	r1, r2
 8008380:	f7ff bd2e 	b.w	8007de0 <_malloc_r>
 8008384:	b922      	cbnz	r2, 8008390 <_realloc_r+0x20>
 8008386:	f7ff fcdb 	bl	8007d40 <_free_r>
 800838a:	4625      	mov	r5, r4
 800838c:	4628      	mov	r0, r5
 800838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008390:	f000 f994 	bl	80086bc <_malloc_usable_size_r>
 8008394:	42a0      	cmp	r0, r4
 8008396:	d20f      	bcs.n	80083b8 <_realloc_r+0x48>
 8008398:	4621      	mov	r1, r4
 800839a:	4638      	mov	r0, r7
 800839c:	f7ff fd20 	bl	8007de0 <_malloc_r>
 80083a0:	4605      	mov	r5, r0
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d0f2      	beq.n	800838c <_realloc_r+0x1c>
 80083a6:	4631      	mov	r1, r6
 80083a8:	4622      	mov	r2, r4
 80083aa:	f7ff f92d 	bl	8007608 <memcpy>
 80083ae:	4631      	mov	r1, r6
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7ff fcc5 	bl	8007d40 <_free_r>
 80083b6:	e7e9      	b.n	800838c <_realloc_r+0x1c>
 80083b8:	4635      	mov	r5, r6
 80083ba:	e7e7      	b.n	800838c <_realloc_r+0x1c>

080083bc <__sfputc_r>:
 80083bc:	6893      	ldr	r3, [r2, #8]
 80083be:	3b01      	subs	r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	b410      	push	{r4}
 80083c4:	6093      	str	r3, [r2, #8]
 80083c6:	da08      	bge.n	80083da <__sfputc_r+0x1e>
 80083c8:	6994      	ldr	r4, [r2, #24]
 80083ca:	42a3      	cmp	r3, r4
 80083cc:	db01      	blt.n	80083d2 <__sfputc_r+0x16>
 80083ce:	290a      	cmp	r1, #10
 80083d0:	d103      	bne.n	80083da <__sfputc_r+0x1e>
 80083d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d6:	f7fd bfb1 	b.w	800633c <__swbuf_r>
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	1c58      	adds	r0, r3, #1
 80083de:	6010      	str	r0, [r2, #0]
 80083e0:	7019      	strb	r1, [r3, #0]
 80083e2:	4608      	mov	r0, r1
 80083e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <__sfputs_r>:
 80083ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ec:	4606      	mov	r6, r0
 80083ee:	460f      	mov	r7, r1
 80083f0:	4614      	mov	r4, r2
 80083f2:	18d5      	adds	r5, r2, r3
 80083f4:	42ac      	cmp	r4, r5
 80083f6:	d101      	bne.n	80083fc <__sfputs_r+0x12>
 80083f8:	2000      	movs	r0, #0
 80083fa:	e007      	b.n	800840c <__sfputs_r+0x22>
 80083fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008400:	463a      	mov	r2, r7
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff ffda 	bl	80083bc <__sfputc_r>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d1f3      	bne.n	80083f4 <__sfputs_r+0xa>
 800840c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008410 <_vfiprintf_r>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	460d      	mov	r5, r1
 8008416:	b09d      	sub	sp, #116	; 0x74
 8008418:	4614      	mov	r4, r2
 800841a:	4698      	mov	r8, r3
 800841c:	4606      	mov	r6, r0
 800841e:	b118      	cbz	r0, 8008428 <_vfiprintf_r+0x18>
 8008420:	6983      	ldr	r3, [r0, #24]
 8008422:	b90b      	cbnz	r3, 8008428 <_vfiprintf_r+0x18>
 8008424:	f7fe ffde 	bl	80073e4 <__sinit>
 8008428:	4b89      	ldr	r3, [pc, #548]	; (8008650 <_vfiprintf_r+0x240>)
 800842a:	429d      	cmp	r5, r3
 800842c:	d11b      	bne.n	8008466 <_vfiprintf_r+0x56>
 800842e:	6875      	ldr	r5, [r6, #4]
 8008430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008432:	07d9      	lsls	r1, r3, #31
 8008434:	d405      	bmi.n	8008442 <_vfiprintf_r+0x32>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	059a      	lsls	r2, r3, #22
 800843a:	d402      	bmi.n	8008442 <_vfiprintf_r+0x32>
 800843c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800843e:	f7ff f874 	bl	800752a <__retarget_lock_acquire_recursive>
 8008442:	89ab      	ldrh	r3, [r5, #12]
 8008444:	071b      	lsls	r3, r3, #28
 8008446:	d501      	bpl.n	800844c <_vfiprintf_r+0x3c>
 8008448:	692b      	ldr	r3, [r5, #16]
 800844a:	b9eb      	cbnz	r3, 8008488 <_vfiprintf_r+0x78>
 800844c:	4629      	mov	r1, r5
 800844e:	4630      	mov	r0, r6
 8008450:	f7fd ffc6 	bl	80063e0 <__swsetup_r>
 8008454:	b1c0      	cbz	r0, 8008488 <_vfiprintf_r+0x78>
 8008456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008458:	07dc      	lsls	r4, r3, #31
 800845a:	d50e      	bpl.n	800847a <_vfiprintf_r+0x6a>
 800845c:	f04f 30ff 	mov.w	r0, #4294967295
 8008460:	b01d      	add	sp, #116	; 0x74
 8008462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008466:	4b7b      	ldr	r3, [pc, #492]	; (8008654 <_vfiprintf_r+0x244>)
 8008468:	429d      	cmp	r5, r3
 800846a:	d101      	bne.n	8008470 <_vfiprintf_r+0x60>
 800846c:	68b5      	ldr	r5, [r6, #8]
 800846e:	e7df      	b.n	8008430 <_vfiprintf_r+0x20>
 8008470:	4b79      	ldr	r3, [pc, #484]	; (8008658 <_vfiprintf_r+0x248>)
 8008472:	429d      	cmp	r5, r3
 8008474:	bf08      	it	eq
 8008476:	68f5      	ldreq	r5, [r6, #12]
 8008478:	e7da      	b.n	8008430 <_vfiprintf_r+0x20>
 800847a:	89ab      	ldrh	r3, [r5, #12]
 800847c:	0598      	lsls	r0, r3, #22
 800847e:	d4ed      	bmi.n	800845c <_vfiprintf_r+0x4c>
 8008480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008482:	f7ff f853 	bl	800752c <__retarget_lock_release_recursive>
 8008486:	e7e9      	b.n	800845c <_vfiprintf_r+0x4c>
 8008488:	2300      	movs	r3, #0
 800848a:	9309      	str	r3, [sp, #36]	; 0x24
 800848c:	2320      	movs	r3, #32
 800848e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008492:	f8cd 800c 	str.w	r8, [sp, #12]
 8008496:	2330      	movs	r3, #48	; 0x30
 8008498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800865c <_vfiprintf_r+0x24c>
 800849c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084a0:	f04f 0901 	mov.w	r9, #1
 80084a4:	4623      	mov	r3, r4
 80084a6:	469a      	mov	sl, r3
 80084a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ac:	b10a      	cbz	r2, 80084b2 <_vfiprintf_r+0xa2>
 80084ae:	2a25      	cmp	r2, #37	; 0x25
 80084b0:	d1f9      	bne.n	80084a6 <_vfiprintf_r+0x96>
 80084b2:	ebba 0b04 	subs.w	fp, sl, r4
 80084b6:	d00b      	beq.n	80084d0 <_vfiprintf_r+0xc0>
 80084b8:	465b      	mov	r3, fp
 80084ba:	4622      	mov	r2, r4
 80084bc:	4629      	mov	r1, r5
 80084be:	4630      	mov	r0, r6
 80084c0:	f7ff ff93 	bl	80083ea <__sfputs_r>
 80084c4:	3001      	adds	r0, #1
 80084c6:	f000 80aa 	beq.w	800861e <_vfiprintf_r+0x20e>
 80084ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084cc:	445a      	add	r2, fp
 80084ce:	9209      	str	r2, [sp, #36]	; 0x24
 80084d0:	f89a 3000 	ldrb.w	r3, [sl]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80a2 	beq.w	800861e <_vfiprintf_r+0x20e>
 80084da:	2300      	movs	r3, #0
 80084dc:	f04f 32ff 	mov.w	r2, #4294967295
 80084e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084e4:	f10a 0a01 	add.w	sl, sl, #1
 80084e8:	9304      	str	r3, [sp, #16]
 80084ea:	9307      	str	r3, [sp, #28]
 80084ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084f0:	931a      	str	r3, [sp, #104]	; 0x68
 80084f2:	4654      	mov	r4, sl
 80084f4:	2205      	movs	r2, #5
 80084f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fa:	4858      	ldr	r0, [pc, #352]	; (800865c <_vfiprintf_r+0x24c>)
 80084fc:	f7f7 fe90 	bl	8000220 <memchr>
 8008500:	9a04      	ldr	r2, [sp, #16]
 8008502:	b9d8      	cbnz	r0, 800853c <_vfiprintf_r+0x12c>
 8008504:	06d1      	lsls	r1, r2, #27
 8008506:	bf44      	itt	mi
 8008508:	2320      	movmi	r3, #32
 800850a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800850e:	0713      	lsls	r3, r2, #28
 8008510:	bf44      	itt	mi
 8008512:	232b      	movmi	r3, #43	; 0x2b
 8008514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008518:	f89a 3000 	ldrb.w	r3, [sl]
 800851c:	2b2a      	cmp	r3, #42	; 0x2a
 800851e:	d015      	beq.n	800854c <_vfiprintf_r+0x13c>
 8008520:	9a07      	ldr	r2, [sp, #28]
 8008522:	4654      	mov	r4, sl
 8008524:	2000      	movs	r0, #0
 8008526:	f04f 0c0a 	mov.w	ip, #10
 800852a:	4621      	mov	r1, r4
 800852c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008530:	3b30      	subs	r3, #48	; 0x30
 8008532:	2b09      	cmp	r3, #9
 8008534:	d94e      	bls.n	80085d4 <_vfiprintf_r+0x1c4>
 8008536:	b1b0      	cbz	r0, 8008566 <_vfiprintf_r+0x156>
 8008538:	9207      	str	r2, [sp, #28]
 800853a:	e014      	b.n	8008566 <_vfiprintf_r+0x156>
 800853c:	eba0 0308 	sub.w	r3, r0, r8
 8008540:	fa09 f303 	lsl.w	r3, r9, r3
 8008544:	4313      	orrs	r3, r2
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	46a2      	mov	sl, r4
 800854a:	e7d2      	b.n	80084f2 <_vfiprintf_r+0xe2>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	1d19      	adds	r1, r3, #4
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	9103      	str	r1, [sp, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfbb      	ittet	lt
 8008558:	425b      	neglt	r3, r3
 800855a:	f042 0202 	orrlt.w	r2, r2, #2
 800855e:	9307      	strge	r3, [sp, #28]
 8008560:	9307      	strlt	r3, [sp, #28]
 8008562:	bfb8      	it	lt
 8008564:	9204      	strlt	r2, [sp, #16]
 8008566:	7823      	ldrb	r3, [r4, #0]
 8008568:	2b2e      	cmp	r3, #46	; 0x2e
 800856a:	d10c      	bne.n	8008586 <_vfiprintf_r+0x176>
 800856c:	7863      	ldrb	r3, [r4, #1]
 800856e:	2b2a      	cmp	r3, #42	; 0x2a
 8008570:	d135      	bne.n	80085de <_vfiprintf_r+0x1ce>
 8008572:	9b03      	ldr	r3, [sp, #12]
 8008574:	1d1a      	adds	r2, r3, #4
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	9203      	str	r2, [sp, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfb8      	it	lt
 800857e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008582:	3402      	adds	r4, #2
 8008584:	9305      	str	r3, [sp, #20]
 8008586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800866c <_vfiprintf_r+0x25c>
 800858a:	7821      	ldrb	r1, [r4, #0]
 800858c:	2203      	movs	r2, #3
 800858e:	4650      	mov	r0, sl
 8008590:	f7f7 fe46 	bl	8000220 <memchr>
 8008594:	b140      	cbz	r0, 80085a8 <_vfiprintf_r+0x198>
 8008596:	2340      	movs	r3, #64	; 0x40
 8008598:	eba0 000a 	sub.w	r0, r0, sl
 800859c:	fa03 f000 	lsl.w	r0, r3, r0
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	4303      	orrs	r3, r0
 80085a4:	3401      	adds	r4, #1
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ac:	482c      	ldr	r0, [pc, #176]	; (8008660 <_vfiprintf_r+0x250>)
 80085ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085b2:	2206      	movs	r2, #6
 80085b4:	f7f7 fe34 	bl	8000220 <memchr>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d03f      	beq.n	800863c <_vfiprintf_r+0x22c>
 80085bc:	4b29      	ldr	r3, [pc, #164]	; (8008664 <_vfiprintf_r+0x254>)
 80085be:	bb1b      	cbnz	r3, 8008608 <_vfiprintf_r+0x1f8>
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	3307      	adds	r3, #7
 80085c4:	f023 0307 	bic.w	r3, r3, #7
 80085c8:	3308      	adds	r3, #8
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ce:	443b      	add	r3, r7
 80085d0:	9309      	str	r3, [sp, #36]	; 0x24
 80085d2:	e767      	b.n	80084a4 <_vfiprintf_r+0x94>
 80085d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085d8:	460c      	mov	r4, r1
 80085da:	2001      	movs	r0, #1
 80085dc:	e7a5      	b.n	800852a <_vfiprintf_r+0x11a>
 80085de:	2300      	movs	r3, #0
 80085e0:	3401      	adds	r4, #1
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	4619      	mov	r1, r3
 80085e6:	f04f 0c0a 	mov.w	ip, #10
 80085ea:	4620      	mov	r0, r4
 80085ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f0:	3a30      	subs	r2, #48	; 0x30
 80085f2:	2a09      	cmp	r2, #9
 80085f4:	d903      	bls.n	80085fe <_vfiprintf_r+0x1ee>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0c5      	beq.n	8008586 <_vfiprintf_r+0x176>
 80085fa:	9105      	str	r1, [sp, #20]
 80085fc:	e7c3      	b.n	8008586 <_vfiprintf_r+0x176>
 80085fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008602:	4604      	mov	r4, r0
 8008604:	2301      	movs	r3, #1
 8008606:	e7f0      	b.n	80085ea <_vfiprintf_r+0x1da>
 8008608:	ab03      	add	r3, sp, #12
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	462a      	mov	r2, r5
 800860e:	4b16      	ldr	r3, [pc, #88]	; (8008668 <_vfiprintf_r+0x258>)
 8008610:	a904      	add	r1, sp, #16
 8008612:	4630      	mov	r0, r6
 8008614:	f7fd fa32 	bl	8005a7c <_printf_float>
 8008618:	4607      	mov	r7, r0
 800861a:	1c78      	adds	r0, r7, #1
 800861c:	d1d6      	bne.n	80085cc <_vfiprintf_r+0x1bc>
 800861e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008620:	07d9      	lsls	r1, r3, #31
 8008622:	d405      	bmi.n	8008630 <_vfiprintf_r+0x220>
 8008624:	89ab      	ldrh	r3, [r5, #12]
 8008626:	059a      	lsls	r2, r3, #22
 8008628:	d402      	bmi.n	8008630 <_vfiprintf_r+0x220>
 800862a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800862c:	f7fe ff7e 	bl	800752c <__retarget_lock_release_recursive>
 8008630:	89ab      	ldrh	r3, [r5, #12]
 8008632:	065b      	lsls	r3, r3, #25
 8008634:	f53f af12 	bmi.w	800845c <_vfiprintf_r+0x4c>
 8008638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800863a:	e711      	b.n	8008460 <_vfiprintf_r+0x50>
 800863c:	ab03      	add	r3, sp, #12
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	462a      	mov	r2, r5
 8008642:	4b09      	ldr	r3, [pc, #36]	; (8008668 <_vfiprintf_r+0x258>)
 8008644:	a904      	add	r1, sp, #16
 8008646:	4630      	mov	r0, r6
 8008648:	f7fd fcbc 	bl	8005fc4 <_printf_i>
 800864c:	e7e4      	b.n	8008618 <_vfiprintf_r+0x208>
 800864e:	bf00      	nop
 8008650:	08008ebc 	.word	0x08008ebc
 8008654:	08008edc 	.word	0x08008edc
 8008658:	08008e9c 	.word	0x08008e9c
 800865c:	0800905c 	.word	0x0800905c
 8008660:	08009066 	.word	0x08009066
 8008664:	08005a7d 	.word	0x08005a7d
 8008668:	080083eb 	.word	0x080083eb
 800866c:	08009062 	.word	0x08009062

08008670 <_read_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4d07      	ldr	r5, [pc, #28]	; (8008690 <_read_r+0x20>)
 8008674:	4604      	mov	r4, r0
 8008676:	4608      	mov	r0, r1
 8008678:	4611      	mov	r1, r2
 800867a:	2200      	movs	r2, #0
 800867c:	602a      	str	r2, [r5, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	f7f9 f874 	bl	800176c <_read>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_read_r+0x1e>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_read_r+0x1e>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	200005d4 	.word	0x200005d4

08008694 <__ascii_wctomb>:
 8008694:	b149      	cbz	r1, 80086aa <__ascii_wctomb+0x16>
 8008696:	2aff      	cmp	r2, #255	; 0xff
 8008698:	bf85      	ittet	hi
 800869a:	238a      	movhi	r3, #138	; 0x8a
 800869c:	6003      	strhi	r3, [r0, #0]
 800869e:	700a      	strbls	r2, [r1, #0]
 80086a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80086a4:	bf98      	it	ls
 80086a6:	2001      	movls	r0, #1
 80086a8:	4770      	bx	lr
 80086aa:	4608      	mov	r0, r1
 80086ac:	4770      	bx	lr

080086ae <abort>:
 80086ae:	b508      	push	{r3, lr}
 80086b0:	2006      	movs	r0, #6
 80086b2:	f000 f833 	bl	800871c <raise>
 80086b6:	2001      	movs	r0, #1
 80086b8:	f7f9 f84e 	bl	8001758 <_exit>

080086bc <_malloc_usable_size_r>:
 80086bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c0:	1f18      	subs	r0, r3, #4
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bfbc      	itt	lt
 80086c6:	580b      	ldrlt	r3, [r1, r0]
 80086c8:	18c0      	addlt	r0, r0, r3
 80086ca:	4770      	bx	lr

080086cc <_raise_r>:
 80086cc:	291f      	cmp	r1, #31
 80086ce:	b538      	push	{r3, r4, r5, lr}
 80086d0:	4604      	mov	r4, r0
 80086d2:	460d      	mov	r5, r1
 80086d4:	d904      	bls.n	80086e0 <_raise_r+0x14>
 80086d6:	2316      	movs	r3, #22
 80086d8:	6003      	str	r3, [r0, #0]
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086e2:	b112      	cbz	r2, 80086ea <_raise_r+0x1e>
 80086e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086e8:	b94b      	cbnz	r3, 80086fe <_raise_r+0x32>
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 f830 	bl	8008750 <_getpid_r>
 80086f0:	462a      	mov	r2, r5
 80086f2:	4601      	mov	r1, r0
 80086f4:	4620      	mov	r0, r4
 80086f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fa:	f000 b817 	b.w	800872c <_kill_r>
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d00a      	beq.n	8008718 <_raise_r+0x4c>
 8008702:	1c59      	adds	r1, r3, #1
 8008704:	d103      	bne.n	800870e <_raise_r+0x42>
 8008706:	2316      	movs	r3, #22
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	2001      	movs	r0, #1
 800870c:	e7e7      	b.n	80086de <_raise_r+0x12>
 800870e:	2400      	movs	r4, #0
 8008710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008714:	4628      	mov	r0, r5
 8008716:	4798      	blx	r3
 8008718:	2000      	movs	r0, #0
 800871a:	e7e0      	b.n	80086de <_raise_r+0x12>

0800871c <raise>:
 800871c:	4b02      	ldr	r3, [pc, #8]	; (8008728 <raise+0xc>)
 800871e:	4601      	mov	r1, r0
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f7ff bfd3 	b.w	80086cc <_raise_r>
 8008726:	bf00      	nop
 8008728:	20000018 	.word	0x20000018

0800872c <_kill_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4d07      	ldr	r5, [pc, #28]	; (800874c <_kill_r+0x20>)
 8008730:	2300      	movs	r3, #0
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	4611      	mov	r1, r2
 8008738:	602b      	str	r3, [r5, #0]
 800873a:	f7f8 fffd 	bl	8001738 <_kill>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	d102      	bne.n	8008748 <_kill_r+0x1c>
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	b103      	cbz	r3, 8008748 <_kill_r+0x1c>
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	bd38      	pop	{r3, r4, r5, pc}
 800874a:	bf00      	nop
 800874c:	200005d4 	.word	0x200005d4

08008750 <_getpid_r>:
 8008750:	f7f8 bfea 	b.w	8001728 <_getpid>

08008754 <_init>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr

08008760 <_fini>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr
